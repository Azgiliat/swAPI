/*! For license information please see main.js.LICENSE */
!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=9)}([function(t,e,n){"use strict";function r(t,e){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=i[0],s={id:t+":"+o,css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}n.r(e),n.d(e,"default",(function(){return v}));var o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},a=o&&(document.head||document.getElementsByTagName("head")[0]),s=null,c=0,u=!1,l=function(){},f=null,p="data-vue-ssr-id",d="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function v(t,e,n,o){u=n,f=o||{};var a=r(t,e);return h(a),function(e){for(var n=[],o=0;o<a.length;o++){var s=a[o];(c=i[s.id]).refs--,n.push(c)}e?h(a=r(t,e)):a=[];for(o=0;o<n.length;o++){var c;if(0===(c=n[o]).refs){for(var u=0;u<c.parts.length;u++)c.parts[u]();delete i[c.id]}}}}function h(t){for(var e=0;e<t.length;e++){var n=t[e],r=i[n.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](n.parts[o]);for(;o<n.parts.length;o++)r.parts.push(y(n.parts[o]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var a=[];for(o=0;o<n.parts.length;o++)a.push(y(n.parts[o]));i[n.id]={id:n.id,refs:1,parts:a}}}}function m(){var t=document.createElement("style");return t.type="text/css",a.appendChild(t),t}function y(t){var e,n,r=document.querySelector("style["+p+'~="'+t.id+'"]');if(r){if(u)return l;r.parentNode.removeChild(r)}if(d){var o=c++;r=s||(s=m()),e=b.bind(null,r,o,!1),n=b.bind(null,r,o,!0)}else r=m(),e=w.bind(null,r),n=function(){r.parentNode.removeChild(r)};return e(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap)return;e(t=r)}else n()}}var _,g=(_=[],function(t,e){return _[t]=e,_.filter(Boolean).join("\n")});function b(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=g(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function w(t,e){var n=e.css,r=e.media,o=e.sourceMap;if(r&&t.setAttribute("media",r),f.ssrId&&t.setAttribute(p,e.id),o&&(n+="\n/*# sourceURL="+o.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(13);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(0).default)("34f76c99",r,!1,{})},function(t,e,n){var r=n(15);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(0).default)("01bd83c2",r,!1,{})},function(t,e,n){var r=n(17);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(0).default)("49f8e6ae",r,!1,{})},function(t,e,n){var r=n(19);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(0).default)("ae5f80a2",r,!1,{})},function(t,e,n){var r=n(21);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(0).default)("0229cd3f",r,!1,{})},function(t,e,n){"use strict";(function(t){var n=("undefined"!=typeof window?window:void 0!==t?t:{}).__VUE_DEVTOOLS_GLOBAL_HOOK__;function r(t,e){Object.keys(t).forEach((function(n){return e(t[n],n)}))}var o=function(t,e){this.runtime=e,this._children=Object.create(null),this._rawModule=t;var n=t.state;this.state=("function"==typeof n?n():n)||{}},i={namespaced:{configurable:!0}};i.namespaced.get=function(){return!!this._rawModule.namespaced},o.prototype.addChild=function(t,e){this._children[t]=e},o.prototype.removeChild=function(t){delete this._children[t]},o.prototype.getChild=function(t){return this._children[t]},o.prototype.update=function(t){this._rawModule.namespaced=t.namespaced,t.actions&&(this._rawModule.actions=t.actions),t.mutations&&(this._rawModule.mutations=t.mutations),t.getters&&(this._rawModule.getters=t.getters)},o.prototype.forEachChild=function(t){r(this._children,t)},o.prototype.forEachGetter=function(t){this._rawModule.getters&&r(this._rawModule.getters,t)},o.prototype.forEachAction=function(t){this._rawModule.actions&&r(this._rawModule.actions,t)},o.prototype.forEachMutation=function(t){this._rawModule.mutations&&r(this._rawModule.mutations,t)},Object.defineProperties(o.prototype,i);var a=function(t){this.register([],t,!1)};a.prototype.get=function(t){return t.reduce((function(t,e){return t.getChild(e)}),this.root)},a.prototype.getNamespace=function(t){var e=this.root;return t.reduce((function(t,n){return t+((e=e.getChild(n)).namespaced?n+"/":"")}),"")},a.prototype.update=function(t){!function t(e,n,r){0;n.update(r);if(r.modules)for(var o in r.modules){if(!n.getChild(o))return void 0;t(e.concat(o),n.getChild(o),r.modules[o])}}([],this.root,t)},a.prototype.register=function(t,e,n){var i=this;void 0===n&&(n=!0);var a=new o(e,n);0===t.length?this.root=a:this.get(t.slice(0,-1)).addChild(t[t.length-1],a);e.modules&&r(e.modules,(function(e,r){i.register(t.concat(r),e,n)}))},a.prototype.unregister=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1];e.getChild(n).runtime&&e.removeChild(n)};var s;var c=function(t){var e=this;void 0===t&&(t={}),!s&&"undefined"!=typeof window&&window.Vue&&m(window.Vue);var r=t.plugins;void 0===r&&(r=[]);var o=t.strict;void 0===o&&(o=!1),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new a(t),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._watcherVM=new s;var i=this,c=this.dispatch,u=this.commit;this.dispatch=function(t,e){return c.call(i,t,e)},this.commit=function(t,e,n){return u.call(i,t,e,n)},this.strict=o;var l=this._modules.root.state;d(this,l,[],this._modules.root),p(this,l),r.forEach((function(t){return t(e)})),(void 0!==t.devtools?t.devtools:s.config.devtools)&&function(t){n&&(t._devtoolHook=n,n.emit("vuex:init",t),n.on("vuex:travel-to-state",(function(e){t.replaceState(e)})),t.subscribe((function(t,e){n.emit("vuex:mutation",t,e)})))}(this)},u={state:{configurable:!0}};function l(t,e){return e.indexOf(t)<0&&e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}function f(t,e){t._actions=Object.create(null),t._mutations=Object.create(null),t._wrappedGetters=Object.create(null),t._modulesNamespaceMap=Object.create(null);var n=t.state;d(t,n,[],t._modules.root,!0),p(t,n,e)}function p(t,e,n){var o=t._vm;t.getters={};var i=t._wrappedGetters,a={};r(i,(function(e,n){a[n]=function(t,e){return function(){return t(e)}}(e,t),Object.defineProperty(t.getters,n,{get:function(){return t._vm[n]},enumerable:!0})}));var c=s.config.silent;s.config.silent=!0,t._vm=new s({data:{$$state:e},computed:a}),s.config.silent=c,t.strict&&function(t){t._vm.$watch((function(){return this._data.$$state}),(function(){0}),{deep:!0,sync:!0})}(t),o&&(n&&t._withCommit((function(){o._data.$$state=null})),s.nextTick((function(){return o.$destroy()})))}function d(t,e,n,r,o){var i=!n.length,a=t._modules.getNamespace(n);if(r.namespaced&&(t._modulesNamespaceMap[a]=r),!i&&!o){var c=v(e,n.slice(0,-1)),u=n[n.length-1];t._withCommit((function(){s.set(c,u,r.state)}))}var l=r.context=function(t,e,n){var r=""===e,o={dispatch:r?t.dispatch:function(n,r,o){var i=h(n,r,o),a=i.payload,s=i.options,c=i.type;return s&&s.root||(c=e+c),t.dispatch(c,a)},commit:r?t.commit:function(n,r,o){var i=h(n,r,o),a=i.payload,s=i.options,c=i.type;s&&s.root||(c=e+c),t.commit(c,a,s)}};return Object.defineProperties(o,{getters:{get:r?function(){return t.getters}:function(){return function(t,e){var n={},r=e.length;return Object.keys(t.getters).forEach((function(o){if(o.slice(0,r)===e){var i=o.slice(r);Object.defineProperty(n,i,{get:function(){return t.getters[o]},enumerable:!0})}})),n}(t,e)}},state:{get:function(){return v(t.state,n)}}}),o}(t,a,n);r.forEachMutation((function(e,n){!function(t,e,n,r){(t._mutations[e]||(t._mutations[e]=[])).push((function(e){n.call(t,r.state,e)}))}(t,a+n,e,l)})),r.forEachAction((function(e,n){var r=e.root?n:a+n,o=e.handler||e;!function(t,e,n,r){(t._actions[e]||(t._actions[e]=[])).push((function(e,o){var i,a=n.call(t,{dispatch:r.dispatch,commit:r.commit,getters:r.getters,state:r.state,rootGetters:t.getters,rootState:t.state},e,o);return(i=a)&&"function"==typeof i.then||(a=Promise.resolve(a)),t._devtoolHook?a.catch((function(e){throw t._devtoolHook.emit("vuex:error",e),e})):a}))}(t,r,o,l)})),r.forEachGetter((function(e,n){!function(t,e,n,r){if(t._wrappedGetters[e])return void 0;t._wrappedGetters[e]=function(t){return n(r.state,r.getters,t.state,t.getters)}}(t,a+n,e,l)})),r.forEachChild((function(r,i){d(t,e,n.concat(i),r,o)}))}function v(t,e){return e.length?e.reduce((function(t,e){return t[e]}),t):t}function h(t,e,n){var r;return null!==(r=t)&&"object"==typeof r&&t.type&&(n=e,e=t,t=t.type),{type:t,payload:e,options:n}}function m(t){s&&t===s||function(t){if(Number(t.version.split(".")[0])>=2)t.mixin({beforeCreate:n});else{var e=t.prototype._init;t.prototype._init=function(t){void 0===t&&(t={}),t.init=t.init?[n].concat(t.init):n,e.call(this,t)}}function n(){var t=this.$options;t.store?this.$store="function"==typeof t.store?t.store():t.store:t.parent&&t.parent.$store&&(this.$store=t.parent.$store)}}(s=t)}u.state.get=function(){return this._vm._data.$$state},u.state.set=function(t){0},c.prototype.commit=function(t,e,n){var r=this,o=h(t,e,n),i=o.type,a=o.payload,s=(o.options,{type:i,payload:a}),c=this._mutations[i];c&&(this._withCommit((function(){c.forEach((function(t){t(a)}))})),this._subscribers.forEach((function(t){return t(s,r.state)})))},c.prototype.dispatch=function(t,e){var n=this,r=h(t,e),o=r.type,i=r.payload,a={type:o,payload:i},s=this._actions[o];if(s){try{this._actionSubscribers.filter((function(t){return t.before})).forEach((function(t){return t.before(a,n.state)}))}catch(t){0}return(s.length>1?Promise.all(s.map((function(t){return t(i)}))):s[0](i)).then((function(t){try{n._actionSubscribers.filter((function(t){return t.after})).forEach((function(t){return t.after(a,n.state)}))}catch(t){0}return t}))}},c.prototype.subscribe=function(t){return l(t,this._subscribers)},c.prototype.subscribeAction=function(t){return l("function"==typeof t?{before:t}:t,this._actionSubscribers)},c.prototype.watch=function(t,e,n){var r=this;return this._watcherVM.$watch((function(){return t(r.state,r.getters)}),e,n)},c.prototype.replaceState=function(t){var e=this;this._withCommit((function(){e._vm._data.$$state=t}))},c.prototype.registerModule=function(t,e,n){void 0===n&&(n={}),"string"==typeof t&&(t=[t]),this._modules.register(t,e),d(this,this.state,t,this._modules.get(t),n.preserveState),p(this,this.state)},c.prototype.unregisterModule=function(t){var e=this;"string"==typeof t&&(t=[t]),this._modules.unregister(t),this._withCommit((function(){var n=v(e.state,t.slice(0,-1));s.delete(n,t[t.length-1])})),f(this)},c.prototype.hotUpdate=function(t){this._modules.update(t),f(this,!0)},c.prototype._withCommit=function(t){var e=this._committing;this._committing=!0,t(),this._committing=e},Object.defineProperties(c.prototype,u);var y=C((function(t,e){var n={};return w(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=this.$store.state,n=this.$store.getters;if(t){var r=L(this.$store,"mapState",t);if(!r)return;e=r.context.state,n=r.context.getters}return"function"==typeof o?o.call(this,e,n):e[o]},n[r].vuex=!0})),n})),_=C((function(t,e){var n={};return w(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){for(var e=[],n=arguments.length;n--;)e[n]=arguments[n];var r=this.$store.commit;if(t){var i=L(this.$store,"mapMutations",t);if(!i)return;r=i.context.commit}return"function"==typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n})),g=C((function(t,e){var n={};return w(e).forEach((function(e){var r=e.key,o=e.val;o=t+o,n[r]=function(){if(!t||L(this.$store,"mapGetters",t))return this.$store.getters[o]},n[r].vuex=!0})),n})),b=C((function(t,e){var n={};return w(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){for(var e=[],n=arguments.length;n--;)e[n]=arguments[n];var r=this.$store.dispatch;if(t){var i=L(this.$store,"mapActions",t);if(!i)return;r=i.context.dispatch}return"function"==typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n}));function w(t){return Array.isArray(t)?t.map((function(t){return{key:t,val:t}})):Object.keys(t).map((function(e){return{key:e,val:t[e]}}))}function C(t){return function(e,n){return"string"!=typeof e?(n=e,e=""):"/"!==e.charAt(e.length-1)&&(e+="/"),t(e,n)}}function L(t,e,n){return t._modulesNamespaceMap[n]}var $={Store:c,install:m,version:"3.1.1",mapState:y,mapMutations:_,mapGetters:g,mapActions:b,createNamespacedHelpers:function(t){return{mapState:y.bind(null,t),mapGetters:g.bind(null,t),mapMutations:_.bind(null,t),mapActions:b.bind(null,t)}}};e.a=$}).call(this,n(1))},function(t,e,n){"use strict";(function(t,n){var r=Object.freeze({});function o(t){return null==t}function i(t){return null!=t}function a(t){return!0===t}function s(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function c(t){return null!==t&&"object"==typeof t}var u=Object.prototype.toString;function l(t){return"[object Object]"===u.call(t)}function f(t){return"[object RegExp]"===u.call(t)}function p(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function d(t){return i(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function v(t){return null==t?"":Array.isArray(t)||l(t)&&t.toString===u?JSON.stringify(t,null,2):String(t)}function h(t){var e=parseFloat(t);return isNaN(e)?t:e}function m(t,e){for(var n=Object.create(null),r=t.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}m("slot,component",!0);var y=m("key,ref,slot,slot-scope,is");function _(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var g=Object.prototype.hasOwnProperty;function b(t,e){return g.call(t,e)}function w(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var C=/-(\w)/g,L=w((function(t){return t.replace(C,(function(t,e){return e?e.toUpperCase():""}))})),$=w((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),x=/\B([A-Z])/g,A=w((function(t){return t.replace(x,"-$1").toLowerCase()}));var O=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function k(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function S(t,e){for(var n in e)t[n]=e[n];return t}function E(t){for(var e={},n=0;n<t.length;n++)t[n]&&S(e,t[n]);return e}function T(t,e,n){}var j=function(t,e,n){return!1},I=function(t){return t};function M(t,e){if(t===e)return!0;var n=c(t),r=c(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),i=Array.isArray(e);if(o&&i)return t.length===e.length&&t.every((function(t,n){return M(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(o||i)return!1;var a=Object.keys(t),s=Object.keys(e);return a.length===s.length&&a.every((function(n){return M(t[n],e[n])}))}catch(t){return!1}}function P(t,e){for(var n=0;n<t.length;n++)if(M(t[n],e))return n;return-1}function N(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var D="data-server-rendered",F=["component","directive","filter"],R=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],U={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:j,isReservedAttr:j,isUnknownElement:j,getTagNamespace:T,parsePlatformTagName:I,mustUseProp:j,async:!0,_lifecycleHooks:R},B=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function V(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var H=new RegExp("[^"+B.source+".$_\\d]");var z,G="__proto__"in{},W="undefined"!=typeof window,q="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=q&&WXEnvironment.platform.toLowerCase(),X=W&&window.navigator.userAgent.toLowerCase(),Z=X&&/msie|trident/.test(X),J=X&&X.indexOf("msie 9.0")>0,Q=X&&X.indexOf("edge/")>0,Y=(X&&X.indexOf("android"),X&&/iphone|ipad|ipod|ios/.test(X)||"ios"===K),tt=(X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X),X&&X.match(/firefox\/(\d+)/)),et={}.watch,nt=!1;if(W)try{var rt={};Object.defineProperty(rt,"passive",{get:function(){nt=!0}}),window.addEventListener("test-passive",null,rt)}catch(t){}var ot=function(){return void 0===z&&(z=!W&&!q&&void 0!==t&&(t.process&&"server"===t.process.env.VUE_ENV)),z},it=W&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function at(t){return"function"==typeof t&&/native code/.test(t.toString())}var st,ct="undefined"!=typeof Symbol&&at(Symbol)&&"undefined"!=typeof Reflect&&at(Reflect.ownKeys);st="undefined"!=typeof Set&&at(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var ut=T,lt=0,ft=function(){this.id=lt++,this.subs=[]};ft.prototype.addSub=function(t){this.subs.push(t)},ft.prototype.removeSub=function(t){_(this.subs,t)},ft.prototype.depend=function(){ft.target&&ft.target.addDep(this)},ft.prototype.notify=function(){var t=this.subs.slice();for(var e=0,n=t.length;e<n;e++)t[e].update()},ft.target=null;var pt=[];function dt(t){pt.push(t),ft.target=t}function vt(){pt.pop(),ft.target=pt[pt.length-1]}var ht=function(t,e,n,r,o,i,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},mt={child:{configurable:!0}};mt.child.get=function(){return this.componentInstance},Object.defineProperties(ht.prototype,mt);var yt=function(t){void 0===t&&(t="");var e=new ht;return e.text=t,e.isComment=!0,e};function _t(t){return new ht(void 0,void 0,void 0,String(t))}function gt(t){var e=new ht(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var bt=Array.prototype,wt=Object.create(bt);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(t){var e=bt[t];V(wt,t,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i}))}));var Ct=Object.getOwnPropertyNames(wt),Lt=!0;function $t(t){Lt=t}var xt=function(t){this.value=t,this.dep=new ft,this.vmCount=0,V(t,"__ob__",this),Array.isArray(t)?(G?function(t,e){t.__proto__=e}(t,wt):function(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];V(t,i,e[i])}}(t,wt,Ct),this.observeArray(t)):this.walk(t)};function At(t,e){var n;if(c(t)&&!(t instanceof ht))return b(t,"__ob__")&&t.__ob__ instanceof xt?n=t.__ob__:Lt&&!ot()&&(Array.isArray(t)||l(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new xt(t)),e&&n&&n.vmCount++,n}function Ot(t,e,n,r,o){var i=new ft,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=t[e]);var u=!o&&At(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return ft.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(e)&&function t(e){for(var n=void 0,r=0,o=e.length;r<o;r++)(n=e[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&t(n)}(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!=e&&r!=r||s&&!c||(c?c.call(t,e):n=e,u=!o&&At(e),i.notify())}})}}function kt(t,e,n){if(Array.isArray(t)&&p(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(Ot(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function St(t,e){if(Array.isArray(t)&&p(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||b(t,e)&&(delete t[e],n&&n.dep.notify())}}xt.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)Ot(t,e[n])},xt.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)At(t[e])};var Et=U.optionMergeStrategies;function Tt(t,e){if(!e)return t;for(var n,r,o,i=ct?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)"__ob__"!==(n=i[a])&&(r=t[n],o=e[n],b(t,n)?r!==o&&l(r)&&l(o)&&Tt(r,o):kt(t,n,o));return t}function jt(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,o="function"==typeof t?t.call(n,n):t;return r?Tt(r,o):o}:e?t?function(){return Tt("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function It(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(n):n}function Mt(t,e,n,r){var o=Object.create(t||null);return e?S(o,e):o}Et.data=function(t,e,n){return n?jt(t,e,n):e&&"function"!=typeof e?t:jt(t,e)},R.forEach((function(t){Et[t]=It})),F.forEach((function(t){Et[t+"s"]=Mt})),Et.watch=function(t,e,n,r){if(t===et&&(t=void 0),e===et&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var o={};for(var i in S(o,t),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Et.props=Et.methods=Et.inject=Et.computed=function(t,e,n,r){if(!t)return e;var o=Object.create(null);return S(o,t),e&&S(o,e),o},Et.provide=jt;var Pt=function(t,e){return void 0===e?t:e};function Nt(t,e,n){if("function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,o,i={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])&&(i[L(o)]={type:null});else if(l(n))for(var a in n)o=n[a],i[L(a)]=l(o)?o:{type:o};else 0;t.props=i}}(e),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(l(n))for(var i in n){var a=n[i];r[i]=l(a)?S({from:i},a):{from:a}}else 0}}(e),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(t=Nt(t,e.extends,n)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)t=Nt(t,e.mixins[r],n);var i,a={};for(i in t)s(i);for(i in e)b(t,i)||s(i);function s(r){var o=Et[r]||Pt;a[r]=o(t[r],e[r],n,r)}return a}function Dt(t,e,n,r){if("string"==typeof n){var o=t[e];if(b(o,n))return o[n];var i=L(n);if(b(o,i))return o[i];var a=$(i);return b(o,a)?o[a]:o[n]||o[i]||o[a]}}function Ft(t,e,n,r){var o=e[t],i=!b(n,t),a=n[t],s=Bt(Boolean,o.type);if(s>-1)if(i&&!b(o,"default"))a=!1;else if(""===a||a===A(t)){var c=Bt(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(!b(e,"default"))return;var r=e.default;0;if(t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n])return t._props[n];return"function"==typeof r&&"Function"!==Rt(e.type)?r.call(t):r}(r,o,t);var u=Lt;$t(!0),At(a),$t(u)}return a}function Rt(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Ut(t,e){return Rt(t)===Rt(e)}function Bt(t,e){if(!Array.isArray(e))return Ut(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Ut(e[n],t))return n;return-1}function Vt(t,e,n){dt();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,t,e,n))return}catch(t){zt(t,r,"errorCaptured hook")}}zt(t,e,n)}finally{vt()}}function Ht(t,e,n,r,o){var i;try{(i=n?t.apply(e,n):t.call(e))&&!i._isVue&&d(i)&&!i._handled&&(i.catch((function(t){return Vt(t,r,o+" (Promise/async)")})),i._handled=!0)}catch(t){Vt(t,r,o)}return i}function zt(t,e,n){if(U.errorHandler)try{return U.errorHandler.call(null,t,e,n)}catch(e){e!==t&&Gt(e,null,"config.errorHandler")}Gt(t,e,n)}function Gt(t,e,n){if(!W&&!q||"undefined"==typeof console)throw t;console.error(t)}var Wt,qt=!1,Kt=[],Xt=!1;function Zt(){Xt=!1;var t=Kt.slice(0);Kt.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!=typeof Promise&&at(Promise)){var Jt=Promise.resolve();Wt=function(){Jt.then(Zt),Y&&setTimeout(T)},qt=!0}else if(Z||"undefined"==typeof MutationObserver||!at(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Wt=void 0!==n&&at(n)?function(){n(Zt)}:function(){setTimeout(Zt,0)};else{var Qt=1,Yt=new MutationObserver(Zt),te=document.createTextNode(String(Qt));Yt.observe(te,{characterData:!0}),Wt=function(){Qt=(Qt+1)%2,te.data=String(Qt)},qt=!0}function ee(t,e){var n;if(Kt.push((function(){if(t)try{t.call(e)}catch(t){Vt(t,e,"nextTick")}else n&&n(e)})),Xt||(Xt=!0,Wt()),!t&&"undefined"!=typeof Promise)return new Promise((function(t){n=t}))}var ne=new st;function re(t){!function t(e,n){var r,o;var i=Array.isArray(e);if(!i&&!c(e)||Object.isFrozen(e)||e instanceof ht)return;if(e.__ob__){var a=e.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(i)for(r=e.length;r--;)t(e[r],n);else for(o=Object.keys(e),r=o.length;r--;)t(e[o[r]],n)}(t,ne),ne.clear()}var oe=w((function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}}));function ie(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return Ht(r,null,arguments,e,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)Ht(o[i],null,t,e,"v-on handler")}return n.fns=t,n}function ae(t,e,n,r,i,s){var c,u,l,f;for(c in t)u=t[c],l=e[c],f=oe(c),o(u)||(o(l)?(o(u.fns)&&(u=t[c]=ie(u,s)),a(f.once)&&(u=t[c]=i(f.name,u,f.capture)),n(f.name,u,f.capture,f.passive,f.params)):u!==l&&(l.fns=u,t[c]=l));for(c in e)o(t[c])&&r((f=oe(c)).name,e[c],f.capture)}function se(t,e,n){var r;t instanceof ht&&(t=t.data.hook||(t.data.hook={}));var s=t[e];function c(){n.apply(this,arguments),_(r.fns,c)}o(s)?r=ie([c]):i(s.fns)&&a(s.merged)?(r=s).fns.push(c):r=ie([s,c]),r.merged=!0,t[e]=r}function ce(t,e,n,r,o){if(i(e)){if(b(e,n))return t[n]=e[n],o||delete e[n],!0;if(b(e,r))return t[n]=e[r],o||delete e[r],!0}return!1}function ue(t){return s(t)?[_t(t)]:Array.isArray(t)?function t(e,n){var r=[];var c,u,l,f;for(c=0;c<e.length;c++)o(u=e[c])||"boolean"==typeof u||(l=r.length-1,f=r[l],Array.isArray(u)?u.length>0&&(le((u=t(u,(n||"")+"_"+c))[0])&&le(f)&&(r[l]=_t(f.text+u[0].text),u.shift()),r.push.apply(r,u)):s(u)?le(f)?r[l]=_t(f.text+u):""!==u&&r.push(_t(u)):le(u)&&le(f)?r[l]=_t(f.text+u.text):(a(e._isVList)&&i(u.tag)&&o(u.key)&&i(n)&&(u.key="__vlist"+n+"_"+c+"__"),r.push(u)));return r}(t):void 0}function le(t){return i(t)&&i(t.text)&&!1===t.isComment}function fe(t,e){if(t){for(var n=Object.create(null),r=ct?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){for(var a=t[i].from,s=e;s;){if(s._provided&&b(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s)if("default"in t[i]){var c=t[i].default;n[i]="function"==typeof c?c.call(e):c}else 0}}return n}}function pe(t,e){if(!t||!t.length)return{};for(var n={},r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(de)&&delete n[u];return n}function de(t){return t.isComment&&!t.asyncFactory||" "===t.text}function ve(t,e,n){var o,i=Object.keys(e).length>0,a=t?!!t.$stable:!i,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(a&&n&&n!==r&&s===n.$key&&!i&&!n.$hasNormal)return n;for(var c in o={},t)t[c]&&"$"!==c[0]&&(o[c]=he(e,c,t[c]))}else o={};for(var u in e)u in o||(o[u]=me(e,u));return t&&Object.isExtensible(t)&&(t._normalized=o),V(o,"$stable",a),V(o,"$key",s),V(o,"$hasNormal",i),o}function he(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return(t=t&&"object"==typeof t&&!Array.isArray(t)?[t]:ue(t))&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function me(t,e){return function(){return t[e]}}function ye(t,e){var n,r,o,a,s;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,o=t.length;r<o;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(c(t))if(ct&&t[Symbol.iterator]){n=[];for(var u=t[Symbol.iterator](),l=u.next();!l.done;)n.push(e(l.value,n.length)),l=u.next()}else for(a=Object.keys(t),n=new Array(a.length),r=0,o=a.length;r<o;r++)s=a[r],n[r]=e(t[s],s,r);return i(n)||(n=[]),n._isVList=!0,n}function _e(t,e,n,r){var o,i=this.$scopedSlots[t];i?(n=n||{},r&&(n=S(S({},r),n)),o=i(n)||e):o=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},o):o}function ge(t){return Dt(this.$options,"filters",t)||I}function be(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function we(t,e,n,r,o){var i=U.keyCodes[e]||n;return o&&r&&!U.keyCodes[e]?be(o,r):i?be(i,t):r?A(r)!==e:void 0}function Ce(t,e,n,r,o){if(n)if(c(n)){var i;Array.isArray(n)&&(n=E(n));var a=function(a){if("class"===a||"style"===a||y(a))i=t;else{var s=t.attrs&&t.attrs.type;i=r||U.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var c=L(a),u=A(a);c in i||u in i||(i[a]=n[a],o&&((t.on||(t.on={}))["update:"+a]=function(t){n[a]=t}))};for(var s in n)a(s)}else;return t}function Le(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e?r:(xe(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r)}function $e(t,e,n){return xe(t,"__once__"+e+(n?"_"+n:""),!0),t}function xe(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Ae(t[r],e+"_"+r,n);else Ae(t,e,n)}function Ae(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function Oe(t,e){if(e)if(l(e)){var n=t.on=t.on?S({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else;return t}function ke(t,e,n,r){e=e||{$stable:!n};for(var o=0;o<t.length;o++){var i=t[o];Array.isArray(i)?ke(i,e,n):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function Se(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"==typeof r&&r&&(t[e[n]]=e[n+1])}return t}function Ee(t,e){return"string"==typeof t?e+t:t}function Te(t){t._o=$e,t._n=h,t._s=v,t._l=ye,t._t=_e,t._q=M,t._i=P,t._m=Le,t._f=ge,t._k=we,t._b=Ce,t._v=_t,t._e=yt,t._u=ke,t._g=Oe,t._d=Se,t._p=Ee}function je(t,e,n,o,i){var s,c=this,u=i.options;b(o,"_uid")?(s=Object.create(o))._original=o:(s=o,o=o._original);var l=a(u._compiled),f=!l;this.data=t,this.props=e,this.children=n,this.parent=o,this.listeners=t.on||r,this.injections=fe(u.inject,o),this.slots=function(){return c.$slots||ve(t.scopedSlots,c.$slots=pe(n,o)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ve(t.scopedSlots,this.slots())}}),l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=ve(t.scopedSlots,this.$slots)),u._scopeId?this._c=function(t,e,n,r){var i=Be(s,t,e,n,r,f);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(t,e,n,r){return Be(s,t,e,n,r,f)}}function Ie(t,e,n,r,o){var i=gt(t);return i.fnContext=n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function Me(t,e){for(var n in e)t[L(n)]=e[n]}Te(je.prototype);var Pe={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;Pe.prepatch(n,n)}else{(t.componentInstance=function(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;i(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new t.componentOptions.Ctor(n)}(t,Je)).$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions;!function(t,e,n,o,i){0;var a=o.data.scopedSlots,s=t.$scopedSlots,c=!!(a&&!a.$stable||s!==r&&!s.$stable||a&&t.$scopedSlots.$key!==a.$key),u=!!(i||t.$options._renderChildren||c);t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o);if(t.$options._renderChildren=i,t.$attrs=o.data.attrs||r,t.$listeners=n||r,e&&t.$options.props){$t(!1);for(var l=t._props,f=t.$options._propKeys||[],p=0;p<f.length;p++){var d=f[p],v=t.$options.props;l[d]=Ft(d,v,e,t)}$t(!0),t.$options.propsData=e}n=n||r;var h=t.$options._parentListeners;t.$options._parentListeners=n,Ze(t,n,h),u&&(t.$slots=pe(i,o.context),t.$forceUpdate());0}(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,en(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,rn.push(e)):tn(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(n&&(e._directInactive=!0,Ye(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);en(e,"deactivated")}}(e,!0):e.$destroy())}},Ne=Object.keys(Pe);function De(t,e,n,s,u){if(!o(t)){var l=n.$options._base;if(c(t)&&(t=l.extend(t)),"function"==typeof t){var f;if(o(t.cid)&&void 0===(t=function(t,e){if(a(t.error)&&i(t.errorComp))return t.errorComp;if(i(t.resolved))return t.resolved;var n=He;n&&i(t.owners)&&-1===t.owners.indexOf(n)&&t.owners.push(n);if(a(t.loading)&&i(t.loadingComp))return t.loadingComp;if(n&&!i(t.owners)){var r=t.owners=[n],s=!0,u=null,l=null;n.$on("hook:destroyed",(function(){return _(r,n)}));var f=function(t){for(var e=0,n=r.length;e<n;e++)r[e].$forceUpdate();t&&(r.length=0,null!==u&&(clearTimeout(u),u=null),null!==l&&(clearTimeout(l),l=null))},p=N((function(n){t.resolved=ze(n,e),s?r.length=0:f(!0)})),v=N((function(e){i(t.errorComp)&&(t.error=!0,f(!0))})),h=t(p,v);return c(h)&&(d(h)?o(t.resolved)&&h.then(p,v):d(h.component)&&(h.component.then(p,v),i(h.error)&&(t.errorComp=ze(h.error,e)),i(h.loading)&&(t.loadingComp=ze(h.loading,e),0===h.delay?t.loading=!0:u=setTimeout((function(){u=null,o(t.resolved)&&o(t.error)&&(t.loading=!0,f(!1))}),h.delay||200)),i(h.timeout)&&(l=setTimeout((function(){l=null,o(t.resolved)&&v(null)}),h.timeout)))),s=!1,t.loading?t.loadingComp:t.resolved}}(f=t,l)))return function(t,e,n,r,o){var i=yt();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}(f,e,n,s,u);e=e||{},$n(t),i(e.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var o=e.on||(e.on={}),a=o[r],s=e.model.callback;i(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(o[r]=[s].concat(a)):o[r]=s}(t.options,e);var p=function(t,e,n){var r=e.options.props;if(!o(r)){var a={},s=t.attrs,c=t.props;if(i(s)||i(c))for(var u in r){var l=A(u);ce(a,c,u,l,!0)||ce(a,s,u,l,!1)}return a}}(e,t);if(a(t.options.functional))return function(t,e,n,o,a){var s=t.options,c={},u=s.props;if(i(u))for(var l in u)c[l]=Ft(l,u,e||r);else i(n.attrs)&&Me(c,n.attrs),i(n.props)&&Me(c,n.props);var f=new je(n,c,a,o,t),p=s.render.call(null,f._c,f);if(p instanceof ht)return Ie(p,n,f.parent,s,f);if(Array.isArray(p)){for(var d=ue(p)||[],v=new Array(d.length),h=0;h<d.length;h++)v[h]=Ie(d[h],n,f.parent,s,f);return v}}(t,p,e,n,s);var v=e.on;if(e.on=e.nativeOn,a(t.options.abstract)){var h=e.slot;e={},h&&(e.slot=h)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<Ne.length;n++){var r=Ne[n],o=e[r],i=Pe[r];o===i||o&&o._merged||(e[r]=o?Fe(i,o):i)}}(e);var m=t.options.name||u;return new ht("vue-component-"+t.cid+(m?"-"+m:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:p,listeners:v,tag:u,children:s},f)}}}function Fe(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}var Re=1,Ue=2;function Be(t,e,n,r,u,l){return(Array.isArray(n)||s(n))&&(u=r,r=n,n=void 0),a(l)&&(u=Ue),function(t,e,n,r,s){if(i(n)&&i(n.__ob__))return yt();i(n)&&i(n.is)&&(e=n.is);if(!e)return yt();0;Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);s===Ue?r=ue(r):s===Re&&(r=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(r));var u,l;if("string"==typeof e){var f;l=t.$vnode&&t.$vnode.ns||U.getTagNamespace(e),u=U.isReservedTag(e)?new ht(U.parsePlatformTagName(e),n,r,void 0,void 0,t):n&&n.pre||!i(f=Dt(t.$options,"components",e))?new ht(e,n,r,void 0,void 0,t):De(f,n,t,r,e)}else u=De(e,n,t,r);return Array.isArray(u)?u:i(u)?(i(l)&&function t(e,n,r){e.ns=n;"foreignObject"===e.tag&&(n=void 0,r=!0);if(i(e.children))for(var s=0,c=e.children.length;s<c;s++){var u=e.children[s];i(u.tag)&&(o(u.ns)||a(r)&&"svg"!==u.tag)&&t(u,n,r)}}(u,l),i(n)&&function(t){c(t.style)&&re(t.style);c(t.class)&&re(t.class)}(n),u):yt()}(t,e,n,r,u)}var Ve,He=null;function ze(t,e){return(t.__esModule||ct&&"Module"===t[Symbol.toStringTag])&&(t=t.default),c(t)?e.extend(t):t}function Ge(t){return t.isComment&&t.asyncFactory}function We(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(i(n)&&(i(n.componentOptions)||Ge(n)))return n}}function qe(t,e){Ve.$on(t,e)}function Ke(t,e){Ve.$off(t,e)}function Xe(t,e){var n=Ve;return function r(){var o=e.apply(null,arguments);null!==o&&n.$off(t,r)}}function Ze(t,e,n){Ve=t,ae(e,n||{},qe,Ke,Xe,t),Ve=void 0}var Je=null;function Qe(t){var e=Je;return Je=t,function(){Je=e}}function Ye(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function tn(t,e){if(e){if(t._directInactive=!1,Ye(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)tn(t.$children[n]);en(t,"activated")}}function en(t,e){dt();var n=t.$options[e],r=e+" hook";if(n)for(var o=0,i=n.length;o<i;o++)Ht(n[o],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),vt()}var nn=[],rn=[],on={},an=!1,sn=!1,cn=0;var un=0,ln=Date.now;if(W&&!Z){var fn=window.performance;fn&&"function"==typeof fn.now&&ln()>document.createEvent("Event").timeStamp&&(ln=function(){return fn.now()})}function pn(){var t,e;for(un=ln(),sn=!0,nn.sort((function(t,e){return t.id-e.id})),cn=0;cn<nn.length;cn++)(t=nn[cn]).before&&t.before(),e=t.id,on[e]=null,t.run();var n=rn.slice(),r=nn.slice();cn=nn.length=rn.length=0,on={},an=sn=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,tn(t[e],!0)}(n),function(t){var e=t.length;for(;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&en(r,"updated")}}(r),it&&U.devtools&&it.emit("flush")}var dn=0,vn=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++dn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new st,this.newDepIds=new st,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(t){if(!H.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=T)),this.value=this.lazy?void 0:this.get()};vn.prototype.get=function(){var t;dt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;Vt(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&re(t),vt(),this.cleanupDeps()}return t},vn.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},vn.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},vn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==on[e]){if(on[e]=!0,sn){for(var n=nn.length-1;n>cn&&nn[n].id>t.id;)n--;nn.splice(n+1,0,t)}else nn.push(t);an||(an=!0,ee(pn))}}(this)},vn.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||c(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){Vt(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},vn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},vn.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},vn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||_(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var hn={enumerable:!0,configurable:!0,get:T,set:T};function mn(t,e,n){hn.get=function(){return this[e][n]},hn.set=function(t){this[e][n]=t},Object.defineProperty(t,n,hn)}function yn(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[];t.$parent&&$t(!1);var i=function(i){o.push(i);var a=Ft(i,e,n,t);Ot(r,i,a),i in t||mn(t,"_props",i)};for(var a in e)i(a);$t(!0)}(t,e.props),e.methods&&function(t,e){t.$options.props;for(var n in e)t[n]="function"!=typeof e[n]?T:O(e[n],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;l(e=t._data="function"==typeof e?function(t,e){dt();try{return t.call(e,e)}catch(t){return Vt(t,e,"data()"),{}}finally{vt()}}(e,t):e||{})||(e={});var n=Object.keys(e),r=t.$options.props,o=(t.$options.methods,n.length);for(;o--;){var i=n[o];0,r&&b(r,i)||(a=void 0,36!==(a=(i+"").charCodeAt(0))&&95!==a&&mn(t,"_data",i))}var a;At(e,!0)}(t):At(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=ot();for(var o in e){var i=e[o],a="function"==typeof i?i:i.get;0,r||(n[o]=new vn(t,a||T,T,_n)),o in t||gn(t,o,i)}}(t,e.computed),e.watch&&e.watch!==et&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)Cn(t,n,r[o]);else Cn(t,n,r)}}(t,e.watch)}var _n={lazy:!0};function gn(t,e,n){var r=!ot();"function"==typeof n?(hn.get=r?bn(e):wn(n),hn.set=T):(hn.get=n.get?r&&!1!==n.cache?bn(e):wn(n.get):T,hn.set=n.set||T),Object.defineProperty(t,e,hn)}function bn(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),ft.target&&e.depend(),e.value}}function wn(t){return function(){return t.call(this,this)}}function Cn(t,e,n,r){return l(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}var Ln=0;function $n(t){var e=t.options;if(t.super){var n=$n(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.sealedOptions;for(var o in n)n[o]!==r[o]&&(e||(e={}),e[o]=n[o]);return e}(t);r&&S(t.extendOptions,r),(e=t.options=Nt(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function xn(t){this._init(t)}function An(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name;var a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=Nt(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)mn(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)gn(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,F.forEach((function(t){a[t]=n[t]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=S({},a.options),o[r]=a,a}}function On(t){return t&&(t.Ctor.options.name||t.tag)}function kn(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!f(t)&&t.test(e)}function Sn(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var s=On(a.componentOptions);s&&!e(s)&&En(n,i,r,o)}}}function En(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,_(n,e)}!function(t){t.prototype._init=function(t){var e=this;e._uid=Ln++,e._isVue=!0,t&&t._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(e,t):e.$options=Nt($n(e.constructor),t||{},e),e._renderProxy=e,e._self=e,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(e),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Ze(t,e)}(e),function(t){t._vnode=null,t._staticTrees=null;var e=t.$options,n=t.$vnode=e._parentVnode,o=n&&n.context;t.$slots=pe(e._renderChildren,o),t.$scopedSlots=r,t._c=function(e,n,r,o){return Be(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return Be(t,e,n,r,o,!0)};var i=n&&n.data;Ot(t,"$attrs",i&&i.attrs||r,null,!0),Ot(t,"$listeners",e._parentListeners||r,null,!0)}(e),en(e,"beforeCreate"),function(t){var e=fe(t.$options.inject,t);e&&($t(!1),Object.keys(e).forEach((function(n){Ot(t,n,e[n])})),$t(!0))}(e),yn(e),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(e),en(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(xn),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=kt,t.prototype.$delete=St,t.prototype.$watch=function(t,e,n){if(l(e))return Cn(this,t,e,n);(n=n||{}).user=!0;var r=new vn(this,t,e,n);if(n.immediate)try{e.call(this,r.value)}catch(t){Vt(t,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}(xn),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)r.$on(t[o],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)n.$off(t[r],e);return n}var i,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;for(var s=a.length;s--;)if((i=a[s])===e||i.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=e._events[t];if(n){n=n.length>1?k(n):n;for(var r=k(arguments,1),o='event handler for "'+t+'"',i=0,a=n.length;i<a;i++)Ht(n[i],e,r,e,o)}return e}}(xn),function(t){t.prototype._update=function(t,e){var n=this,r=n.$el,o=n._vnode,i=Qe(n);n._vnode=t,n.$el=o?n.__patch__(o,t):n.__patch__(n.$el,t,e,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){en(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||_(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),en(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(xn),function(t){Te(t.prototype),t.prototype.$nextTick=function(t){return ee(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,o=n._parentVnode;o&&(e.$scopedSlots=ve(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{He=e,t=r.call(e._renderProxy,e.$createElement)}catch(n){Vt(n,e,"render"),t=e._vnode}finally{He=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof ht||(t=yt()),t.parent=o,t}}(xn);var Tn=[String,RegExp,Array],jn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Tn,exclude:Tn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)En(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",(function(e){Sn(t,(function(t){return kn(e,t)}))})),this.$watch("exclude",(function(e){Sn(t,(function(t){return!kn(e,t)}))}))},render:function(){var t=this.$slots.default,e=We(t),n=e&&e.componentOptions;if(n){var r=On(n),o=this.include,i=this.exclude;if(o&&(!r||!kn(o,r))||i&&r&&kn(i,r))return e;var a=this.cache,s=this.keys,c=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[c]?(e.componentInstance=a[c].componentInstance,_(s,c),s.push(c)):(a[c]=e,s.push(c),this.max&&s.length>parseInt(this.max)&&En(a,s[0],s,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return U}};Object.defineProperty(t,"config",e),t.util={warn:ut,extend:S,mergeOptions:Nt,defineReactive:Ot},t.set=kt,t.delete=St,t.nextTick=ee,t.observable=function(t){return At(t),t},t.options=Object.create(null),F.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,S(t.options.components,jn),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=k(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=Nt(this.options,t),this}}(t),An(t),function(t){F.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&l(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}(t)}(xn),Object.defineProperty(xn.prototype,"$isServer",{get:ot}),Object.defineProperty(xn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(xn,"FunctionalRenderContext",{value:je}),xn.version="2.6.10";var In=m("style,class"),Mn=m("input,textarea,option,select,progress"),Pn=m("contenteditable,draggable,spellcheck"),Nn=m("events,caret,typing,plaintext-only"),Dn=function(t,e){return Vn(e)||"false"===e?"false":"contenteditable"===t&&Nn(e)?e:"true"},Fn=m("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Rn="http://www.w3.org/1999/xlink",Un=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Bn=function(t){return Un(t)?t.slice(6,t.length):""},Vn=function(t){return null==t||!1===t};function Hn(t){for(var e=t.data,n=t,r=t;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=zn(r.data,e));for(;i(n=n.parent);)n&&n.data&&(e=zn(e,n.data));return function(t,e){if(i(t)||i(e))return Gn(t,Wn(e));return""}(e.staticClass,e.class)}function zn(t,e){return{staticClass:Gn(t.staticClass,e.staticClass),class:i(t.class)?[t.class,e.class]:e.class}}function Gn(t,e){return t?e?t+" "+e:t:e||""}function Wn(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,o=t.length;r<o;r++)i(e=Wn(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):c(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var qn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Kn=m("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Xn=m("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Zn=function(t){return Kn(t)||Xn(t)};var Jn=Object.create(null);var Qn=m("text,number,password,search,email,tel,url");var Yn=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(t,e){return document.createElementNS(qn[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),tr={create:function(t,e){er(e)},update:function(t,e){t.data.ref!==e.data.ref&&(er(t,!0),er(e))},destroy:function(t){er(t,!0)}};function er(t,e){var n=t.data.ref;if(i(n)){var r=t.context,o=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?_(a[n],o):a[n]===o&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(o)<0&&a[n].push(o):a[n]=[o]:a[n]=o}}var nr=new ht("",{},[]),rr=["create","activate","update","remove","destroy"];function or(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&i(t.data)===i(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=i(n=t.data)&&i(n=n.attrs)&&n.type,o=i(n=e.data)&&i(n=n.attrs)&&n.type;return r===o||Qn(r)&&Qn(o)}(t,e)||a(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&o(e.asyncFactory.error))}function ir(t,e,n){var r,o,a={};for(r=e;r<=n;++r)i(o=t[r].key)&&(a[o]=r);return a}var ar={create:sr,update:sr,destroy:function(t){sr(t,nr)}};function sr(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,o,i=t===nr,a=e===nr,s=ur(t.data.directives,t.context),c=ur(e.data.directives,e.context),u=[],l=[];for(n in c)r=s[n],o=c[n],r?(o.oldValue=r.value,o.oldArg=r.arg,fr(o,"update",e,t),o.def&&o.def.componentUpdated&&l.push(o)):(fr(o,"bind",e,t),o.def&&o.def.inserted&&u.push(o));if(u.length){var f=function(){for(var n=0;n<u.length;n++)fr(u[n],"inserted",e,t)};i?se(e,"insert",f):f()}l.length&&se(e,"postpatch",(function(){for(var n=0;n<l.length;n++)fr(l[n],"componentUpdated",e,t)}));if(!i)for(n in s)c[n]||fr(s[n],"unbind",t,t,a)}(t,e)}var cr=Object.create(null);function ur(t,e){var n,r,o=Object.create(null);if(!t)return o;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=cr),o[lr(r)]=r,r.def=Dt(e.$options,"directives",r.name);return o}function lr(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function fr(t,e,n,r,o){var i=t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(r){Vt(r,n.context,"directive "+t.name+" "+e+" hook")}}var pr=[tr,ar];function dr(t,e){var n=e.componentOptions;if(!(i(n)&&!1===n.Ctor.options.inheritAttrs||o(t.data.attrs)&&o(e.data.attrs))){var r,a,s=e.elm,c=t.data.attrs||{},u=e.data.attrs||{};for(r in i(u.__ob__)&&(u=e.data.attrs=S({},u)),u)a=u[r],c[r]!==a&&vr(s,r,a);for(r in(Z||Q)&&u.value!==c.value&&vr(s,"value",u.value),c)o(u[r])&&(Un(r)?s.removeAttributeNS(Rn,Bn(r)):Pn(r)||s.removeAttribute(r))}}function vr(t,e,n){t.tagName.indexOf("-")>-1?hr(t,e,n):Fn(e)?Vn(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):Pn(e)?t.setAttribute(e,Dn(e,n)):Un(e)?Vn(n)?t.removeAttributeNS(Rn,Bn(e)):t.setAttributeNS(Rn,e,n):hr(t,e,n)}function hr(t,e,n){if(Vn(n))t.removeAttribute(e);else{if(Z&&!J&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var mr={create:dr,update:dr};function yr(t,e){var n=e.elm,r=e.data,a=t.data;if(!(o(r.staticClass)&&o(r.class)&&(o(a)||o(a.staticClass)&&o(a.class)))){var s=Hn(e),c=n._transitionClasses;i(c)&&(s=Gn(s,Wn(c))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var _r,gr={create:yr,update:yr},br="__r",wr="__c";function Cr(t,e,n){var r=_r;return function o(){var i=e.apply(null,arguments);null!==i&&xr(t,o,n,r)}}var Lr=qt&&!(tt&&Number(tt[1])<=53);function $r(t,e,n,r){if(Lr){var o=un,i=e;e=i._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=o||t.timeStamp<=0||t.target.ownerDocument!==document)return i.apply(this,arguments)}}_r.addEventListener(t,e,nt?{capture:n,passive:r}:n)}function xr(t,e,n,r){(r||_r).removeEventListener(t,e._wrapper||e,n)}function Ar(t,e){if(!o(t.data.on)||!o(e.data.on)){var n=e.data.on||{},r=t.data.on||{};_r=e.elm,function(t){if(i(t[br])){var e=Z?"change":"input";t[e]=[].concat(t[br],t[e]||[]),delete t[br]}i(t[wr])&&(t.change=[].concat(t[wr],t.change||[]),delete t[wr])}(n),ae(n,r,$r,xr,Cr,e.context),_r=void 0}}var Or,kr={create:Ar,update:Ar};function Sr(t,e){if(!o(t.data.domProps)||!o(e.data.domProps)){var n,r,a=e.elm,s=t.data.domProps||{},c=e.data.domProps||{};for(n in i(c.__ob__)&&(c=e.data.domProps=S({},c)),s)n in c||(a[n]="");for(n in c){if(r=c[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),r===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n&&"PROGRESS"!==a.tagName){a._value=r;var u=o(r)?"":String(r);Er(a,u)&&(a.value=u)}else if("innerHTML"===n&&Xn(a.tagName)&&o(a.innerHTML)){(Or=Or||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var l=Or.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;l.firstChild;)a.appendChild(l.firstChild)}else if(r!==s[n])try{a[n]=r}catch(t){}}}}function Er(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(i(r)){if(r.number)return h(n)!==h(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var Tr={create:Sr,update:Sr},jr=w((function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach((function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Ir(t){var e=Mr(t.style);return t.staticStyle?S(t.staticStyle,e):e}function Mr(t){return Array.isArray(t)?E(t):"string"==typeof t?jr(t):t}var Pr,Nr=/^--/,Dr=/\s*!important$/,Fr=function(t,e,n){if(Nr.test(e))t.style.setProperty(e,n);else if(Dr.test(n))t.style.setProperty(A(e),n.replace(Dr,""),"important");else{var r=Ur(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=n}},Rr=["Webkit","Moz","ms"],Ur=w((function(t){if(Pr=Pr||document.createElement("div").style,"filter"!==(t=L(t))&&t in Pr)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<Rr.length;n++){var r=Rr[n]+e;if(r in Pr)return r}}));function Br(t,e){var n=e.data,r=t.data;if(!(o(n.staticStyle)&&o(n.style)&&o(r.staticStyle)&&o(r.style))){var a,s,c=e.elm,u=r.staticStyle,l=r.normalizedStyle||r.style||{},f=u||l,p=Mr(e.data.style)||{};e.data.normalizedStyle=i(p.__ob__)?S({},p):p;var d=function(t,e){var n,r={};if(e)for(var o=t;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=Ir(o.data))&&S(r,n);(n=Ir(t.data))&&S(r,n);for(var i=t;i=i.parent;)i.data&&(n=Ir(i.data))&&S(r,n);return r}(e,!0);for(s in f)o(d[s])&&Fr(c,s,"");for(s in d)(a=d[s])!==f[s]&&Fr(c,s,null==a?"":a)}}var Vr={create:Br,update:Br},Hr=/\s+/;function zr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(Hr).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function Gr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(Hr).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function Wr(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&S(e,qr(t.name||"v")),S(e,t),e}return"string"==typeof t?qr(t):void 0}}var qr=w((function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}})),Kr=W&&!J,Xr="transition",Zr="animation",Jr="transition",Qr="transitionend",Yr="animation",to="animationend";Kr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Jr="WebkitTransition",Qr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Yr="WebkitAnimation",to="webkitAnimationEnd"));var eo=W?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function no(t){eo((function(){eo(t)}))}function ro(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),zr(t,e))}function oo(t,e){t._transitionClasses&&_(t._transitionClasses,e),Gr(t,e)}function io(t,e,n){var r=so(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var s=o===Xr?Qr:to,c=0,u=function(){t.removeEventListener(s,l),n()},l=function(e){e.target===t&&++c>=a&&u()};setTimeout((function(){c<a&&u()}),i+1),t.addEventListener(s,l)}var ao=/\b(transform|all)(,|$)/;function so(t,e){var n,r=window.getComputedStyle(t),o=(r[Jr+"Delay"]||"").split(", "),i=(r[Jr+"Duration"]||"").split(", "),a=co(o,i),s=(r[Yr+"Delay"]||"").split(", "),c=(r[Yr+"Duration"]||"").split(", "),u=co(s,c),l=0,f=0;return e===Xr?a>0&&(n=Xr,l=a,f=i.length):e===Zr?u>0&&(n=Zr,l=u,f=c.length):f=(n=(l=Math.max(a,u))>0?a>u?Xr:Zr:null)?n===Xr?i.length:c.length:0,{type:n,timeout:l,propCount:f,hasTransform:n===Xr&&ao.test(r[Jr+"Property"])}}function co(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map((function(e,n){return uo(e)+uo(t[n])})))}function uo(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function lo(t,e){var n=t.elm;i(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=Wr(t.data.transition);if(!o(r)&&!i(n._enterCb)&&1===n.nodeType){for(var a=r.css,s=r.type,u=r.enterClass,l=r.enterToClass,f=r.enterActiveClass,p=r.appearClass,d=r.appearToClass,v=r.appearActiveClass,m=r.beforeEnter,y=r.enter,_=r.afterEnter,g=r.enterCancelled,b=r.beforeAppear,w=r.appear,C=r.afterAppear,L=r.appearCancelled,$=r.duration,x=Je,A=Je.$vnode;A&&A.parent;)x=A.context,A=A.parent;var O=!x._isMounted||!t.isRootInsert;if(!O||w||""===w){var k=O&&p?p:u,S=O&&v?v:f,E=O&&d?d:l,T=O&&b||m,j=O&&"function"==typeof w?w:y,I=O&&C||_,M=O&&L||g,P=h(c($)?$.enter:$);0;var D=!1!==a&&!J,F=vo(j),R=n._enterCb=N((function(){D&&(oo(n,E),oo(n,S)),R.cancelled?(D&&oo(n,k),M&&M(n)):I&&I(n),n._enterCb=null}));t.data.show||se(t,"insert",(function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),j&&j(n,R)})),T&&T(n),D&&(ro(n,k),ro(n,S),no((function(){oo(n,k),R.cancelled||(ro(n,E),F||(po(P)?setTimeout(R,P):io(n,s,R)))}))),t.data.show&&(e&&e(),j&&j(n,R)),D||F||R()}}}function fo(t,e){var n=t.elm;i(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=Wr(t.data.transition);if(o(r)||1!==n.nodeType)return e();if(!i(n._leaveCb)){var a=r.css,s=r.type,u=r.leaveClass,l=r.leaveToClass,f=r.leaveActiveClass,p=r.beforeLeave,d=r.leave,v=r.afterLeave,m=r.leaveCancelled,y=r.delayLeave,_=r.duration,g=!1!==a&&!J,b=vo(d),w=h(c(_)?_.leave:_);0;var C=n._leaveCb=N((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),g&&(oo(n,l),oo(n,f)),C.cancelled?(g&&oo(n,u),m&&m(n)):(e(),v&&v(n)),n._leaveCb=null}));y?y(L):L()}function L(){C.cancelled||(!t.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),p&&p(n),g&&(ro(n,u),ro(n,f),no((function(){oo(n,u),C.cancelled||(ro(n,l),b||(po(w)?setTimeout(C,w):io(n,s,C)))}))),d&&d(n,C),g||b||C())}}function po(t){return"number"==typeof t&&!isNaN(t)}function vo(t){if(o(t))return!1;var e=t.fns;return i(e)?vo(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function ho(t,e){!0!==e.data.show&&lo(e)}var mo=function(t){var e,n,r={},c=t.modules,u=t.nodeOps;for(e=0;e<rr.length;++e)for(r[rr[e]]=[],n=0;n<c.length;++n)i(c[n][rr[e]])&&r[rr[e]].push(c[n][rr[e]]);function l(t){var e=u.parentNode(t);i(e)&&u.removeChild(e,t)}function f(t,e,n,o,s,c,l){if(i(t.elm)&&i(c)&&(t=c[l]=gt(t)),t.isRootInsert=!s,!function(t,e,n,o){var s=t.data;if(i(s)){var c=i(t.componentInstance)&&s.keepAlive;if(i(s=s.hook)&&i(s=s.init)&&s(t,!1),i(t.componentInstance))return p(t,e),d(n,t.elm,o),a(c)&&function(t,e,n,o){var a,s=t;for(;s.componentInstance;)if(s=s.componentInstance._vnode,i(a=s.data)&&i(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](nr,s);e.push(s);break}d(n,t.elm,o)}(t,e,n,o),!0}}(t,e,n,o)){var f=t.data,h=t.children,m=t.tag;i(m)?(t.elm=t.ns?u.createElementNS(t.ns,m):u.createElement(m,t),_(t),v(t,h,e),i(f)&&y(t,e),d(n,t.elm,o)):a(t.isComment)?(t.elm=u.createComment(t.text),d(n,t.elm,o)):(t.elm=u.createTextNode(t.text),d(n,t.elm,o))}}function p(t,e){i(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,h(t)?(y(t,e),_(t)):(er(t),e.push(t))}function d(t,e,n){i(t)&&(i(n)?u.parentNode(n)===t&&u.insertBefore(t,e,n):u.appendChild(t,e))}function v(t,e,n){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)f(e[r],n,t.elm,null,!0,e,r)}else s(t.text)&&u.appendChild(t.elm,u.createTextNode(String(t.text)))}function h(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return i(t.tag)}function y(t,n){for(var o=0;o<r.create.length;++o)r.create[o](nr,t);i(e=t.data.hook)&&(i(e.create)&&e.create(nr,t),i(e.insert)&&n.push(t))}function _(t){var e;if(i(e=t.fnScopeId))u.setStyleScope(t.elm,e);else for(var n=t;n;)i(e=n.context)&&i(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e),n=n.parent;i(e=Je)&&e!==t.context&&e!==t.fnContext&&i(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e)}function g(t,e,n,r,o,i){for(;r<=o;++r)f(n[r],i,t,e,!1,n,r)}function b(t){var e,n,o=t.data;if(i(o))for(i(e=o.hook)&&i(e=e.destroy)&&e(t),e=0;e<r.destroy.length;++e)r.destroy[e](t);if(i(e=t.children))for(n=0;n<t.children.length;++n)b(t.children[n])}function w(t,e,n,r){for(;n<=r;++n){var o=e[n];i(o)&&(i(o.tag)?(C(o),b(o)):l(o.elm))}}function C(t,e){if(i(e)||i(t.data)){var n,o=r.remove.length+1;for(i(e)?e.listeners+=o:e=function(t,e){function n(){0==--n.listeners&&l(t)}return n.listeners=e,n}(t.elm,o),i(n=t.componentInstance)&&i(n=n._vnode)&&i(n.data)&&C(n,e),n=0;n<r.remove.length;++n)r.remove[n](t,e);i(n=t.data.hook)&&i(n=n.remove)?n(t,e):e()}else l(t.elm)}function L(t,e,n,r){for(var o=n;o<r;o++){var a=e[o];if(i(a)&&or(t,a))return o}}function $(t,e,n,s,c,l){if(t!==e){i(e.elm)&&i(s)&&(e=s[c]=gt(e));var p=e.elm=t.elm;if(a(t.isAsyncPlaceholder))i(e.asyncFactory.resolved)?O(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(a(e.isStatic)&&a(t.isStatic)&&e.key===t.key&&(a(e.isCloned)||a(e.isOnce)))e.componentInstance=t.componentInstance;else{var d,v=e.data;i(v)&&i(d=v.hook)&&i(d=d.prepatch)&&d(t,e);var m=t.children,y=e.children;if(i(v)&&h(e)){for(d=0;d<r.update.length;++d)r.update[d](t,e);i(d=v.hook)&&i(d=d.update)&&d(t,e)}o(e.text)?i(m)&&i(y)?m!==y&&function(t,e,n,r,a){var s,c,l,p=0,d=0,v=e.length-1,h=e[0],m=e[v],y=n.length-1,_=n[0],b=n[y],C=!a;for(0;p<=v&&d<=y;)o(h)?h=e[++p]:o(m)?m=e[--v]:or(h,_)?($(h,_,r,n,d),h=e[++p],_=n[++d]):or(m,b)?($(m,b,r,n,y),m=e[--v],b=n[--y]):or(h,b)?($(h,b,r,n,y),C&&u.insertBefore(t,h.elm,u.nextSibling(m.elm)),h=e[++p],b=n[--y]):or(m,_)?($(m,_,r,n,d),C&&u.insertBefore(t,m.elm,h.elm),m=e[--v],_=n[++d]):(o(s)&&(s=ir(e,p,v)),o(c=i(_.key)?s[_.key]:L(_,e,p,v))?f(_,r,t,h.elm,!1,n,d):or(l=e[c],_)?($(l,_,r,n,d),e[c]=void 0,C&&u.insertBefore(t,l.elm,h.elm)):f(_,r,t,h.elm,!1,n,d),_=n[++d]);p>v?g(t,o(n[y+1])?null:n[y+1].elm,n,d,y,r):d>y&&w(0,e,p,v)}(p,m,y,n,l):i(y)?(i(t.text)&&u.setTextContent(p,""),g(p,null,y,0,y.length-1,n)):i(m)?w(0,m,0,m.length-1):i(t.text)&&u.setTextContent(p,""):t.text!==e.text&&u.setTextContent(p,e.text),i(v)&&i(d=v.hook)&&i(d=d.postpatch)&&d(t,e)}}}function x(t,e,n){if(a(n)&&i(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var A=m("attrs,class,staticClass,staticStyle,key");function O(t,e,n,r){var o,s=e.tag,c=e.data,u=e.children;if(r=r||c&&c.pre,e.elm=t,a(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(c)&&(i(o=c.hook)&&i(o=o.init)&&o(e,!0),i(o=e.componentInstance)))return p(e,n),!0;if(i(s)){if(i(u))if(t.hasChildNodes())if(i(o=c)&&i(o=o.domProps)&&i(o=o.innerHTML)){if(o!==t.innerHTML)return!1}else{for(var l=!0,f=t.firstChild,d=0;d<u.length;d++){if(!f||!O(f,u[d],n,r)){l=!1;break}f=f.nextSibling}if(!l||f)return!1}else v(e,u,n);if(i(c)){var h=!1;for(var m in c)if(!A(m)){h=!0,y(e,n);break}!h&&c.class&&re(c.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,s){if(!o(e)){var c,l=!1,p=[];if(o(t))l=!0,f(e,p);else{var d=i(t.nodeType);if(!d&&or(t,e))$(t,e,p,null,null,s);else{if(d){if(1===t.nodeType&&t.hasAttribute(D)&&(t.removeAttribute(D),n=!0),a(n)&&O(t,e,p))return x(e,p,!0),t;c=t,t=new ht(u.tagName(c).toLowerCase(),{},[],void 0,c)}var v=t.elm,m=u.parentNode(v);if(f(e,p,v._leaveCb?null:m,u.nextSibling(v)),i(e.parent))for(var y=e.parent,_=h(e);y;){for(var g=0;g<r.destroy.length;++g)r.destroy[g](y);if(y.elm=e.elm,_){for(var C=0;C<r.create.length;++C)r.create[C](nr,y);var L=y.data.hook.insert;if(L.merged)for(var A=1;A<L.fns.length;A++)L.fns[A]()}else er(y);y=y.parent}i(m)?w(0,[t],0,0):i(t.tag)&&b(t)}}return x(e,p,l),e.elm}i(t)&&b(t)}}({nodeOps:Yn,modules:[mr,gr,kr,Tr,Vr,W?{create:ho,activate:ho,remove:function(t,e){!0!==t.data.show?fo(t,e):e()}}:{}].concat(pr)});J&&document.addEventListener("selectionchange",(function(){var t=document.activeElement;t&&t.vmodel&&$o(t,"input")}));var yo={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?se(n,"postpatch",(function(){yo.componentUpdated(t,e,n)})):_o(t,e,n.context),t._vOptions=[].map.call(t.options,wo)):("textarea"===n.tag||Qn(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",Co),t.addEventListener("compositionend",Lo),t.addEventListener("change",Lo),J&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){_o(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,wo);if(o.some((function(t,e){return!M(t,r[e])})))(t.multiple?e.value.some((function(t){return bo(t,o)})):e.value!==e.oldValue&&bo(e.value,o))&&$o(t,"change")}}};function _o(t,e,n){go(t,e,n),(Z||Q)&&setTimeout((function(){go(t,e,n)}),0)}function go(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=t.options.length;s<c;s++)if(a=t.options[s],o)i=P(r,wo(a))>-1,a.selected!==i&&(a.selected=i);else if(M(wo(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));o||(t.selectedIndex=-1)}}function bo(t,e){return e.every((function(e){return!M(e,t)}))}function wo(t){return"_value"in t?t._value:t.value}function Co(t){t.target.composing=!0}function Lo(t){t.target.composing&&(t.target.composing=!1,$o(t.target,"input"))}function $o(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function xo(t){return!t.componentInstance||t.data&&t.data.transition?t:xo(t.componentInstance._vnode)}var Ao={model:yo,show:{bind:function(t,e,n){var r=e.value,o=(n=xo(n)).data&&n.data.transition,i=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&o?(n.data.show=!0,lo(n,(function(){t.style.display=i}))):t.style.display=r?i:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=xo(n)).data&&n.data.transition?(n.data.show=!0,r?lo(n,(function(){t.style.display=t.__vOriginalDisplay})):fo(n,(function(){t.style.display="none"}))):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}}},Oo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ko(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?ko(We(e.children)):t}function So(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[L(i)]=o[i];return e}function Eo(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var To=function(t){return t.tag||Ge(t)},jo=function(t){return"show"===t.name},Io={name:"transition",props:Oo,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(To)).length){0;var r=this.mode;0;var o=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return o;var i=ko(o);if(!i)return o;if(this._leaving)return Eo(t,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:s(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var c=(i.data||(i.data={})).transition=So(this),u=this._vnode,l=ko(u);if(i.data.directives&&i.data.directives.some(jo)&&(i.data.show=!0),l&&l.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(i,l)&&!Ge(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var f=l.data.transition=S({},c);if("out-in"===r)return this._leaving=!0,se(f,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Eo(t,o);if("in-out"===r){if(Ge(i))return u;var p,d=function(){p()};se(c,"afterEnter",d),se(c,"enterCancelled",d),se(f,"delayLeave",(function(t){p=t}))}}return o}}},Mo=S({tag:String,moveClass:String},Oo);function Po(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function No(t){t.data.newPos=t.elm.getBoundingClientRect()}function Do(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete Mo.mode;var Fo={Transition:Io,TransitionGroup:{props:Mo,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var o=Qe(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,o(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=So(this),s=0;s<o.length;s++){var c=o[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a;else;}if(r){for(var u=[],l=[],f=0;f<r.length;f++){var p=r[f];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?u.push(p):l.push(p)}this.kept=t(e,null,u),this.removed=l}return t(e,null,i)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(Po),t.forEach(No),t.forEach(Do),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var n=t.elm,r=n.style;ro(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Qr,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Qr,t),n._moveCb=null,oo(n,e))})}})))},methods:{hasMove:function(t,e){if(!Kr)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach((function(t){Gr(n,t)})),zr(n,e),n.style.display="none",this.$el.appendChild(n);var r=so(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};xn.config.mustUseProp=function(t,e,n){return"value"===n&&Mn(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},xn.config.isReservedTag=Zn,xn.config.isReservedAttr=In,xn.config.getTagNamespace=function(t){return Xn(t)?"svg":"math"===t?"math":void 0},xn.config.isUnknownElement=function(t){if(!W)return!0;if(Zn(t))return!1;if(t=t.toLowerCase(),null!=Jn[t])return Jn[t];var e=document.createElement(t);return t.indexOf("-")>-1?Jn[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Jn[t]=/HTMLUnknownElement/.test(e.toString())},S(xn.options.directives,Ao),S(xn.options.components,Fo),xn.prototype.__patch__=W?mo:T,xn.prototype.$mount=function(t,e){return function(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=yt),en(t,"beforeMount"),r=function(){t._update(t._render(),n)},new vn(t,r,T,{before:function(){t._isMounted&&!t._isDestroyed&&en(t,"beforeUpdate")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,en(t,"mounted")),t}(this,t=t&&W?function(t){if("string"==typeof t){var e=document.querySelector(t);return e||document.createElement("div")}return t}(t):void 0,e)},W&&setTimeout((function(){U.devtools&&it&&it.emit("init",xn)}),0),e.a=xn}).call(this,n(1),n(22).setImmediate)},function(t,e,n){t.exports=n(25)},function(t,e,n){var r=n(11);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(0).default)("69e77998",r,!1,{})},function(t,e,n){},function(t,e,n){"use strict";var r=n(2);n.n(r).a},function(t,e,n){},function(t,e,n){"use strict";var r=n(3);n.n(r).a},function(t,e,n){},function(t,e,n){"use strict";var r=n(4);n.n(r).a},function(t,e,n){},function(t,e,n){"use strict";var r=n(5);n.n(r).a},function(t,e,n){},function(t,e,n){"use strict";var r=n(6);n.n(r).a},function(t,e,n){},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(23),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,o,i,a,s,c=1,u={},l=!1,f=t.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(t);p=p&&p.setTimeout?p:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){v(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((i=new MessageChannel).port1.onmessage=function(t){v(t.data)},r=function(t){i.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(o=f.documentElement,r=function(t){var e=f.createElement("script");e.onreadystatechange=function(){v(t),e.onreadystatechange=null,o.removeChild(e),e=null},o.appendChild(e)}):r=function(t){setTimeout(v,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&v(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(a+e,"*")}),p.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var o={callback:t,args:e};return u[c]=o,r(c),c++},p.clearImmediate=d}function d(t){delete u[t]}function v(t){if(l)setTimeout(v,0,t);else{var e=u[t];if(e){l=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{d(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(1),n(24))},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var c,u=[],l=!1,f=-1;function p(){l&&c&&(l=!1,c.length?u=c.concat(u):f=-1,u.length&&d())}function d(){if(!l){var t=s(p);l=!0;for(var e=u.length;e;){for(c=u,u=[];++f<e;)c&&c[f].run();f=-1,e=u.length}c=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function v(t,e){this.fun=t,this.array=e}function h(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];u.push(new v(t,e)),1!==u.length||l||s(d)},v.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";n.r(e);var r=n(8),o=n(7),i=(n(10),function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"container"},[t.loaded?t._e():n("loader",{staticClass:"container__loader"}),t._v(" "),t.loaded?n("search"):t._e(),t._v(" "),t.loaded?n("section",{staticClass:"cards main__cards"},[n("h2",{staticClass:"visually-hidden"},[t._v("Characters cards")]),t._v(" "),t._l(t.$store.state.characters,(function(e){return n("card",{key:t.$store.state.characters.indexOf(e),attrs:{data:e,id:t.$store.state.characters.indexOf(e)}})}))],2):t._e()],1)});i._withStripped=!0;var a=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:" search main__search "},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.inputData,expression:"inputData"}],staticClass:"search__input",attrs:{type:" text",placeholder:"Search by name"},domProps:{value:t.inputData},on:{input:function(e){e.target.composing||(t.inputData=e.target.value)}}})])};a._withStripped=!0;var s={data:()=>({inputData:""})};n(12);function c(t,e,n,r,o,i,a,s){var c,u="function"==typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=n,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId="data-v-"+i),a?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},u._ssrRegister=c):o&&(c=s?function(){o.call(this,this.$root.$options.shadowRoot)}:o),c)if(u.functional){u._injectStyles=c;var l=u.render;u.render=function(t,e){return c.call(e),l(t,e)}}else{var f=u.beforeCreate;u.beforeCreate=f?[].concat(f,c):[c]}return{exports:t,options:u}}var u=c(s,a,[],!1,null,null,null);u.options.__file="src/components/search.vue";var l=u.exports,f=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("transition",{attrs:{name:"card",appear:""}},[n("section",{staticClass:"card cards__card",on:{click:t.openPopup}},[n("h3",{staticClass:"visually-hidden"},[t._v("Character info")]),t._v(" "),n("div",{staticClass:"card__avatar"},[n("span",{staticClass:"card__avatar-text"},[t._v(t._s(t.info.name[0]))])]),t._v(" "),n("p",{staticClass:"card__name"},[t._v(t._s(t.info.name))]),t._v(" "),n("p",{staticClass:"card__species"},[t._v(t._s(t.info.realSpecie))]),t._v(" "),t.popupActive?n("popup",{attrs:{id:t.id},on:{closePopup:t.closePopup}}):t._e()],1)])};f._withStripped=!0;var p=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("section",{staticClass:"popup card__popup"},[n("div",{staticClass:"popup__avatar avatar"},[n("span",{staticClass:"popup__avatar-text avatar-text"},[t._v(t._s(t.info.name[0]))])]),t._v(" "),n("p",{staticClass:"popup__name"},[t._v(t._s(t.info.name))]),t._v(" "),n("p",{staticClass:"popup__icon--birth popup__icon"},[t._v("Birth year")]),t._v(" "),n("p",{staticClass:"popup__birth"},[t._v(t._s(t.info.birth_year))]),t._v(" "),n("p",{staticClass:"popup__icon--species popup__icon"},[t._v("Spiecies")]),t._v(" "),n("p",{staticClass:"popup__species"},[t._v(t._s(t.info.realSpecie))]),t._v(" "),n("p",{staticClass:"popup__icon--gender popup__icon"},[t._v("Gender")]),t._v(" "),n("p",{staticClass:"popup__gender"},[t._v(t._s(t.info.gender))]),t._v(" "),n("p",{staticClass:"popup__icon--homeworld popup__icon"},[t._v("Homeworld")]),t._v(" "),n("p",{staticClass:"popup__homeworld"},[t._v("***")]),t._v(" "),n("p",{staticClass:"popup__icon--films popup__icon"},[t._v("Films")]),t._v(" "),t._m(0),t._v(" "),n("button",{staticClass:"close-button popup__close-button",attrs:{type:"button"},on:{click:function(e){return e.stopPropagation(),t.closePopup(e)}}})])};p._withStripped=!0;var d={data:()=>({}),computed:{info(){return this.$store.state.characters[this.id]}},props:{id:{type:Number,require:!0}},methods:{closePopup(t){this.$emit("closePopup")}}},v=(n(14),c(d,p,[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"films popup__films"},[e("ul")])}],!1,null,null,null));v.options.__file="src/components/popup.vue";var h={data:()=>({popupActive:!1}),components:{popup:v.exports},computed:{info(){return this.$store.state.characters[this.id]}},props:{id:{type:Number,require:!0}},methods:{closePopup(){this.popupActive=!1},openPopup(){this.popupActive=!0}},created(){fetch(this.info.species[0]).then(t=>{if(t.ok)return t.json();throw new Error("Bad response got specie")}).then(t=>(this.$set(this.info,"realSpecie",""),this.$store.dispatch("addSpecies",[this.info,t.name]),t.name)).catch(t=>console.error(t))}},m=(n(16),c(h,f,[],!1,null,null,null));m.options.__file="src/components/card.vue";var y=m.exports,_=function(){var t=this.$createElement,e=this._self._c||t;return e("transition",{attrs:{name:"falcon"}},[e("div",{staticClass:"falcon"},[e("span",{staticClass:"ship"},[e("svg",{attrs:{width:"60",height:"65",viewBox:"0 0 60 65",fill:"none",xmlns:"http://www.w3.org/2000/svg"}},[e("path",{attrs:{d:"M28.5504 5.26836L28.5504 24.8192L27.7833 24.8192L28.922 29.376L27.608 29.7036L26.387 24.8192L24.0894 24.8192L27.1373 29.8994L25.9756 30.5957L22.5101 24.8192L21.1693 24.8192L21.1693 23.465L27.1962 23.465L27.1962 21.9461L25.0002 21.9461L25.0002 20.5919L27.1962 20.5919L27.1962 19.0729L25.0002 19.0729L25.0002 17.7187L27.1962 17.7187L27.1962 16.1998L25.0002 16.1998L25.0002 14.8455L27.1962 14.8455L27.1962 13.3266L25.0002 13.3266L25.0002 11.9724L27.1962 11.9724L27.1962 10.4534L25.0002 10.4534L25.0002 9.09923L27.1962 9.09923L27.1962 6.62257L25.48 6.62257L19.363 24.0329L19.2539 24.1421L20.2116 25.0998L19.2539 26.0576L18.2961 25.0998L16.5153 26.8807L24.7497 31.8216L24.0535 32.9833L15.7481 28.0003L14.4619 31.1052L23.8576 33.454L23.5301 34.768L14.2124 32.4388L14.2124 34.9576L15.5676 34.9576L15.5676 36.3118L14.2124 36.3118L14.2124 38.8306L23.5301 36.5015L23.8576 37.8155L14.4619 40.1643L15.7481 43.2692L24.0535 38.2862L24.7497 39.4479L16.5153 44.3888L18.2961 46.1696L19.2539 45.2119L20.2116 46.1696L19.2539 47.1274L21.0347 48.9082L25.9756 40.6738L27.1373 41.37L22.1543 49.6754L25.2592 50.9616L27.608 41.5659L28.922 41.8934L26.5929 51.2111L29.1117 51.2111L29.1117 49.8559L30.4659 49.8559L30.4659 51.2111L32.9847 51.2111L30.6555 41.8934L31.9695 41.5659L34.3183 50.9616L37.4232 49.6754L32.4402 41.37L33.6019 40.6738L38.5428 48.9082L40.3237 47.1274L39.366 46.1696L40.3237 45.2119L41.2814 46.1696L43.0623 44.3888L34.8278 39.4479L35.5241 38.2862L43.8294 43.2692L45.1156 40.1643L35.7199 37.8155L36.0475 36.5015L45.3651 38.8306L45.3651 36.3118L44.0099 36.3118L44.0099 34.9576L45.3651 34.9576L45.3651 32.4388L36.0475 34.768L35.7199 33.454L45.1156 31.1052L43.8294 28.0003L35.5241 32.9833L34.8278 31.8216L43.0623 26.8807L41.2814 25.0998L40.3237 26.0575L39.3659 25.0998L40.3237 24.1421L40.2145 24.0329L34.0975 6.62257L32.3813 6.62257L32.3813 9.09923L34.5774 9.09923L34.5774 10.4534L32.3813 10.4534L32.3813 11.9724L34.5774 11.9724L34.5774 13.3266L32.3813 13.3266L32.3813 14.8455L34.5774 14.8455L34.5774 16.1998L32.3813 16.1998L32.3813 17.7187L34.5774 17.7187L34.5774 19.0729L32.3813 19.0729L32.3813 20.5919L34.5774 20.5919L34.5774 21.9461L32.3813 21.9461L32.3813 23.465L38.4082 23.465L38.4082 24.8192L37.0674 24.8192L33.6019 30.5957L32.4402 29.8994L35.4881 24.8192L33.1906 24.8192L31.9695 29.7036L30.6555 29.376L31.7942 24.8192L31.0271 24.8192L31.0271 5.26836L35.0572 5.26836L41.3906 23.2936L44.7287 26.6317L46.7188 31.4366L46.7188 39.8329L44.7287 44.6378L38.7918 50.5747L33.9869 52.5648L25.5906 52.5648L20.7857 50.5747L14.8488 44.6378L12.8587 39.8329L12.8587 31.4366L14.8488 26.6317L18.187 23.2936L24.5204 5.26836L28.5504 5.26836Z",fill:"white"}}),this._v(" "),e("path",{attrs:{d:"M33.1408 32.2827C34.9892 34.1311 34.9892 37.1383 33.1408 38.9867C31.2924 40.8351 28.2852 40.8351 26.4368 38.9867C24.5884 37.1383 24.5884 34.1311 26.4368 32.2827C28.2852 30.4343 31.2924 30.4343 33.1408 32.2827ZM27.3945 38.029C28.7147 39.3492 30.8629 39.3492 32.1831 38.029C33.5033 36.7088 33.5033 34.5606 32.1831 33.2404C30.8629 31.9202 28.7147 31.9202 27.3945 33.2404C26.0743 34.5606 26.0743 36.7088 27.3945 38.029Z",fill:"white"}}),this._v(" "),e("path",{attrs:{d:"M30.4663 19.2089L30.4663 20.311L29.1119 20.311L29.1119 19.2089L30.4663 19.2089Z",fill:"white"}}),this._v(" "),e("rect",{staticClass:"rect-1",attrs:{width:"13.6257",height:"2",transform:"matrix(-1 3.17865e-08 3.17865e-08 1 36.605 55.1332)",fill:"#6EF6FF"}}),this._v(" "),e("rect",{staticClass:"rect-2",attrs:{opacity:"0.4",width:"11.1925",height:"2",transform:"matrix(-1 3.17865e-08 3.17865e-08 1 35.6316 59.0262)",fill:"#6EF6FF"}}),this._v(" "),e("rect",{staticClass:"rect-3",attrs:{opacity:"0.1",width:"8.75936",height:"2",transform:"matrix(-1 3.17865e-08 3.17865e-08 1 34.1719 62.9193)",fill:"#6EF6FF"}})])])])])};_._withStripped=!0;var g={data:()=>({})},b=(n(18),c(g,_,[],!1,null,null,null));b.options.__file="src/components/loader.vue";var w={data:()=>({loading:!0,loaded:!1}),components:{search:l,card:y,loader:b.exports},created(){let t;fetch("https://swapi.co/api/people/").then(t=>{if(t.ok)return t.json();throw new Error("Bad response")}).then(t=>{this.$set(this.$store.state,"characters",t.results),this.$set(this.$store.state,"next",t.next),this.$set(this.$store.state,"count",t.count),this.loading=!1}).catch(t=>console.error(t)),t=setInterval(()=>{this.loading||(this.loaded=!0,clearInterval(t))},2e3)}},C=(n(20),c(w,i,[],!1,null,null,null));C.options.__file="src/components/App.vue";var L=C.exports;r.a.use(o.a);const $=new o.a.Store({state:{showedCounter:0},mutations:{showedCounterIncrement(t){t.showedCounter++},addCharacter(t,e){t.characters.push(e)},addSpecies(t,e){e[0].realSpecie=e[1]}},actions:{addCharacter({commit:t,state:e},n){t("addCharacter",e,n)},addSpecies({commit:t,state:e},n){t("addSpecies",n)}}});new r.a({el:"#app",store:$,render:t=>t(L)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc2VhcmNoLnZ1ZT9mZTczIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3BvcHVwLnZ1ZT82ZTAyIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NhcmQudnVlP2M3OTgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbG9hZGVyLnZ1ZT82MTVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0FwcC52dWU/NDZmNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVleC9kaXN0L3Z1ZXguZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUucnVudGltZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Njc3Mvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zZWFyY2gudnVlPzFmYTMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcG9wdXAudnVlPzk0NTgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY2FyZC52dWU/N2YxNiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9sb2FkZXIudnVlP2Y4YzciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQXBwLnZ1ZT8zNmY0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQXBwLnZ1ZT84OGJmIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3NlYXJjaC52dWU/MmQyYiIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvc2VhcmNoLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zZWFyY2gudnVlP2Y1MmQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zZWFyY2gudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NhcmQudnVlPzMxY2QiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcG9wdXAudnVlPzc1N2UiLCJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL3BvcHVwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wb3B1cC52dWU/ODYzZCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wb3B1cC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY2FyZC52dWU/MWJmMyIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvY2FyZC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY2FyZC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbG9hZGVyLnZ1ZT84YmE2Iiwid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9sb2FkZXIudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2xvYWRlci52dWU/ZTNjOSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9sb2FkZXIudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0FwcC52dWU/ZTUyOSIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvQXBwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHAudnVlIiwid2VicGFjazovLy8uL3NyYy9tYWluLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibGlzdFRvU3R5bGVzIiwicGFyZW50SWQiLCJsaXN0Iiwic3R5bGVzIiwibmV3U3R5bGVzIiwibGVuZ3RoIiwiaXRlbSIsImlkIiwicGFydCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicGFydHMiLCJwdXNoIiwiaGFzRG9jdW1lbnQiLCJkb2N1bWVudCIsIkRFQlVHIiwiRXJyb3IiLCJzdHlsZXNJbkRvbSIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNpbmdsZXRvbkVsZW1lbnQiLCJzaW5nbGV0b25Db3VudGVyIiwiaXNQcm9kdWN0aW9uIiwibm9vcCIsIm9wdGlvbnMiLCJzc3JJZEtleSIsImlzT2xkSUUiLCJuYXZpZ2F0b3IiLCJ0ZXN0IiwidXNlckFnZW50IiwidG9Mb3dlckNhc2UiLCJhZGRTdHlsZXNDbGllbnQiLCJfaXNQcm9kdWN0aW9uIiwiX29wdGlvbnMiLCJhZGRTdHlsZXNUb0RvbSIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJkb21TdHlsZSIsInJlZnMiLCJqIiwiYWRkU3R5bGUiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJzdHlsZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsImFwcGVuZENoaWxkIiwib2JqIiwidXBkYXRlIiwicmVtb3ZlIiwicXVlcnlTZWxlY3RvciIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiYXBwbHlUb1RhZyIsIm5ld09iaiIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwiaW5kZXgiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJqb2luIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwiaW5zZXJ0QmVmb3JlIiwic2V0QXR0cmlidXRlIiwic3NySWQiLCJzb3VyY2VzIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImZpcnN0Q2hpbGQiLCJnIiwidGhpcyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsImNvbnRlbnQiLCJsb2NhbHMiLCJhZGQiLCJkZWZhdWx0IiwiZGV2dG9vbEhvb2siLCJnbG9iYWwiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZm9yRWFjaFZhbHVlIiwiZm4iLCJrZXlzIiwiZm9yRWFjaCIsIk1vZHVsZSIsInJhd01vZHVsZSIsInJ1bnRpbWUiLCJfY2hpbGRyZW4iLCJfcmF3TW9kdWxlIiwicmF3U3RhdGUiLCJzdGF0ZSIsInByb3RvdHlwZUFjY2Vzc29ycyIsIm5hbWVzcGFjZWQiLCJjb25maWd1cmFibGUiLCJhZGRDaGlsZCIsImdldENoaWxkIiwiYWN0aW9ucyIsIm11dGF0aW9ucyIsImdldHRlcnMiLCJmb3JFYWNoQ2hpbGQiLCJmb3JFYWNoR2V0dGVyIiwiZm9yRWFjaEFjdGlvbiIsImZvckVhY2hNdXRhdGlvbiIsImRlZmluZVByb3BlcnRpZXMiLCJNb2R1bGVDb2xsZWN0aW9uIiwicmF3Um9vdE1vZHVsZSIsInJlZ2lzdGVyIiwicGF0aCIsInJlZHVjZSIsInJvb3QiLCJnZXROYW1lc3BhY2UiLCJuYW1lc3BhY2UiLCJ0YXJnZXRNb2R1bGUiLCJuZXdNb2R1bGUiLCJwcm9jZXNzIiwiY29uY2F0IiwidGhpcyQxIiwic2xpY2UiLCJyYXdDaGlsZE1vZHVsZSIsInVucmVnaXN0ZXIiLCJwYXJlbnQiLCJWdWUiLCJTdG9yZSIsImluc3RhbGwiLCJwbHVnaW5zIiwic3RyaWN0IiwiX2NvbW1pdHRpbmciLCJfYWN0aW9ucyIsIl9hY3Rpb25TdWJzY3JpYmVycyIsIl9tdXRhdGlvbnMiLCJfd3JhcHBlZEdldHRlcnMiLCJfbW9kdWxlcyIsIl9tb2R1bGVzTmFtZXNwYWNlTWFwIiwiX3N1YnNjcmliZXJzIiwiX3dhdGNoZXJWTSIsInN0b3JlIiwiZGlzcGF0Y2giLCJjb21taXQiLCJwYXlsb2FkIiwiaW5zdGFsbE1vZHVsZSIsInJlc2V0U3RvcmVWTSIsInBsdWdpbiIsInVuZGVmaW5lZCIsImRldnRvb2xzIiwiY29uZmlnIiwiX2RldnRvb2xIb29rIiwiZW1pdCIsIm9uIiwidGFyZ2V0U3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJzdWJzY3JpYmUiLCJtdXRhdGlvbiIsImRldnRvb2xQbHVnaW4iLCJwcm90b3R5cGVBY2Nlc3NvcnMkMSIsImdlbmVyaWNTdWJzY3JpYmUiLCJzdWJzIiwiaW5kZXhPZiIsInNwbGljZSIsInJlc2V0U3RvcmUiLCJob3QiLCJvbGRWbSIsIl92bSIsIndyYXBwZWRHZXR0ZXJzIiwiY29tcHV0ZWQiLCJhcmciLCJwYXJ0aWFsIiwic2lsZW50IiwiZGF0YSIsIiQkc3RhdGUiLCIkd2F0Y2giLCJfZGF0YSIsImRlZXAiLCJzeW5jIiwiZW5hYmxlU3RyaWN0TW9kZSIsIl93aXRoQ29tbWl0IiwibmV4dFRpY2siLCIkZGVzdHJveSIsInJvb3RTdGF0ZSIsImlzUm9vdCIsInBhcmVudFN0YXRlIiwiZ2V0TmVzdGVkU3RhdGUiLCJtb2R1bGVOYW1lIiwic2V0IiwibG9jYWwiLCJjb250ZXh0Iiwibm9OYW1lc3BhY2UiLCJfdHlwZSIsIl9wYXlsb2FkIiwiYXJncyIsInVuaWZ5T2JqZWN0U3R5bGUiLCJnZXR0ZXJzUHJveHkiLCJzcGxpdFBvcyIsImxvY2FsVHlwZSIsIm1ha2VMb2NhbEdldHRlcnMiLCJtYWtlTG9jYWxDb250ZXh0IiwiaGFuZGxlciIsInJlZ2lzdGVyTXV0YXRpb24iLCJhY3Rpb24iLCJjYiIsInZhbCIsInJlcyIsInJvb3RHZXR0ZXJzIiwidGhlbiIsIlByb21pc2UiLCJyZXNvbHZlIiwiY2F0Y2giLCJlcnIiLCJyZWdpc3RlckFjdGlvbiIsInJhd0dldHRlciIsInJlZ2lzdGVyR2V0dGVyIiwiY2hpbGQiLCJfVnVlIiwiTnVtYmVyIiwidmVyc2lvbiIsInNwbGl0IiwibWl4aW4iLCJiZWZvcmVDcmVhdGUiLCJ2dWV4SW5pdCIsIl9pbml0IiwiaW5pdCIsIiRvcHRpb25zIiwiJHN0b3JlIiwiYXBwbHlNaXhpbiIsInYiLCJyZWYiLCJlbnRyeSIsInN1YiIsImJlZm9yZSIsImFsbCIsIm1hcCIsImFmdGVyIiwic3Vic2NyaWJlQWN0aW9uIiwid2F0Y2giLCJyZWdpc3Rlck1vZHVsZSIsInByZXNlcnZlU3RhdGUiLCJ1bnJlZ2lzdGVyTW9kdWxlIiwiZGVsZXRlIiwiaG90VXBkYXRlIiwibmV3T3B0aW9ucyIsImNvbW1pdHRpbmciLCJtYXBTdGF0ZSIsIm5vcm1hbGl6ZU5hbWVzcGFjZSIsInN0YXRlcyIsIm5vcm1hbGl6ZU1hcCIsImdldE1vZHVsZUJ5TmFtZXNwYWNlIiwidnVleCIsIm1hcE11dGF0aW9ucyIsImxlbiIsImFyZ3VtZW50cyIsImFwcGx5IiwibWFwR2V0dGVycyIsIm1hcEFjdGlvbnMiLCJBcnJheSIsImlzQXJyYXkiLCJjaGFyQXQiLCJoZWxwZXIiLCJpbmRleF9lc20iLCJjcmVhdGVOYW1lc3BhY2VkSGVscGVycyIsImVtcHR5T2JqZWN0IiwiZnJlZXplIiwiaXNVbmRlZiIsImlzRGVmIiwiaXNUcnVlIiwiaXNQcmltaXRpdmUiLCJpc09iamVjdCIsIl90b1N0cmluZyIsInRvU3RyaW5nIiwiaXNQbGFpbk9iamVjdCIsImlzUmVnRXhwIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJwYXJzZUZsb2F0IiwiU3RyaW5nIiwiTWF0aCIsImZsb29yIiwiaXNGaW5pdGUiLCJpc1Byb21pc2UiLCJ0b051bWJlciIsImlzTmFOIiwibWFrZU1hcCIsInN0ciIsImV4cGVjdHNMb3dlckNhc2UiLCJpc1Jlc2VydmVkQXR0cmlidXRlIiwiYXJyIiwiaGFzT3duIiwiY2FjaGVkIiwiY2FjaGUiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJyZXBsYWNlIiwiXyIsInRvVXBwZXJDYXNlIiwiY2FwaXRhbGl6ZSIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwiY3R4IiwiYm91bmRGbiIsImEiLCJfbGVuZ3RoIiwidG9BcnJheSIsInN0YXJ0IiwicmV0IiwiZXh0ZW5kIiwidG8iLCJfZnJvbSIsInRvT2JqZWN0IiwiYiIsIm5vIiwiaWRlbnRpdHkiLCJsb29zZUVxdWFsIiwiaXNPYmplY3RBIiwiaXNPYmplY3RCIiwiaXNBcnJheUEiLCJpc0FycmF5QiIsImV2ZXJ5IiwiRGF0ZSIsImdldFRpbWUiLCJrZXlzQSIsImtleXNCIiwibG9vc2VJbmRleE9mIiwib25jZSIsImNhbGxlZCIsIlNTUl9BVFRSIiwiQVNTRVRfVFlQRVMiLCJMSUZFQ1lDTEVfSE9PS1MiLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJwcm9kdWN0aW9uVGlwIiwicGVyZm9ybWFuY2UiLCJlcnJvckhhbmRsZXIiLCJ3YXJuSGFuZGxlciIsImlnbm9yZWRFbGVtZW50cyIsImtleUNvZGVzIiwiaXNSZXNlcnZlZFRhZyIsImlzUmVzZXJ2ZWRBdHRyIiwiaXNVbmtub3duRWxlbWVudCIsImdldFRhZ05hbWVzcGFjZSIsInBhcnNlUGxhdGZvcm1UYWdOYW1lIiwibXVzdFVzZVByb3AiLCJhc3luYyIsIl9saWZlY3ljbGVIb29rcyIsInVuaWNvZGVSZWdFeHAiLCJkZWYiLCJ3cml0YWJsZSIsImJhaWxSRSIsIlJlZ0V4cCIsInNvdXJjZSIsIl9pc1NlcnZlciIsImhhc1Byb3RvIiwiaW5Ccm93c2VyIiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsInBsYXRmb3JtIiwid2VleFBsYXRmb3JtIiwiVUEiLCJpc0lFIiwiaXNJRTkiLCJpc0VkZ2UiLCJpc0lPUyIsImlzRkYiLCJtYXRjaCIsIm5hdGl2ZVdhdGNoIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJpc1NlcnZlclJlbmRlcmluZyIsImVudiIsIlZVRV9FTlYiLCJpc05hdGl2ZSIsIkN0b3IiLCJfU2V0IiwiaGFzU3ltYm9sIiwiUmVmbGVjdCIsIm93bktleXMiLCJTZXQiLCJoYXMiLCJjbGVhciIsIndhcm4iLCJ1aWQiLCJEZXAiLCJhZGRTdWIiLCJyZW1vdmVTdWIiLCJkZXBlbmQiLCJ0YXJnZXQiLCJhZGREZXAiLCJub3RpZnkiLCJ0YXJnZXRTdGFjayIsInB1c2hUYXJnZXQiLCJwb3BUYXJnZXQiLCJwb3AiLCJWTm9kZSIsInRhZyIsImNoaWxkcmVuIiwidGV4dCIsImVsbSIsImNvbXBvbmVudE9wdGlvbnMiLCJhc3luY0ZhY3RvcnkiLCJmbkNvbnRleHQiLCJmbk9wdGlvbnMiLCJmblNjb3BlSWQiLCJjb21wb25lbnRJbnN0YW5jZSIsInJhdyIsImlzU3RhdGljIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJjcmVhdGVFbXB0eVZOb2RlIiwibm9kZSIsImNyZWF0ZVRleHRWTm9kZSIsImNsb25lVk5vZGUiLCJ2bm9kZSIsImNsb25lZCIsImFycmF5UHJvdG8iLCJhcnJheU1ldGhvZHMiLCJtZXRob2QiLCJvcmlnaW5hbCIsImluc2VydGVkIiwicmVzdWx0Iiwib2IiLCJfX29iX18iLCJvYnNlcnZlQXJyYXkiLCJkZXAiLCJhcnJheUtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwic2hvdWxkT2JzZXJ2ZSIsInRvZ2dsZU9ic2VydmluZyIsIk9ic2VydmVyIiwidm1Db3VudCIsInNyYyIsIl9fcHJvdG9fXyIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50Iiwid2FsayIsIm9ic2VydmUiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiX2lzVnVlIiwiZGVmaW5lUmVhY3RpdmUkJDEiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwic2V0dGVyIiwiY2hpbGRPYiIsImRlcGVuZEFycmF5IiwibmV3VmFsIiwibWF4IiwiZGVsIiwiaXRlbXMiLCJzdHJhdHMiLCJtZXJnZURhdGEiLCJmcm9tIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwidm0iLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsIm1lcmdlSG9vayIsImhvb2tzIiwiZGVkdXBlSG9va3MiLCJtZXJnZUFzc2V0cyIsImhvb2siLCJrZXkkMSIsInByb3BzIiwibWV0aG9kcyIsImluamVjdCIsInByb3ZpZGUiLCJkZWZhdWx0U3RyYXQiLCJtZXJnZU9wdGlvbnMiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVJbmplY3QiLCJkaXJzIiwiZGlyZWN0aXZlcyIsImRlZiQkMSIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMiLCJfYmFzZSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJwcm9wc0RhdGEiLCJwcm9wIiwiYWJzZW50IiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4Iiwic3RyaW5nSW5kZXgiLCJfcHJvcHMiLCJnZXRUeXBlIiwiZ2V0UHJvcERlZmF1bHRWYWx1ZSIsInByZXZTaG91bGRPYnNlcnZlIiwiaXNTYW1lVHlwZSIsImV4cGVjdGVkVHlwZXMiLCJoYW5kbGVFcnJvciIsImluZm8iLCJjdXIiLCIkcGFyZW50IiwiZXJyb3JDYXB0dXJlZCIsImdsb2JhbEhhbmRsZUVycm9yIiwiaW52b2tlV2l0aEVycm9ySGFuZGxpbmciLCJfaGFuZGxlZCIsImxvZ0Vycm9yIiwiY29uc29sZSIsImVycm9yIiwidGltZXJGdW5jIiwiaXNVc2luZ01pY3JvVGFzayIsImNhbGxiYWNrcyIsInBlbmRpbmciLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsInNldFRpbWVvdXQiLCJNdXRhdGlvbk9ic2VydmVyIiwic2V0SW1tZWRpYXRlIiwiY291bnRlciIsIm9ic2VydmVyIiwidGV4dE5vZGUiLCJjaGFyYWN0ZXJEYXRhIiwiX3Jlc29sdmUiLCJzZWVuT2JqZWN0cyIsInRyYXZlcnNlIiwiX3RyYXZlcnNlIiwic2VlbiIsImlzQSIsImlzRnJvemVuIiwiZGVwSWQiLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJvbmNlJCQxIiwiY2FwdHVyZSIsImNyZWF0ZUZuSW52b2tlciIsImZucyIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9sZE9uIiwicmVtb3ZlJCQxIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJldmVudCIsInBhcmFtcyIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImNoZWNrUHJvcCIsImhhc2giLCJhbHRLZXkiLCJwcmVzZXJ2ZSIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsIm5lc3RlZEluZGV4IiwibGFzdEluZGV4IiwibGFzdCIsImlzVGV4dE5vZGUiLCJzaGlmdCIsIl9pc1ZMaXN0IiwicmVzb2x2ZUluamVjdCIsInByb3ZpZGVLZXkiLCJfcHJvdmlkZWQiLCJwcm92aWRlRGVmYXVsdCIsInJlc29sdmVTbG90cyIsInNsb3RzIiwiYXR0cnMiLCJzbG90IiwibmFtZSQxIiwiaXNXaGl0ZXNwYWNlIiwibm9ybWFsaXplU2NvcGVkU2xvdHMiLCJub3JtYWxTbG90cyIsInByZXZTbG90cyIsImhhc05vcm1hbFNsb3RzIiwiaXNTdGFibGUiLCIkc3RhYmxlIiwiJGtleSIsIl9ub3JtYWxpemVkIiwiJGhhc05vcm1hbCIsIm5vcm1hbGl6ZVNjb3BlZFNsb3QiLCJrZXkkMiIsInByb3h5Tm9ybWFsU2xvdCIsInByb3h5IiwicmVuZGVyTGlzdCIsInJlbmRlciIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJiaW5kT2JqZWN0Iiwibm9kZXMiLCJzY29wZWRTbG90Rm4iLCIkc2NvcGVkU2xvdHMiLCIkc2xvdHMiLCIkY3JlYXRlRWxlbWVudCIsInJlc29sdmVGaWx0ZXIiLCJpc0tleU5vdE1hdGNoIiwiZXhwZWN0IiwiYWN0dWFsIiwiY2hlY2tLZXlDb2RlcyIsImV2ZW50S2V5Q29kZSIsImJ1aWx0SW5LZXlDb2RlIiwiZXZlbnRLZXlOYW1lIiwiYnVpbHRJbktleU5hbWUiLCJtYXBwZWRLZXlDb2RlIiwiYmluZE9iamVjdFByb3BzIiwiYXNQcm9wIiwiaXNTeW5jIiwibG9vcCIsImRvbVByb3BzIiwiY2FtZWxpemVkS2V5IiwiaHlwaGVuYXRlZEtleSIsIiRldmVudCIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJfc3RhdGljVHJlZXMiLCJ0cmVlIiwibWFya1N0YXRpYyIsInN0YXRpY1JlbmRlckZucyIsIl9yZW5kZXJQcm94eSIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwiZXhpc3RpbmciLCJvdXJzIiwicmVzb2x2ZVNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY0tleXMiLCJjb250ZW50SGFzaEtleSIsImJpbmREeW5hbWljS2V5cyIsImJhc2VPYmoiLCJ2YWx1ZXMiLCJwcmVwZW5kTW9kaWZpZXIiLCJzeW1ib2wiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX24iLCJfcyIsIl9sIiwiX3QiLCJfcSIsIl9pIiwiX20iLCJfZiIsIl9rIiwiX2IiLCJfdiIsIl9lIiwiX3UiLCJfZyIsIl9kIiwiX3AiLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsImNvbnRleHRWbSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJfY29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImxpc3RlbmVycyIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsIl9zY29wZUlkIiwiX2MiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0IiwicmVuZGVyQ29udGV4dCIsImNsb25lIiwibWVyZ2VQcm9wcyIsImNvbXBvbmVudFZOb2RlSG9va3MiLCJoeWRyYXRpbmciLCJfaXNEZXN0cm95ZWQiLCJrZWVwQWxpdmUiLCJtb3VudGVkTm9kZSIsInByZXBhdGNoIiwiX2lzQ29tcG9uZW50IiwiX3BhcmVudFZub2RlIiwiaW5saW5lVGVtcGxhdGUiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiYWN0aXZlSW5zdGFuY2UiLCIkbW91bnQiLCJvbGRWbm9kZSIsInBhcmVudFZub2RlIiwicmVuZGVyQ2hpbGRyZW4iLCJuZXdTY29wZWRTbG90cyIsIm9sZFNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY1Njb3BlZFNsb3QiLCJuZWVkc0ZvcmNlVXBkYXRlIiwiX3JlbmRlckNoaWxkcmVuIiwiJHZub2RlIiwiX3Zub2RlIiwiJGF0dHJzIiwiJGxpc3RlbmVycyIsInByb3BLZXlzIiwiX3Byb3BLZXlzIiwib2xkTGlzdGVuZXJzIiwiX3BhcmVudExpc3RlbmVycyIsInVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyIsIiRmb3JjZVVwZGF0ZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiaW5zZXJ0IiwiX2lzTW91bnRlZCIsImNhbGxIb29rIiwiX2luYWN0aXZlIiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRpcmVjdCIsIl9kaXJlY3RJbmFjdGl2ZSIsImlzSW5JbmFjdGl2ZVRyZWUiLCIkY2hpbGRyZW4iLCJob29rc1RvTWVyZ2UiLCJjcmVhdGVDb21wb25lbnQiLCJiYXNlQ3RvciIsImNpZCIsImZhY3RvcnkiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsIm93bmVyIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwib3duZXJzIiwibG9hZGluZyIsImxvYWRpbmdDb21wIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCJjbGVhclRpbWVvdXQiLCJlbnN1cmVDdG9yIiwicmVqZWN0IiwicmVhc29uIiwiY29tcG9uZW50IiwiZGVsYXkiLCJ0aW1lb3V0IiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJtb2RlbCIsImNhbGxiYWNrIiwidHJhbnNmb3JtTW9kZWwiLCJleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIiwiZnVuY3Rpb25hbCIsInZub2RlcyIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJuYXRpdmVPbiIsImFic3RyYWN0IiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImluc3RhbGxDb21wb25lbnRIb29rcyIsImYxIiwiZjIiLCJTSU1QTEVfTk9STUFMSVpFIiwiQUxXQVlTX05PUk1BTElaRSIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwiaXMiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsInByZSIsImFwcGx5TlMiLCJmb3JjZSIsInN0eWxlIiwiY2xhc3MiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsIl9jcmVhdGVFbGVtZW50IiwiY29tcCIsImJhc2UiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwicmVtb3ZlJDEiLCIkb2ZmIiwiX3RhcmdldCIsIm9uY2VIYW5kbGVyIiwic2V0QWN0aXZlSW5zdGFuY2UiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJoYW5kbGVycyIsIl9oYXNIb29rRXZlbnQiLCIkZW1pdCIsInF1ZXVlIiwid2FpdGluZyIsImZsdXNoaW5nIiwiY3VycmVudEZsdXNoVGltZXN0YW1wIiwiZ2V0Tm93Iiwibm93IiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsInNvcnQiLCJydW4iLCJhY3RpdmF0ZWRRdWV1ZSIsInVwZGF0ZWRRdWV1ZSIsImNhbGxBY3RpdmF0ZWRIb29rcyIsIl93YXRjaGVyIiwiY2FsbFVwZGF0ZWRIb29rcyIsInVpZCQyIiwiV2F0Y2hlciIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJfd2F0Y2hlcnMiLCJ1c2VyIiwibGF6eSIsImFjdGl2ZSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJleHByZXNzaW9uIiwic2VnbWVudHMiLCJwYXJzZVBhdGgiLCJjbGVhbnVwRGVwcyIsInRtcCIsInF1ZXVlV2F0Y2hlciIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJ0ZWFyZG93biIsIl9pc0JlaW5nRGVzdHJveWVkIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwiaW5pdFN0YXRlIiwicHJvcHNPcHRpb25zIiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJnZXREYXRhIiwiY2hhckNvZGVBdCIsImluaXREYXRhIiwid2F0Y2hlcnMiLCJfY29tcHV0ZWRXYXRjaGVycyIsImlzU1NSIiwidXNlckRlZiIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJkZWZpbmVDb21wdXRlZCIsImluaXRDb21wdXRlZCIsImNyZWF0ZVdhdGNoZXIiLCJpbml0V2F0Y2giLCJzaG91bGRDYWNoZSIsImNyZWF0ZUNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlR2V0dGVySW52b2tlciIsInVpZCQzIiwic3VwZXIiLCJzdXBlck9wdGlvbnMiLCJtb2RpZmllZE9wdGlvbnMiLCJtb2RpZmllZCIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJyZXNvbHZlTW9kaWZpZWRPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsImNvbXBvbmVudHMiLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsImNvbnN0cnVjdG9yIiwiQ29tcCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJ1c2UiLCJnZXRDb21wb25lbnROYW1lIiwibWF0Y2hlcyIsInBhdHRlcm4iLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY3VycmVudCIsImNhY2hlZCQkMSIsIl91aWQiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJfY29tcG9uZW50VGFnIiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiX3NlbGYiLCIkcm9vdCIsIiRyZWZzIiwiaW5pdExpZmVjeWNsZSIsIl9ldmVudHMiLCJpbml0RXZlbnRzIiwicGFyZW50RGF0YSIsImluaXRSZW5kZXIiLCJpbml0SW5qZWN0aW9ucyIsImluaXRQcm92aWRlIiwiZWwiLCJpbml0TWl4aW4iLCJkYXRhRGVmIiwicHJvcHNEZWYiLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInN0YXRlTWl4aW4iLCJob29rUkUiLCIkb25jZSIsImkkMSIsImNicyIsImV2ZW50c01peGluIiwiX3VwZGF0ZSIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsInJlc3RvcmVBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9fdnVlX18iLCJsaWZlY3ljbGVNaXhpbiIsIiRuZXh0VGljayIsIl9yZW5kZXIiLCJyZW5kZXJNaXhpbiIsInBhdHRlcm5UeXBlcyIsImJ1aWx0SW5Db21wb25lbnRzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwibW91bnRlZCIsInBhcnNlSW50IiwiY29uZmlnRGVmIiwidXRpbCIsImRlZmluZVJlYWN0aXZlIiwib2JzZXJ2YWJsZSIsImluc3RhbGxlZFBsdWdpbnMiLCJfaW5zdGFsbGVkUGx1Z2lucyIsInVuc2hpZnQiLCJpbml0VXNlIiwiaW5pdE1peGluJDEiLCJkZWZpbml0aW9uIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiaW5pdEdsb2JhbEFQSSIsInNzckNvbnRleHQiLCJhY2NlcHRWYWx1ZSIsImlzRW51bWVyYXRlZEF0dHIiLCJpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUiLCJjb252ZXJ0RW51bWVyYXRlZFZhbHVlIiwiaXNGYWxzeUF0dHJWYWx1ZSIsImlzQm9vbGVhbkF0dHIiLCJ4bGlua05TIiwiaXNYbGluayIsImdldFhsaW5rUHJvcCIsImdlbkNsYXNzRm9yVm5vZGUiLCJjaGlsZE5vZGUiLCJtZXJnZUNsYXNzRGF0YSIsInN0YXRpY0NsYXNzIiwiZHluYW1pY0NsYXNzIiwic3RyaW5naWZ5Q2xhc3MiLCJyZW5kZXJDbGFzcyIsInN0cmluZ2lmaWVkIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJuYW1lc3BhY2VNYXAiLCJzdmciLCJtYXRoIiwiaXNIVE1MVGFnIiwiaXNTVkciLCJ1bmtub3duRWxlbWVudENhY2hlIiwiaXNUZXh0SW5wdXRUeXBlIiwibm9kZU9wcyIsInRhZ05hbWUiLCJtdWx0aXBsZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZUNvbW1lbnQiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJzY29wZUlkIiwicmVnaXN0ZXJSZWYiLCJpc1JlbW92YWwiLCJyZWZJbkZvciIsImVtcHR5Tm9kZSIsInNhbWVWbm9kZSIsInR5cGVBIiwidHlwZUIiLCJzYW1lSW5wdXRUeXBlIiwiY3JlYXRlS2V5VG9PbGRJZHgiLCJiZWdpbklkeCIsImVuZElkeCIsInVwZGF0ZURpcmVjdGl2ZXMiLCJvbGREaXIiLCJkaXIiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZEFyZyIsImNhbGxIb29rJDEiLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJiYXNlU2V0QXR0ciIsInNldEF0dHJpYnV0ZU5TIiwiX19pZXBoIiwiYmxvY2tlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwidGFyZ2V0JDEiLCJrbGFzcyIsIlJBTkdFX1RPS0VOIiwiQ0hFQ0tCT1hfUkFESU9fVE9LRU4iLCJjcmVhdGVPbmNlSGFuZGxlciQxIiwicmVtb3ZlJDIiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhZGQkMSIsImF0dGFjaGVkVGltZXN0YW1wIiwiX3dyYXBwZXIiLCJjdXJyZW50VGFyZ2V0Iiwib3duZXJEb2N1bWVudCIsInVwZGF0ZURPTUxpc3RlbmVycyIsImNoYW5nZSIsIm5vcm1hbGl6ZUV2ZW50cyIsInN2Z0NvbnRhaW5lciIsImV2ZW50cyIsInVwZGF0ZURPTVByb3BzIiwib2xkUHJvcHMiLCJfdmFsdWUiLCJzdHJDdXIiLCJzaG91bGRVcGRhdGVWYWx1ZSIsImlubmVySFRNTCIsImNoZWNrVmFsIiwiY29tcG9zaW5nIiwibm90SW5Gb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsIl92TW9kaWZpZXJzIiwibnVtYmVyIiwidHJpbSIsImlzRGlydHlXaXRoTW9kaWZpZXJzIiwicGFyc2VTdHlsZVRleHQiLCJwcm9wZXJ0eURlbGltaXRlciIsIm5vcm1hbGl6ZVN0eWxlRGF0YSIsIm5vcm1hbGl6ZVN0eWxlQmluZGluZyIsInN0YXRpY1N0eWxlIiwiYmluZGluZ1N0eWxlIiwiZW1wdHlTdHlsZSIsImNzc1ZhclJFIiwiaW1wb3J0YW50UkUiLCJzZXRQcm9wIiwic2V0UHJvcGVydHkiLCJub3JtYWxpemVkTmFtZSIsIm5vcm1hbGl6ZSIsInZlbmRvck5hbWVzIiwiY2FwTmFtZSIsInVwZGF0ZVN0eWxlIiwib2xkU3RhdGljU3R5bGUiLCJvbGRTdHlsZUJpbmRpbmciLCJub3JtYWxpemVkU3R5bGUiLCJvbGRTdHlsZSIsIm5ld1N0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsImdldFN0eWxlIiwid2hpdGVzcGFjZVJFIiwiYWRkQ2xhc3MiLCJjbGFzc0xpc3QiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVDbGFzcyIsInRhciIsInJlc29sdmVUcmFuc2l0aW9uIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiaGFzVHJhbnNpdGlvbiIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJyYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImV4cGVjdGVkVHlwZSIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiZW5kZWQiLCJlbmQiLCJvbkVuZCIsInRyYW5zZm9ybVJFIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsImR1cmF0aW9ucyIsInRvTXMiLCJlbnRlciIsInRvZ2dsZURpc3BsYXkiLCJfbGVhdmVDYiIsImNhbmNlbGxlZCIsInRyYW5zaXRpb24iLCJfZW50ZXJDYiIsIm5vZGVUeXBlIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJnZXRIb29rQXJndW1lbnRzTGVuZ3RoIiwic2hvdyIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsInJtIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBhdGNoIiwiYmFja2VuZCIsInJlbW92ZU5vZGUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJuZXN0ZWQiLCJvd25lckFycmF5IiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJpbm5lck5vZGUiLCJhY3RpdmF0ZSIsInJlYWN0aXZhdGVDb21wb25lbnQiLCJzZXRTY29wZSIsImNyZWF0ZUNoaWxkcmVuIiwiaW52b2tlQ3JlYXRlSG9va3MiLCJwZW5kaW5nSW5zZXJ0IiwiaXNQYXRjaGFibGUiLCJyZWYkJDEiLCJhbmNlc3RvciIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJjaCIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJjaGlsZEVsbSIsImNyZWF0ZVJtQ2IiLCJmaW5kSWR4SW5PbGQiLCJvbGRDaCIsInBhdGNoVm5vZGUiLCJyZW1vdmVPbmx5IiwiaHlkcmF0ZSIsIm5ld0NoIiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsInZub2RlVG9Nb3ZlIiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsImNhbk1vdmUiLCJ1cGRhdGVDaGlsZHJlbiIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaXNSZW5kZXJlZE1vZHVsZSIsImluVlByZSIsImhhc0NoaWxkTm9kZXMiLCJjaGlsZHJlbk1hdGNoIiwiZnVsbEludm9rZSIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsIm9sZEVsbSIsInBhdGNoYWJsZSIsImkkMiIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJ2bW9kZWwiLCJ0cmlnZ2VyIiwiZGlyZWN0aXZlIiwiYmluZGluZyIsIl92T3B0aW9ucyIsInNldFNlbGVjdGVkIiwiZ2V0VmFsdWUiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJvbkNvbXBvc2l0aW9uRW5kIiwicHJldk9wdGlvbnMiLCJjdXJPcHRpb25zIiwic29tZSIsImhhc05vTWF0Y2hpbmdPcHRpb24iLCJhY3R1YWxseVNldFNlbGVjdGVkIiwiaXNNdWx0aXBsZSIsInNlbGVjdGVkIiwib3B0aW9uIiwic2VsZWN0ZWRJbmRleCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsb2NhdGVOb2RlIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwidHJhbnNpdGlvbiQkMSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsImRpc3BsYXkiLCJ1bmJpbmQiLCJ0cmFuc2l0aW9uUHJvcHMiLCJnZXRSZWFsQ2hpbGQiLCJjb21wT3B0aW9ucyIsImV4dHJhY3RUcmFuc2l0aW9uRGF0YSIsInBsYWNlaG9sZGVyIiwiaCIsInJhd0NoaWxkIiwiaXNOb3RUZXh0Tm9kZSIsImlzVlNob3dEaXJlY3RpdmUiLCJUcmFuc2l0aW9uIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsIl9sZWF2aW5nIiwib2xkUmF3Q2hpbGQiLCJvbGRDaGlsZCIsImlzU2FtZUNoaWxkIiwiZGVsYXllZExlYXZlIiwibW92ZUNsYXNzIiwiY2FsbFBlbmRpbmdDYnMiLCJfbW92ZUNiIiwicmVjb3JkUG9zaXRpb24iLCJuZXdQb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhcHBseVRyYW5zbGF0aW9uIiwib2xkUG9zIiwicG9zIiwiZHgiLCJsZWZ0IiwiZHkiLCJ0b3AiLCJtb3ZlZCIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInBsYXRmb3JtQ29tcG9uZW50cyIsIlRyYW5zaXRpb25Hcm91cCIsImJlZm9yZU1vdW50Iiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwiYyQxIiwidXBkYXRlZCIsImhhc01vdmUiLCJfcmVmbG93IiwiYm9keSIsIm9mZnNldEhlaWdodCIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiY2xvbmVOb2RlIiwiYXR0ciIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwidXBkYXRlQ29tcG9uZW50IiwibW91bnRDb21wb25lbnQiLCJxdWVyeSIsInNjb3BlIiwic2VsZiIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjbG9zZSIsInVucmVmIiwiZW5yb2xsIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiX29uVGltZW91dCIsInJlcXVpcmUiLCJjbGVhckltbWVkaWF0ZSIsInJlZ2lzdGVySW1tZWRpYXRlIiwiaHRtbCIsImNoYW5uZWwiLCJtZXNzYWdlUHJlZml4Iiwib25HbG9iYWxNZXNzYWdlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJkb2MiLCJhdHRhY2hUbyIsImdldFByb3RvdHlwZU9mIiwiaGFuZGxlIiwicnVuSWZQcmVzZW50IiwicG9zdE1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsIm9ubWVzc2FnZSIsImNhblVzZVBvc3RNZXNzYWdlIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MSIsInBvcnQyIiwiZG9jdW1lbnRFbGVtZW50Iiwic2NyaXB0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmFuZG9tIiwiYXR0YWNoRXZlbnQiLCJ0YXNrIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJ0aXRsZSIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJfaCIsImxvYWRlZCIsImNoYXJhY3RlcnMiLCJjaGFyYWN0ZXIiLCJfd2l0aFN0cmlwcGVkIiwiaW5wdXREYXRhIiwiaW5wdXQiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwibW9kdWxlSWRlbnRpZmllciIsInNoYWRvd01vZGUiLCJfX1ZVRV9TU1JfQ09OVEVYVF9fIiwiX3JlZ2lzdGVyZWRDb21wb25lbnRzIiwiX3NzclJlZ2lzdGVyIiwic2hhZG93Um9vdCIsIl9pbmplY3RTdHlsZXMiLCJvcmlnaW5hbFJlbmRlciIsIl9fZmlsZSIsImNsaWNrIiwib3BlblBvcHVwIiwicmVhbFNwZWNpZSIsInBvcHVwQWN0aXZlIiwiY2xvc2VQb3B1cCIsImJpcnRoX3llYXIiLCJnZW5kZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJldnQiLCJwb3B1cCIsImZldGNoIiwic3BlY2llcyIsIndpZHRoIiwiaGVpZ2h0Iiwidmlld0JveCIsImZpbGwiLCJ4bWxucyIsIm9wYWNpdHkiLCJzZWFyY2giLCJjYXJkIiwibG9hZGVyIiwiVnVleCIsInNob3dlZENvdW50ZXIiLCJzaG93ZWRDb3VudGVySW5j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YUFFQSwyQkFDSXI1QyxFQUFLa3pDLFlBQVksS0FDckIsZUFDUXp1QyxLQUFLK3lDLFFBQVMsRUFDZHJFLGNBQWNuekMsS0FFdEIsT0MxQ0ksRyxNQUFZLEVBQ2QsRUFDQW1sQixFcEI4Qm9CLElvQjVCcEIsRUFDQSxLQUNBLEtBQ0EsT0F1QkYsRUFBVWprQixRQUFRdzNDLE9BQVMseUJBQ1osUSxRQ2xDZjd3QyxJQUFJeXVCLElBQUkwakIsS0FFUixNQUFNcnhDLEVBQVEsSUFBSXF4QyxJQUFLbHlDLE1BQU0sQ0FDM0JoQyxNQUFPLENBQ0xtMEMsY0FBZSxHQUVqQjV6QyxVQUFXLENBQ1Q2ekMsdUJBQXVCcDBDLEdBQ3JCQSxFQUFNbTBDLGlCQUVSRSxhQUFhcjBDLEVBQU80eEMsR0FDbEI1eEMsRUFBTTJ4QyxXQUFXbjNDLEtBQUtvM0MsSUFFeEIwQyxXQUFXdDBDLEVBQU80eEMsR0FDaEJBLEVBQVUsR0FBR21CLFdBQWFuQixFQUFVLEtBR3hDdHhDLFFBQVMsQ0FDUCt6QyxjQUFhLE9BQ1h0eEMsRUFEVyxNQUVYL0MsR0FDQzR4QyxHQUNEN3VDLEVBQVEsZUFBZS9DLEVBQU80eEMsSUFFaEMwQyxZQUFXLE9BQ1R2eEMsRUFEUyxNQUVUL0MsR0FDQzR4QyxHQUNEN3VDLEVBQVEsYUFBYTZ1QyxPQUszQixJQUFJN3ZDLElBQUksQ0FDTml3QixHQUFJLE9BQ0pudkIsUUFDQXdjLE9BQVFzcUIsR0FBS0EsRUFBRTRLIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gOSk7XG4iLCIvKipcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcbiAqIGVhc2llciB0byBtYW5pcHVsYXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0VG9TdHlsZXMgKHBhcmVudElkLCBsaXN0KSB7XG4gIHZhciBzdHlsZXMgPSBbXVxuICB2YXIgbmV3U3R5bGVzID0ge31cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgdmFyIGlkID0gaXRlbVswXVxuICAgIHZhciBjc3MgPSBpdGVtWzFdXG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXVxuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdXG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBpZDogcGFyZW50SWQgKyAnOicgKyBpLFxuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH1cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7IGlkOiBpZCwgcGFydHM6IFtwYXJ0XSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlc1xufVxuIiwiLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuICBNb2RpZmllZCBieSBFdmFuIFlvdSBAeXl4OTkwODAzXG4qL1xuXG5pbXBvcnQgbGlzdFRvU3R5bGVzIGZyb20gJy4vbGlzdFRvU3R5bGVzJ1xuXG52YXIgaGFzRG9jdW1lbnQgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG5cbmlmICh0eXBlb2YgREVCVUcgIT09ICd1bmRlZmluZWQnICYmIERFQlVHKSB7XG4gIGlmICghaGFzRG9jdW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3Z1ZS1zdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudC4gJyArXG4gICAgXCJVc2UgeyB0YXJnZXQ6ICdub2RlJyB9IGluIHlvdXIgV2VicGFjayBjb25maWcgdG8gaW5kaWNhdGUgYSBzZXJ2ZXItcmVuZGVyaW5nIGVudmlyb25tZW50LlwiXG4gICkgfVxufVxuXG4vKlxudHlwZSBTdHlsZU9iamVjdCA9IHtcbiAgaWQ6IG51bWJlcjtcbiAgcGFydHM6IEFycmF5PFN0eWxlT2JqZWN0UGFydD5cbn1cblxudHlwZSBTdHlsZU9iamVjdFBhcnQgPSB7XG4gIGNzczogc3RyaW5nO1xuICBtZWRpYTogc3RyaW5nO1xuICBzb3VyY2VNYXA6ID9zdHJpbmdcbn1cbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHsvKlxuICBbaWQ6IG51bWJlcl06IHtcbiAgICBpZDogbnVtYmVyLFxuICAgIHJlZnM6IG51bWJlcixcbiAgICBwYXJ0czogQXJyYXk8KG9iaj86IFN0eWxlT2JqZWN0UGFydCkgPT4gdm9pZD5cbiAgfVxuKi99XG5cbnZhciBoZWFkID0gaGFzRG9jdW1lbnQgJiYgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSlcbnZhciBzaW5nbGV0b25FbGVtZW50ID0gbnVsbFxudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwXG52YXIgaXNQcm9kdWN0aW9uID0gZmFsc2VcbnZhciBub29wID0gZnVuY3Rpb24gKCkge31cbnZhciBvcHRpb25zID0gbnVsbFxudmFyIHNzcklkS2V5ID0gJ2RhdGEtdnVlLXNzci1pZCdcblxuLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4vLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG52YXIgaXNPbGRJRSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9tc2llIFs2LTldXFxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkU3R5bGVzQ2xpZW50IChwYXJlbnRJZCwgbGlzdCwgX2lzUHJvZHVjdGlvbiwgX29wdGlvbnMpIHtcbiAgaXNQcm9kdWN0aW9uID0gX2lzUHJvZHVjdGlvblxuXG4gIG9wdGlvbnMgPSBfb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMocGFyZW50SWQsIGxpc3QpXG4gIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcblxuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG4gICAgdmFyIG1heVJlbW92ZSA9IFtdXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gc3R5bGVzW2ldXG4gICAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgICAgZG9tU3R5bGUucmVmcy0tXG4gICAgICBtYXlSZW1vdmUucHVzaChkb21TdHlsZSlcbiAgICB9XG4gICAgaWYgKG5ld0xpc3QpIHtcbiAgICAgIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbmV3TGlzdClcbiAgICAgIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzID0gW11cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXVxuICAgICAgaWYgKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKClcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMgLyogQXJyYXk8U3R5bGVPYmplY3Q+ICovKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgZG9tU3R5bGUucmVmcysrXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pXG4gICAgICB9XG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIGlmIChkb21TdHlsZS5wYXJ0cy5sZW5ndGggPiBpdGVtLnBhcnRzLmxlbmd0aCkge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5sZW5ndGggPSBpdGVtLnBhcnRzLmxlbmd0aFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFydHMgPSBbXVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSkpXG4gICAgICB9XG4gICAgICBzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHsgaWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0cyB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAoKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG4gIHN0eWxlRWxlbWVudC50eXBlID0gJ3RleHQvY3NzJ1xuICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudClcbiAgcmV0dXJuIHN0eWxlRWxlbWVudFxufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICB2YXIgdXBkYXRlLCByZW1vdmVcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlWycgKyBzc3JJZEtleSArICd+PVwiJyArIG9iai5pZCArICdcIl0nKVxuXG4gIGlmIChzdHlsZUVsZW1lbnQpIHtcbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBhbmQgaW4gcHJvZHVjdGlvbiBtb2RlLlxuICAgICAgLy8gc2ltcGx5IGRvIG5vdGhpbmcuXG4gICAgICByZXR1cm4gbm9vcFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBidXQgaW4gZGV2IG1vZGUuXG4gICAgICAvLyBmb3Igc29tZSByZWFzb24gQ2hyb21lIGNhbid0IGhhbmRsZSBzb3VyY2UgbWFwIGluIHNlcnZlci1yZW5kZXJlZFxuICAgICAgLy8gc3R5bGUgdGFncyAtIHNvdXJjZSBtYXBzIGluIDxzdHlsZT4gb25seSB3b3JrcyBpZiB0aGUgc3R5bGUgdGFnIGlzXG4gICAgICAvLyBjcmVhdGVkIGFuZCBpbnNlcnRlZCBkeW5hbWljYWxseS4gU28gd2UgcmVtb3ZlIHRoZSBzZXJ2ZXIgcmVuZGVyZWRcbiAgICAgIC8vIHN0eWxlcyBhbmQgaW5qZWN0IG5ldyBvbmVzLlxuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIGlmIChpc09sZElFKSB7XG4gICAgLy8gdXNlIHNpbmdsZXRvbiBtb2RlIGZvciBJRTkuXG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKytcbiAgICBzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KCkpXG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpXG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgdHJ1ZSlcbiAgfSBlbHNlIHtcbiAgICAvLyB1c2UgbXVsdGktc3R5bGUtdGFnIG1vZGUgaW4gYWxsIG90aGVyIGNhc2VzXG4gICAgc3R5bGVFbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KClcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KVxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudClcbiAgICB9XG4gIH1cblxuICB1cGRhdGUob2JqKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG4gICAgICAgICAgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcbiAgICAgICAgICBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iailcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKClcbiAgICB9XG4gIH1cbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnRcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKVxuICB9XG59KSgpXG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5jc3NcblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcylcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcylcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlRWxlbWVudC5jaGlsZE5vZGVzXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSlcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGVFbGVtZW50LCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3NcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwXG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSlcbiAgfVxuICBpZiAob3B0aW9ucy5zc3JJZCkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoc3NySWRLZXksIG9iai5pZClcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXApIHtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2RldnRvb2xzL2RvY3MvamF2YXNjcmlwdC1kZWJ1Z2dpbmdcbiAgICAvLyB0aGlzIG1ha2VzIHNvdXJjZSBtYXBzIGluc2lkZSBzdHlsZSB0YWdzIHdvcmsgcHJvcGVybHkgaW4gQ2hyb21lXG4gICAgY3NzICs9ICdcXG4vKiMgc291cmNlVVJMPScgKyBzb3VyY2VNYXAuc291cmNlc1swXSArICcgKi8nXG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJyArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyAnICovJ1xuICB9XG5cbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzc1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKVxuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSlcbiAgfVxufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc2VhcmNoLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiMzRmNzZjOTlcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc2VhcmNoLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/cHJlcGVuZERhdGE9QGltcG9ydCBcXFwiLi9zcmMvc2Nzcy9zdHlsZS5zY3NzXFxcIjshLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9zZWFyY2gudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcG9wdXAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIwMWJkODNjMlwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/cHJlcGVuZERhdGE9QGltcG9ydCBcXFwiLi9zcmMvc2Nzcy9zdHlsZS5zY3NzXFxcIjshLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9wb3B1cC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcG9wdXAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vY2FyZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjQ5ZjhlNmFlXCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz9wcmVwZW5kRGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL3N0eWxlLnNjc3NcXFwiOyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2NhcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz9wcmVwZW5kRGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL3N0eWxlLnNjc3NcXFwiOyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2NhcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbG9hZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiYWU1ZjgwYTJcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbG9hZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/cHJlcGVuZERhdGE9QGltcG9ydCBcXFwiLi9zcmMvc2Nzcy9zdHlsZS5zY3NzXFxcIjshLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9sb2FkZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiMDIyOWNkM2ZcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/cHJlcGVuZERhdGE9QGltcG9ydCBcXFwiLi9zcmMvc2Nzcy9zdHlsZS5zY3NzXFxcIjshLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiLyoqXG4gKiB2dWV4IHYzLjEuMVxuICogKGMpIDIwMTkgRXZhbiBZb3VcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5mdW5jdGlvbiBhcHBseU1peGluIChWdWUpIHtcbiAgdmFyIHZlcnNpb24gPSBOdW1iZXIoVnVlLnZlcnNpb24uc3BsaXQoJy4nKVswXSk7XG5cbiAgaWYgKHZlcnNpb24gPj0gMikge1xuICAgIFZ1ZS5taXhpbih7IGJlZm9yZUNyZWF0ZTogdnVleEluaXQgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3ZlcnJpZGUgaW5pdCBhbmQgaW5qZWN0IHZ1ZXggaW5pdCBwcm9jZWR1cmVcbiAgICAvLyBmb3IgMS54IGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgIHZhciBfaW5pdCA9IFZ1ZS5wcm90b3R5cGUuX2luaXQ7XG4gICAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICAgICAgb3B0aW9ucy5pbml0ID0gb3B0aW9ucy5pbml0XG4gICAgICAgID8gW3Z1ZXhJbml0XS5jb25jYXQob3B0aW9ucy5pbml0KVxuICAgICAgICA6IHZ1ZXhJbml0O1xuICAgICAgX2luaXQuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFZ1ZXggaW5pdCBob29rLCBpbmplY3RlZCBpbnRvIGVhY2ggaW5zdGFuY2VzIGluaXQgaG9va3MgbGlzdC5cbiAgICovXG5cbiAgZnVuY3Rpb24gdnVleEluaXQgKCkge1xuICAgIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgICAvLyBzdG9yZSBpbmplY3Rpb25cbiAgICBpZiAob3B0aW9ucy5zdG9yZSkge1xuICAgICAgdGhpcy4kc3RvcmUgPSB0eXBlb2Ygb3B0aW9ucy5zdG9yZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IG9wdGlvbnMuc3RvcmUoKVxuICAgICAgICA6IG9wdGlvbnMuc3RvcmU7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC4kc3RvcmUpIHtcbiAgICAgIHRoaXMuJHN0b3JlID0gb3B0aW9ucy5wYXJlbnQuJHN0b3JlO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdGFyZ2V0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgPyB3aW5kb3dcbiAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xuICAgID8gZ2xvYmFsXG4gICAgOiB7fTtcbnZhciBkZXZ0b29sSG9vayA9IHRhcmdldC5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG5mdW5jdGlvbiBkZXZ0b29sUGx1Z2luIChzdG9yZSkge1xuICBpZiAoIWRldnRvb2xIb29rKSB7IHJldHVybiB9XG5cbiAgc3RvcmUuX2RldnRvb2xIb29rID0gZGV2dG9vbEhvb2s7XG5cbiAgZGV2dG9vbEhvb2suZW1pdCgndnVleDppbml0Jywgc3RvcmUpO1xuXG4gIGRldnRvb2xIb29rLm9uKCd2dWV4OnRyYXZlbC10by1zdGF0ZScsIGZ1bmN0aW9uICh0YXJnZXRTdGF0ZSkge1xuICAgIHN0b3JlLnJlcGxhY2VTdGF0ZSh0YXJnZXRTdGF0ZSk7XG4gIH0pO1xuXG4gIHN0b3JlLnN1YnNjcmliZShmdW5jdGlvbiAobXV0YXRpb24sIHN0YXRlKSB7XG4gICAgZGV2dG9vbEhvb2suZW1pdCgndnVleDptdXRhdGlvbicsIG11dGF0aW9uLCBzdGF0ZSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgZmlyc3QgaXRlbSB0aGF0IHBhc3MgdGhlIHRlc3RcbiAqIGJ5IHNlY29uZCBhcmd1bWVudCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGxpc3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZcbiAqIEByZXR1cm4geyp9XG4gKi9cblxuLyoqXG4gKiBmb3JFYWNoIGZvciBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZm9yRWFjaFZhbHVlIChvYmosIGZuKSB7XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmbihvYmpba2V5XSwga2V5KTsgfSk7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gdmFsICYmIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG5mdW5jdGlvbiBhc3NlcnQgKGNvbmRpdGlvbiwgbXNnKSB7XG4gIGlmICghY29uZGl0aW9uKSB7IHRocm93IG5ldyBFcnJvcigoXCJbdnVleF0gXCIgKyBtc2cpKSB9XG59XG5cbmZ1bmN0aW9uIHBhcnRpYWwgKGZuLCBhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm4oYXJnKVxuICB9XG59XG5cbi8vIEJhc2UgZGF0YSBzdHJ1Y3QgZm9yIHN0b3JlJ3MgbW9kdWxlLCBwYWNrYWdlIHdpdGggc29tZSBhdHRyaWJ1dGUgYW5kIG1ldGhvZFxudmFyIE1vZHVsZSA9IGZ1bmN0aW9uIE1vZHVsZSAocmF3TW9kdWxlLCBydW50aW1lKSB7XG4gIHRoaXMucnVudGltZSA9IHJ1bnRpbWU7XG4gIC8vIFN0b3JlIHNvbWUgY2hpbGRyZW4gaXRlbVxuICB0aGlzLl9jaGlsZHJlbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIFN0b3JlIHRoZSBvcmlnaW4gbW9kdWxlIG9iamVjdCB3aGljaCBwYXNzZWQgYnkgcHJvZ3JhbW1lclxuICB0aGlzLl9yYXdNb2R1bGUgPSByYXdNb2R1bGU7XG4gIHZhciByYXdTdGF0ZSA9IHJhd01vZHVsZS5zdGF0ZTtcblxuICAvLyBTdG9yZSB0aGUgb3JpZ2luIG1vZHVsZSdzIHN0YXRlXG4gIHRoaXMuc3RhdGUgPSAodHlwZW9mIHJhd1N0YXRlID09PSAnZnVuY3Rpb24nID8gcmF3U3RhdGUoKSA6IHJhd1N0YXRlKSB8fCB7fTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IG5hbWVzcGFjZWQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxucHJvdG90eXBlQWNjZXNzb3JzLm5hbWVzcGFjZWQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISF0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZFxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uIGFkZENoaWxkIChrZXksIG1vZHVsZSkge1xuICB0aGlzLl9jaGlsZHJlbltrZXldID0gbW9kdWxlO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIHJlbW92ZUNoaWxkIChrZXkpIHtcbiAgZGVsZXRlIHRoaXMuX2NoaWxkcmVuW2tleV07XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmdldENoaWxkID0gZnVuY3Rpb24gZ2V0Q2hpbGQgKGtleSkge1xuICByZXR1cm4gdGhpcy5fY2hpbGRyZW5ba2V5XVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKHJhd01vZHVsZSkge1xuICB0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZCA9IHJhd01vZHVsZS5uYW1lc3BhY2VkO1xuICBpZiAocmF3TW9kdWxlLmFjdGlvbnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucyA9IHJhd01vZHVsZS5hY3Rpb25zO1xuICB9XG4gIGlmIChyYXdNb2R1bGUubXV0YXRpb25zKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucyA9IHJhd01vZHVsZS5tdXRhdGlvbnM7XG4gIH1cbiAgaWYgKHJhd01vZHVsZS5nZXR0ZXJzKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLmdldHRlcnMgPSByYXdNb2R1bGUuZ2V0dGVycztcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoQ2hpbGQgPSBmdW5jdGlvbiBmb3JFYWNoQ2hpbGQgKGZuKSB7XG4gIGZvckVhY2hWYWx1ZSh0aGlzLl9jaGlsZHJlbiwgZm4pO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoR2V0dGVyID0gZnVuY3Rpb24gZm9yRWFjaEdldHRlciAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzLCBmbik7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEFjdGlvbiA9IGZ1bmN0aW9uIGZvckVhY2hBY3Rpb24gKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucywgZm4pO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hNdXRhdGlvbiA9IGZ1bmN0aW9uIGZvckVhY2hNdXRhdGlvbiAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucywgZm4pO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTW9kdWxlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBNb2R1bGVDb2xsZWN0aW9uID0gZnVuY3Rpb24gTW9kdWxlQ29sbGVjdGlvbiAocmF3Um9vdE1vZHVsZSkge1xuICAvLyByZWdpc3RlciByb290IG1vZHVsZSAoVnVleC5TdG9yZSBvcHRpb25zKVxuICB0aGlzLnJlZ2lzdGVyKFtdLCByYXdSb290TW9kdWxlLCBmYWxzZSk7XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgucmVkdWNlKGZ1bmN0aW9uIChtb2R1bGUsIGtleSkge1xuICAgIHJldHVybiBtb2R1bGUuZ2V0Q2hpbGQoa2V5KVxuICB9LCB0aGlzLnJvb3QpXG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXROYW1lc3BhY2UgPSBmdW5jdGlvbiBnZXROYW1lc3BhY2UgKHBhdGgpIHtcbiAgdmFyIG1vZHVsZSA9IHRoaXMucm9vdDtcbiAgcmV0dXJuIHBhdGgucmVkdWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGtleSkge1xuICAgIG1vZHVsZSA9IG1vZHVsZS5nZXRDaGlsZChrZXkpO1xuICAgIHJldHVybiBuYW1lc3BhY2UgKyAobW9kdWxlLm5hbWVzcGFjZWQgPyBrZXkgKyAnLycgOiAnJylcbiAgfSwgJycpXG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUkMSAocmF3Um9vdE1vZHVsZSkge1xuICB1cGRhdGUoW10sIHRoaXMucm9vdCwgcmF3Um9vdE1vZHVsZSk7XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyIChwYXRoLCByYXdNb2R1bGUsIHJ1bnRpbWUpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICBpZiAoIHJ1bnRpbWUgPT09IHZvaWQgMCApIHJ1bnRpbWUgPSB0cnVlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0UmF3TW9kdWxlKHBhdGgsIHJhd01vZHVsZSk7XG4gIH1cblxuICB2YXIgbmV3TW9kdWxlID0gbmV3IE1vZHVsZShyYXdNb2R1bGUsIHJ1bnRpbWUpO1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICB0aGlzLnJvb3QgPSBuZXdNb2R1bGU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBwYXJlbnQuYWRkQ2hpbGQocGF0aFtwYXRoLmxlbmd0aCAtIDFdLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gcmVnaXN0ZXIgbmVzdGVkIG1vZHVsZXNcbiAgaWYgKHJhd01vZHVsZS5tb2R1bGVzKSB7XG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZS5tb2R1bGVzLCBmdW5jdGlvbiAocmF3Q2hpbGRNb2R1bGUsIGtleSkge1xuICAgICAgdGhpcyQxLnJlZ2lzdGVyKHBhdGguY29uY2F0KGtleSksIHJhd0NoaWxkTW9kdWxlLCBydW50aW1lKTtcbiAgICB9KTtcbiAgfVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIgKHBhdGgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgdmFyIGtleSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgaWYgKCFwYXJlbnQuZ2V0Q2hpbGQoa2V5KS5ydW50aW1lKSB7IHJldHVybiB9XG5cbiAgcGFyZW50LnJlbW92ZUNoaWxkKGtleSk7XG59O1xuXG5mdW5jdGlvbiB1cGRhdGUgKHBhdGgsIHRhcmdldE1vZHVsZSwgbmV3TW9kdWxlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0UmF3TW9kdWxlKHBhdGgsIG5ld01vZHVsZSk7XG4gIH1cblxuICAvLyB1cGRhdGUgdGFyZ2V0IG1vZHVsZVxuICB0YXJnZXRNb2R1bGUudXBkYXRlKG5ld01vZHVsZSk7XG5cbiAgLy8gdXBkYXRlIG5lc3RlZCBtb2R1bGVzXG4gIGlmIChuZXdNb2R1bGUubW9kdWxlcykge1xuICAgIGZvciAodmFyIGtleSBpbiBuZXdNb2R1bGUubW9kdWxlcykge1xuICAgICAgaWYgKCF0YXJnZXRNb2R1bGUuZ2V0Q2hpbGQoa2V5KSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiW3Z1ZXhdIHRyeWluZyB0byBhZGQgYSBuZXcgbW9kdWxlICdcIiArIGtleSArIFwiJyBvbiBob3QgcmVsb2FkaW5nLCBcIiArXG4gICAgICAgICAgICAnbWFudWFsIHJlbG9hZCBpcyBuZWVkZWQnXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHVwZGF0ZShcbiAgICAgICAgcGF0aC5jb25jYXQoa2V5KSxcbiAgICAgICAgdGFyZ2V0TW9kdWxlLmdldENoaWxkKGtleSksXG4gICAgICAgIG5ld01vZHVsZS5tb2R1bGVzW2tleV1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhciBmdW5jdGlvbkFzc2VydCA9IHtcbiAgYXNzZXJ0OiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJzsgfSxcbiAgZXhwZWN0ZWQ6ICdmdW5jdGlvbidcbn07XG5cbnZhciBvYmplY3RBc3NlcnQgPSB7XG4gIGFzc2VydDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUuaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJyk7IH0sXG4gIGV4cGVjdGVkOiAnZnVuY3Rpb24gb3Igb2JqZWN0IHdpdGggXCJoYW5kbGVyXCIgZnVuY3Rpb24nXG59O1xuXG52YXIgYXNzZXJ0VHlwZXMgPSB7XG4gIGdldHRlcnM6IGZ1bmN0aW9uQXNzZXJ0LFxuICBtdXRhdGlvbnM6IGZ1bmN0aW9uQXNzZXJ0LFxuICBhY3Rpb25zOiBvYmplY3RBc3NlcnRcbn07XG5cbmZ1bmN0aW9uIGFzc2VydFJhd01vZHVsZSAocGF0aCwgcmF3TW9kdWxlKSB7XG4gIE9iamVjdC5rZXlzKGFzc2VydFR5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIXJhd01vZHVsZVtrZXldKSB7IHJldHVybiB9XG5cbiAgICB2YXIgYXNzZXJ0T3B0aW9ucyA9IGFzc2VydFR5cGVzW2tleV07XG5cbiAgICBmb3JFYWNoVmFsdWUocmF3TW9kdWxlW2tleV0sIGZ1bmN0aW9uICh2YWx1ZSwgdHlwZSkge1xuICAgICAgYXNzZXJ0KFxuICAgICAgICBhc3NlcnRPcHRpb25zLmFzc2VydCh2YWx1ZSksXG4gICAgICAgIG1ha2VBc3NlcnRpb25NZXNzYWdlKHBhdGgsIGtleSwgdHlwZSwgdmFsdWUsIGFzc2VydE9wdGlvbnMuZXhwZWN0ZWQpXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFrZUFzc2VydGlvbk1lc3NhZ2UgKHBhdGgsIGtleSwgdHlwZSwgdmFsdWUsIGV4cGVjdGVkKSB7XG4gIHZhciBidWYgPSBrZXkgKyBcIiBzaG91bGQgYmUgXCIgKyBleHBlY3RlZCArIFwiIGJ1dCBcXFwiXCIgKyBrZXkgKyBcIi5cIiArIHR5cGUgKyBcIlxcXCJcIjtcbiAgaWYgKHBhdGgubGVuZ3RoID4gMCkge1xuICAgIGJ1ZiArPSBcIiBpbiBtb2R1bGUgXFxcIlwiICsgKHBhdGguam9pbignLicpKSArIFwiXFxcIlwiO1xuICB9XG4gIGJ1ZiArPSBcIiBpcyBcIiArIChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpICsgXCIuXCI7XG4gIHJldHVybiBidWZcbn1cblxudmFyIFZ1ZTsgLy8gYmluZCBvbiBpbnN0YWxsXG5cbnZhciBTdG9yZSA9IGZ1bmN0aW9uIFN0b3JlIChvcHRpb25zKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICAvLyBBdXRvIGluc3RhbGwgaWYgaXQgaXMgbm90IGRvbmUgeWV0IGFuZCBgd2luZG93YCBoYXMgYFZ1ZWAuXG4gIC8vIFRvIGFsbG93IHVzZXJzIHRvIGF2b2lkIGF1dG8taW5zdGFsbGF0aW9uIGluIHNvbWUgY2FzZXMsXG4gIC8vIHRoaXMgY29kZSBzaG91bGQgYmUgcGxhY2VkIGhlcmUuIFNlZSAjNzMxXG4gIGlmICghVnVlICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5WdWUpIHtcbiAgICBpbnN0YWxsKHdpbmRvdy5WdWUpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQoVnVlLCBcIm11c3QgY2FsbCBWdWUudXNlKFZ1ZXgpIGJlZm9yZSBjcmVhdGluZyBhIHN0b3JlIGluc3RhbmNlLlwiKTtcbiAgICBhc3NlcnQodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnLCBcInZ1ZXggcmVxdWlyZXMgYSBQcm9taXNlIHBvbHlmaWxsIGluIHRoaXMgYnJvd3Nlci5cIik7XG4gICAgYXNzZXJ0KHRoaXMgaW5zdGFuY2VvZiBTdG9yZSwgXCJzdG9yZSBtdXN0IGJlIGNhbGxlZCB3aXRoIHRoZSBuZXcgb3BlcmF0b3IuXCIpO1xuICB9XG5cbiAgdmFyIHBsdWdpbnMgPSBvcHRpb25zLnBsdWdpbnM7IGlmICggcGx1Z2lucyA9PT0gdm9pZCAwICkgcGx1Z2lucyA9IFtdO1xuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3Q7IGlmICggc3RyaWN0ID09PSB2b2lkIDAgKSBzdHJpY3QgPSBmYWxzZTtcblxuICAvLyBzdG9yZSBpbnRlcm5hbCBzdGF0ZVxuICB0aGlzLl9jb21taXR0aW5nID0gZmFsc2U7XG4gIHRoaXMuX2FjdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycyA9IFtdO1xuICB0aGlzLl9tdXRhdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl93cmFwcGVkR2V0dGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX21vZHVsZXMgPSBuZXcgTW9kdWxlQ29sbGVjdGlvbihvcHRpb25zKTtcbiAgdGhpcy5fbW9kdWxlc05hbWVzcGFjZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG4gIHRoaXMuX3dhdGNoZXJWTSA9IG5ldyBWdWUoKTtcblxuICAvLyBiaW5kIGNvbW1pdCBhbmQgZGlzcGF0Y2ggdG8gc2VsZlxuICB2YXIgc3RvcmUgPSB0aGlzO1xuICB2YXIgcmVmID0gdGhpcztcbiAgdmFyIGRpc3BhdGNoID0gcmVmLmRpc3BhdGNoO1xuICB2YXIgY29tbWl0ID0gcmVmLmNvbW1pdDtcbiAgdGhpcy5kaXNwYXRjaCA9IGZ1bmN0aW9uIGJvdW5kRGlzcGF0Y2ggKHR5cGUsIHBheWxvYWQpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2guY2FsbChzdG9yZSwgdHlwZSwgcGF5bG9hZClcbiAgfTtcbiAgdGhpcy5jb21taXQgPSBmdW5jdGlvbiBib3VuZENvbW1pdCAodHlwZSwgcGF5bG9hZCwgb3B0aW9ucykge1xuICAgIHJldHVybiBjb21taXQuY2FsbChzdG9yZSwgdHlwZSwgcGF5bG9hZCwgb3B0aW9ucylcbiAgfTtcblxuICAvLyBzdHJpY3QgbW9kZVxuICB0aGlzLnN0cmljdCA9IHN0cmljdDtcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9tb2R1bGVzLnJvb3Quc3RhdGU7XG5cbiAgLy8gaW5pdCByb290IG1vZHVsZS5cbiAgLy8gdGhpcyBhbHNvIHJlY3Vyc2l2ZWx5IHJlZ2lzdGVycyBhbGwgc3ViLW1vZHVsZXNcbiAgLy8gYW5kIGNvbGxlY3RzIGFsbCBtb2R1bGUgZ2V0dGVycyBpbnNpZGUgdGhpcy5fd3JhcHBlZEdldHRlcnNcbiAgaW5zdGFsbE1vZHVsZSh0aGlzLCBzdGF0ZSwgW10sIHRoaXMuX21vZHVsZXMucm9vdCk7XG5cbiAgLy8gaW5pdGlhbGl6ZSB0aGUgc3RvcmUgdm0sIHdoaWNoIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgcmVhY3Rpdml0eVxuICAvLyAoYWxzbyByZWdpc3RlcnMgX3dyYXBwZWRHZXR0ZXJzIGFzIGNvbXB1dGVkIHByb3BlcnRpZXMpXG4gIHJlc2V0U3RvcmVWTSh0aGlzLCBzdGF0ZSk7XG5cbiAgLy8gYXBwbHkgcGx1Z2luc1xuICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikgeyByZXR1cm4gcGx1Z2luKHRoaXMkMSk7IH0pO1xuXG4gIHZhciB1c2VEZXZ0b29scyA9IG9wdGlvbnMuZGV2dG9vbHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGV2dG9vbHMgOiBWdWUuY29uZmlnLmRldnRvb2xzO1xuICBpZiAodXNlRGV2dG9vbHMpIHtcbiAgICBkZXZ0b29sUGx1Z2luKHRoaXMpO1xuICB9XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDEgPSB7IHN0YXRlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQxLnN0YXRlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3ZtLl9kYXRhLiQkc3RhdGVcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQxLnN0YXRlLnNldCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KGZhbHNlLCBcInVzZSBzdG9yZS5yZXBsYWNlU3RhdGUoKSB0byBleHBsaWNpdCByZXBsYWNlIHN0b3JlIHN0YXRlLlwiKTtcbiAgfVxufTtcblxuU3RvcmUucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uIGNvbW1pdCAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vIGNoZWNrIG9iamVjdC1zdHlsZSBjb21taXRcbiAgdmFyIHJlZiA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuICAgIHZhciBvcHRpb25zID0gcmVmLm9wdGlvbnM7XG5cbiAgdmFyIG11dGF0aW9uID0geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkIH07XG4gIHZhciBlbnRyeSA9IHRoaXMuX211dGF0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIG11dGF0aW9uIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICBlbnRyeS5mb3JFYWNoKGZ1bmN0aW9uIGNvbW1pdEl0ZXJhdG9yIChoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVyKHBheWxvYWQpO1xuICAgIH0pO1xuICB9KTtcbiAgdGhpcy5fc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIobXV0YXRpb24sIHRoaXMkMS5zdGF0ZSk7IH0pO1xuXG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgb3B0aW9ucyAmJiBvcHRpb25zLnNpbGVudFxuICApIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBcIlt2dWV4XSBtdXRhdGlvbiB0eXBlOiBcIiArIHR5cGUgKyBcIi4gU2lsZW50IG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkLiBcIiArXG4gICAgICAnVXNlIHRoZSBmaWx0ZXIgZnVuY3Rpb25hbGl0eSBpbiB0aGUgdnVlLWRldnRvb2xzJ1xuICAgICk7XG4gIH1cbn07XG5cblN0b3JlLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoIChfdHlwZSwgX3BheWxvYWQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyBjaGVjayBvYmplY3Qtc3R5bGUgZGlzcGF0Y2hcbiAgdmFyIHJlZiA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkKTtcbiAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICAgIHZhciBwYXlsb2FkID0gcmVmLnBheWxvYWQ7XG5cbiAgdmFyIGFjdGlvbiA9IHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCB9O1xuICB2YXIgZW50cnkgPSB0aGlzLl9hY3Rpb25zW3R5cGVdO1xuICBpZiAoIWVudHJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gYWN0aW9uIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnNcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmJlZm9yZTsgfSlcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5iZWZvcmUoYWN0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbdnVleF0gZXJyb3IgaW4gYmVmb3JlIGFjdGlvbiBzdWJzY3JpYmVyczogXCIpO1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gZW50cnkubGVuZ3RoID4gMVxuICAgID8gUHJvbWlzZS5hbGwoZW50cnkubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBoYW5kbGVyKHBheWxvYWQpOyB9KSlcbiAgICA6IGVudHJ5WzBdKHBheWxvYWQpO1xuXG4gIHJldHVybiByZXN1bHQudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMkMS5fYWN0aW9uU3Vic2NyaWJlcnNcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYWZ0ZXI7IH0pXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5hZnRlcihhY3Rpb24sIHRoaXMkMS5zdGF0ZSk7IH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlt2dWV4XSBlcnJvciBpbiBhZnRlciBhY3Rpb24gc3Vic2NyaWJlcnM6IFwiKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9KVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZSAoZm4pIHtcbiAgcmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoZm4sIHRoaXMuX3N1YnNjcmliZXJzKVxufTtcblxuU3RvcmUucHJvdG90eXBlLnN1YnNjcmliZUFjdGlvbiA9IGZ1bmN0aW9uIHN1YnNjcmliZUFjdGlvbiAoZm4pIHtcbiAgdmFyIHN1YnMgPSB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgPyB7IGJlZm9yZTogZm4gfSA6IGZuO1xuICByZXR1cm4gZ2VuZXJpY1N1YnNjcmliZShzdWJzLCB0aGlzLl9hY3Rpb25TdWJzY3JpYmVycylcbn07XG5cblN0b3JlLnByb3RvdHlwZS53YXRjaCA9IGZ1bmN0aW9uIHdhdGNoIChnZXR0ZXIsIGNiLCBvcHRpb25zKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQodHlwZW9mIGdldHRlciA9PT0gJ2Z1bmN0aW9uJywgXCJzdG9yZS53YXRjaCBvbmx5IGFjY2VwdHMgYSBmdW5jdGlvbi5cIik7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX3dhdGNoZXJWTS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0dGVyKHRoaXMkMS5zdGF0ZSwgdGhpcyQxLmdldHRlcnMpOyB9LCBjYiwgb3B0aW9ucylcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZXBsYWNlU3RhdGUgPSBmdW5jdGlvbiByZXBsYWNlU3RhdGUgKHN0YXRlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgdGhpcyQxLl92bS5fZGF0YS4kJHN0YXRlID0gc3RhdGU7XG4gIH0pO1xufTtcblxuU3RvcmUucHJvdG90eXBlLnJlZ2lzdGVyTW9kdWxlID0gZnVuY3Rpb24gcmVnaXN0ZXJNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSwgb3B0aW9ucykge1xuICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHsgcGF0aCA9IFtwYXRoXTsgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gICAgYXNzZXJ0KHBhdGgubGVuZ3RoID4gMCwgJ2Nhbm5vdCByZWdpc3RlciB0aGUgcm9vdCBtb2R1bGUgYnkgdXNpbmcgcmVnaXN0ZXJNb2R1bGUuJyk7XG4gIH1cblxuICB0aGlzLl9tb2R1bGVzLnJlZ2lzdGVyKHBhdGgsIHJhd01vZHVsZSk7XG4gIGluc3RhbGxNb2R1bGUodGhpcywgdGhpcy5zdGF0ZSwgcGF0aCwgdGhpcy5fbW9kdWxlcy5nZXQocGF0aCksIG9wdGlvbnMucHJlc2VydmVTdGF0ZSk7XG4gIC8vIHJlc2V0IHN0b3JlIHRvIHVwZGF0ZSBnZXR0ZXJzLi4uXG4gIHJlc2V0U3RvcmVWTSh0aGlzLCB0aGlzLnN0YXRlKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS51bnJlZ2lzdGVyTW9kdWxlID0gZnVuY3Rpb24gdW5yZWdpc3Rlck1vZHVsZSAocGF0aCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHsgcGF0aCA9IFtwYXRoXTsgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gIH1cblxuICB0aGlzLl9tb2R1bGVzLnVucmVnaXN0ZXIocGF0aCk7XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnRTdGF0ZSA9IGdldE5lc3RlZFN0YXRlKHRoaXMkMS5zdGF0ZSwgcGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIFZ1ZS5kZWxldGUocGFyZW50U3RhdGUsIHBhdGhbcGF0aC5sZW5ndGggLSAxXSk7XG4gIH0pO1xuICByZXNldFN0b3JlKHRoaXMpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLmhvdFVwZGF0ZSA9IGZ1bmN0aW9uIGhvdFVwZGF0ZSAobmV3T3B0aW9ucykge1xuICB0aGlzLl9tb2R1bGVzLnVwZGF0ZShuZXdPcHRpb25zKTtcbiAgcmVzZXRTdG9yZSh0aGlzLCB0cnVlKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5fd2l0aENvbW1pdCA9IGZ1bmN0aW9uIF93aXRoQ29tbWl0IChmbikge1xuICB2YXIgY29tbWl0dGluZyA9IHRoaXMuX2NvbW1pdHRpbmc7XG4gIHRoaXMuX2NvbW1pdHRpbmcgPSB0cnVlO1xuICBmbigpO1xuICB0aGlzLl9jb21taXR0aW5nID0gY29tbWl0dGluZztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBTdG9yZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQxICk7XG5cbmZ1bmN0aW9uIGdlbmVyaWNTdWJzY3JpYmUgKGZuLCBzdWJzKSB7XG4gIGlmIChzdWJzLmluZGV4T2YoZm4pIDwgMCkge1xuICAgIHN1YnMucHVzaChmbik7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IHN1YnMuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkge1xuICAgICAgc3Vicy5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RvcmUgKHN0b3JlLCBob3QpIHtcbiAgc3RvcmUuX2FjdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX3dyYXBwZWRHZXR0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc3RhdGUgPSBzdG9yZS5zdGF0ZTtcbiAgLy8gaW5pdCBhbGwgbW9kdWxlc1xuICBpbnN0YWxsTW9kdWxlKHN0b3JlLCBzdGF0ZSwgW10sIHN0b3JlLl9tb2R1bGVzLnJvb3QsIHRydWUpO1xuICAvLyByZXNldCB2bVxuICByZXNldFN0b3JlVk0oc3RvcmUsIHN0YXRlLCBob3QpO1xufVxuXG5mdW5jdGlvbiByZXNldFN0b3JlVk0gKHN0b3JlLCBzdGF0ZSwgaG90KSB7XG4gIHZhciBvbGRWbSA9IHN0b3JlLl92bTtcblxuICAvLyBiaW5kIHN0b3JlIHB1YmxpYyBnZXR0ZXJzXG4gIHN0b3JlLmdldHRlcnMgPSB7fTtcbiAgdmFyIHdyYXBwZWRHZXR0ZXJzID0gc3RvcmUuX3dyYXBwZWRHZXR0ZXJzO1xuICB2YXIgY29tcHV0ZWQgPSB7fTtcbiAgZm9yRWFjaFZhbHVlKHdyYXBwZWRHZXR0ZXJzLCBmdW5jdGlvbiAoZm4sIGtleSkge1xuICAgIC8vIHVzZSBjb21wdXRlZCB0byBsZXZlcmFnZSBpdHMgbGF6eS1jYWNoaW5nIG1lY2hhbmlzbVxuICAgIC8vIGRpcmVjdCBpbmxpbmUgZnVuY3Rpb24gdXNlIHdpbGwgbGVhZCB0byBjbG9zdXJlIHByZXNlcnZpbmcgb2xkVm0uXG4gICAgLy8gdXNpbmcgcGFydGlhbCB0byByZXR1cm4gZnVuY3Rpb24gd2l0aCBvbmx5IGFyZ3VtZW50cyBwcmVzZXJ2ZWQgaW4gY2xvc3VyZSBlbnZpcm9tZW50LlxuICAgIGNvbXB1dGVkW2tleV0gPSBwYXJ0aWFsKGZuLCBzdG9yZSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN0b3JlLmdldHRlcnMsIGtleSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5fdm1ba2V5XTsgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUgLy8gZm9yIGxvY2FsIGdldHRlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gdXNlIGEgVnVlIGluc3RhbmNlIHRvIHN0b3JlIHRoZSBzdGF0ZSB0cmVlXG4gIC8vIHN1cHByZXNzIHdhcm5pbmdzIGp1c3QgaW4gY2FzZSB0aGUgdXNlciBoYXMgYWRkZWRcbiAgLy8gc29tZSBmdW5reSBnbG9iYWwgbWl4aW5zXG4gIHZhciBzaWxlbnQgPSBWdWUuY29uZmlnLnNpbGVudDtcbiAgVnVlLmNvbmZpZy5zaWxlbnQgPSB0cnVlO1xuICBzdG9yZS5fdm0gPSBuZXcgVnVlKHtcbiAgICBkYXRhOiB7XG4gICAgICAkJHN0YXRlOiBzdGF0ZVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IGNvbXB1dGVkXG4gIH0pO1xuICBWdWUuY29uZmlnLnNpbGVudCA9IHNpbGVudDtcblxuICAvLyBlbmFibGUgc3RyaWN0IG1vZGUgZm9yIG5ldyB2bVxuICBpZiAoc3RvcmUuc3RyaWN0KSB7XG4gICAgZW5hYmxlU3RyaWN0TW9kZShzdG9yZSk7XG4gIH1cblxuICBpZiAob2xkVm0pIHtcbiAgICBpZiAoaG90KSB7XG4gICAgICAvLyBkaXNwYXRjaCBjaGFuZ2VzIGluIGFsbCBzdWJzY3JpYmVkIHdhdGNoZXJzXG4gICAgICAvLyB0byBmb3JjZSBnZXR0ZXIgcmUtZXZhbHVhdGlvbiBmb3IgaG90IHJlbG9hZGluZy5cbiAgICAgIHN0b3JlLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2xkVm0uX2RhdGEuJCRzdGF0ZSA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG4gICAgVnVlLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9sZFZtLiRkZXN0cm95KCk7IH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluc3RhbGxNb2R1bGUgKHN0b3JlLCByb290U3RhdGUsIHBhdGgsIG1vZHVsZSwgaG90KSB7XG4gIHZhciBpc1Jvb3QgPSAhcGF0aC5sZW5ndGg7XG4gIHZhciBuYW1lc3BhY2UgPSBzdG9yZS5fbW9kdWxlcy5nZXROYW1lc3BhY2UocGF0aCk7XG5cbiAgLy8gcmVnaXN0ZXIgaW4gbmFtZXNwYWNlIG1hcFxuICBpZiAobW9kdWxlLm5hbWVzcGFjZWQpIHtcbiAgICBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdID0gbW9kdWxlO1xuICB9XG5cbiAgLy8gc2V0IHN0YXRlXG4gIGlmICghaXNSb290ICYmICFob3QpIHtcbiAgICB2YXIgcGFyZW50U3RhdGUgPSBnZXROZXN0ZWRTdGF0ZShyb290U3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICB2YXIgbW9kdWxlTmFtZSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgICBzdG9yZS5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgICBWdWUuc2V0KHBhcmVudFN0YXRlLCBtb2R1bGVOYW1lLCBtb2R1bGUuc3RhdGUpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGxvY2FsID0gbW9kdWxlLmNvbnRleHQgPSBtYWtlTG9jYWxDb250ZXh0KHN0b3JlLCBuYW1lc3BhY2UsIHBhdGgpO1xuXG4gIG1vZHVsZS5mb3JFYWNoTXV0YXRpb24oZnVuY3Rpb24gKG11dGF0aW9uLCBrZXkpIHtcbiAgICB2YXIgbmFtZXNwYWNlZFR5cGUgPSBuYW1lc3BhY2UgKyBrZXk7XG4gICAgcmVnaXN0ZXJNdXRhdGlvbihzdG9yZSwgbmFtZXNwYWNlZFR5cGUsIG11dGF0aW9uLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoQWN0aW9uKGZ1bmN0aW9uIChhY3Rpb24sIGtleSkge1xuICAgIHZhciB0eXBlID0gYWN0aW9uLnJvb3QgPyBrZXkgOiBuYW1lc3BhY2UgKyBrZXk7XG4gICAgdmFyIGhhbmRsZXIgPSBhY3Rpb24uaGFuZGxlciB8fCBhY3Rpb247XG4gICAgcmVnaXN0ZXJBY3Rpb24oc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hHZXR0ZXIoZnVuY3Rpb24gKGdldHRlciwga2V5KSB7XG4gICAgdmFyIG5hbWVzcGFjZWRUeXBlID0gbmFtZXNwYWNlICsga2V5O1xuICAgIHJlZ2lzdGVyR2V0dGVyKHN0b3JlLCBuYW1lc3BhY2VkVHlwZSwgZ2V0dGVyLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNoaWxkLCBrZXkpIHtcbiAgICBpbnN0YWxsTW9kdWxlKHN0b3JlLCByb290U3RhdGUsIHBhdGguY29uY2F0KGtleSksIGNoaWxkLCBob3QpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBtYWtlIGxvY2FsaXplZCBkaXNwYXRjaCwgY29tbWl0LCBnZXR0ZXJzIGFuZCBzdGF0ZVxuICogaWYgdGhlcmUgaXMgbm8gbmFtZXNwYWNlLCBqdXN0IHVzZSByb290IG9uZXNcbiAqL1xuZnVuY3Rpb24gbWFrZUxvY2FsQ29udGV4dCAoc3RvcmUsIG5hbWVzcGFjZSwgcGF0aCkge1xuICB2YXIgbm9OYW1lc3BhY2UgPSBuYW1lc3BhY2UgPT09ICcnO1xuXG4gIHZhciBsb2NhbCA9IHtcbiAgICBkaXNwYXRjaDogbm9OYW1lc3BhY2UgPyBzdG9yZS5kaXNwYXRjaCA6IGZ1bmN0aW9uIChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgYXJncyA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgICB2YXIgcGF5bG9hZCA9IGFyZ3MucGF5bG9hZDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJncy5vcHRpb25zO1xuICAgICAgdmFyIHR5cGUgPSBhcmdzLnR5cGU7XG5cbiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yb290KSB7XG4gICAgICAgIHR5cGUgPSBuYW1lc3BhY2UgKyB0eXBlO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc3RvcmUuX2FjdGlvbnNbdHlwZV0pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGxvY2FsIGFjdGlvbiB0eXBlOiBcIiArIChhcmdzLnR5cGUpICsgXCIsIGdsb2JhbCB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2godHlwZSwgcGF5bG9hZClcbiAgICB9LFxuXG4gICAgY29tbWl0OiBub05hbWVzcGFjZSA/IHN0b3JlLmNvbW1pdCA6IGZ1bmN0aW9uIChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgYXJncyA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgICB2YXIgcGF5bG9hZCA9IGFyZ3MucGF5bG9hZDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJncy5vcHRpb25zO1xuICAgICAgdmFyIHR5cGUgPSBhcmdzLnR5cGU7XG5cbiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yb290KSB7XG4gICAgICAgIHR5cGUgPSBuYW1lc3BhY2UgKyB0eXBlO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc3RvcmUuX211dGF0aW9uc1t0eXBlXSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbG9jYWwgbXV0YXRpb24gdHlwZTogXCIgKyAoYXJncy50eXBlKSArIFwiLCBnbG9iYWwgdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RvcmUuY29tbWl0KHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcblxuICAvLyBnZXR0ZXJzIGFuZCBzdGF0ZSBvYmplY3QgbXVzdCBiZSBnb3R0ZW4gbGF6aWx5XG4gIC8vIGJlY2F1c2UgdGhleSB3aWxsIGJlIGNoYW5nZWQgYnkgdm0gdXBkYXRlXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGxvY2FsLCB7XG4gICAgZ2V0dGVyczoge1xuICAgICAgZ2V0OiBub05hbWVzcGFjZVxuICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLmdldHRlcnM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYWtlTG9jYWxHZXR0ZXJzKHN0b3JlLCBuYW1lc3BhY2UpOyB9XG4gICAgfSxcbiAgICBzdGF0ZToge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXROZXN0ZWRTdGF0ZShzdG9yZS5zdGF0ZSwgcGF0aCk7IH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBsb2NhbFxufVxuXG5mdW5jdGlvbiBtYWtlTG9jYWxHZXR0ZXJzIChzdG9yZSwgbmFtZXNwYWNlKSB7XG4gIHZhciBnZXR0ZXJzUHJveHkgPSB7fTtcblxuICB2YXIgc3BsaXRQb3MgPSBuYW1lc3BhY2UubGVuZ3RoO1xuICBPYmplY3Qua2V5cyhzdG9yZS5nZXR0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgLy8gc2tpcCBpZiB0aGUgdGFyZ2V0IGdldHRlciBpcyBub3QgbWF0Y2ggdGhpcyBuYW1lc3BhY2VcbiAgICBpZiAodHlwZS5zbGljZSgwLCBzcGxpdFBvcykgIT09IG5hbWVzcGFjZSkgeyByZXR1cm4gfVxuXG4gICAgLy8gZXh0cmFjdCBsb2NhbCBnZXR0ZXIgdHlwZVxuICAgIHZhciBsb2NhbFR5cGUgPSB0eXBlLnNsaWNlKHNwbGl0UG9zKTtcblxuICAgIC8vIEFkZCBhIHBvcnQgdG8gdGhlIGdldHRlcnMgcHJveHkuXG4gICAgLy8gRGVmaW5lIGFzIGdldHRlciBwcm9wZXJ0eSBiZWNhdXNlXG4gICAgLy8gd2UgZG8gbm90IHdhbnQgdG8gZXZhbHVhdGUgdGhlIGdldHRlcnMgaW4gdGhpcyB0aW1lLlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnZXR0ZXJzUHJveHksIGxvY2FsVHlwZSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzW3R5cGVdOyB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gZ2V0dGVyc1Byb3h5XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTXV0YXRpb24gKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCkge1xuICB2YXIgZW50cnkgPSBzdG9yZS5fbXV0YXRpb25zW3R5cGVdIHx8IChzdG9yZS5fbXV0YXRpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRNdXRhdGlvbkhhbmRsZXIgKHBheWxvYWQpIHtcbiAgICBoYW5kbGVyLmNhbGwoc3RvcmUsIGxvY2FsLnN0YXRlLCBwYXlsb2FkKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyQWN0aW9uIChzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpIHtcbiAgdmFyIGVudHJ5ID0gc3RvcmUuX2FjdGlvbnNbdHlwZV0gfHwgKHN0b3JlLl9hY3Rpb25zW3R5cGVdID0gW10pO1xuICBlbnRyeS5wdXNoKGZ1bmN0aW9uIHdyYXBwZWRBY3Rpb25IYW5kbGVyIChwYXlsb2FkLCBjYikge1xuICAgIHZhciByZXMgPSBoYW5kbGVyLmNhbGwoc3RvcmUsIHtcbiAgICAgIGRpc3BhdGNoOiBsb2NhbC5kaXNwYXRjaCxcbiAgICAgIGNvbW1pdDogbG9jYWwuY29tbWl0LFxuICAgICAgZ2V0dGVyczogbG9jYWwuZ2V0dGVycyxcbiAgICAgIHN0YXRlOiBsb2NhbC5zdGF0ZSxcbiAgICAgIHJvb3RHZXR0ZXJzOiBzdG9yZS5nZXR0ZXJzLFxuICAgICAgcm9vdFN0YXRlOiBzdG9yZS5zdGF0ZVxuICAgIH0sIHBheWxvYWQsIGNiKTtcbiAgICBpZiAoIWlzUHJvbWlzZShyZXMpKSB7XG4gICAgICByZXMgPSBQcm9taXNlLnJlc29sdmUocmVzKTtcbiAgICB9XG4gICAgaWYgKHN0b3JlLl9kZXZ0b29sSG9vaykge1xuICAgICAgcmV0dXJuIHJlcy5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHN0b3JlLl9kZXZ0b29sSG9vay5lbWl0KCd2dWV4OmVycm9yJywgZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJHZXR0ZXIgKHN0b3JlLCB0eXBlLCByYXdHZXR0ZXIsIGxvY2FsKSB7XG4gIGlmIChzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0pIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gZHVwbGljYXRlIGdldHRlciBrZXk6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0gPSBmdW5jdGlvbiB3cmFwcGVkR2V0dGVyIChzdG9yZSkge1xuICAgIHJldHVybiByYXdHZXR0ZXIoXG4gICAgICBsb2NhbC5zdGF0ZSwgLy8gbG9jYWwgc3RhdGVcbiAgICAgIGxvY2FsLmdldHRlcnMsIC8vIGxvY2FsIGdldHRlcnNcbiAgICAgIHN0b3JlLnN0YXRlLCAvLyByb290IHN0YXRlXG4gICAgICBzdG9yZS5nZXR0ZXJzIC8vIHJvb3QgZ2V0dGVyc1xuICAgIClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlU3RyaWN0TW9kZSAoc3RvcmUpIHtcbiAgc3RvcmUuX3ZtLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhLiQkc3RhdGUgfSwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBhc3NlcnQoc3RvcmUuX2NvbW1pdHRpbmcsIFwiZG8gbm90IG11dGF0ZSB2dWV4IHN0b3JlIHN0YXRlIG91dHNpZGUgbXV0YXRpb24gaGFuZGxlcnMuXCIpO1xuICAgIH1cbiAgfSwgeyBkZWVwOiB0cnVlLCBzeW5jOiB0cnVlIH0pO1xufVxuXG5mdW5jdGlvbiBnZXROZXN0ZWRTdGF0ZSAoc3RhdGUsIHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgubGVuZ3RoXG4gICAgPyBwYXRoLnJlZHVjZShmdW5jdGlvbiAoc3RhdGUsIGtleSkgeyByZXR1cm4gc3RhdGVba2V5XTsgfSwgc3RhdGUpXG4gICAgOiBzdGF0ZVxufVxuXG5mdW5jdGlvbiB1bmlmeU9iamVjdFN0eWxlICh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKSB7XG4gIGlmIChpc09iamVjdCh0eXBlKSAmJiB0eXBlLnR5cGUpIHtcbiAgICBvcHRpb25zID0gcGF5bG9hZDtcbiAgICBwYXlsb2FkID0gdHlwZTtcbiAgICB0eXBlID0gdHlwZS50eXBlO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnLCAoXCJleHBlY3RzIHN0cmluZyBhcyB0aGUgdHlwZSwgYnV0IGZvdW5kIFwiICsgKHR5cGVvZiB0eXBlKSArIFwiLlwiKSk7XG4gIH1cblxuICByZXR1cm4geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkLCBvcHRpb25zOiBvcHRpb25zIH1cbn1cblxuZnVuY3Rpb24gaW5zdGFsbCAoX1Z1ZSkge1xuICBpZiAoVnVlICYmIF9WdWUgPT09IFZ1ZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAnW3Z1ZXhdIGFscmVhZHkgaW5zdGFsbGVkLiBWdWUudXNlKFZ1ZXgpIHNob3VsZCBiZSBjYWxsZWQgb25seSBvbmNlLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIFZ1ZSA9IF9WdWU7XG4gIGFwcGx5TWl4aW4oVnVlKTtcbn1cblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGdldHRpbmcgdGhlIHN0YXRlLlxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gc3RhdGVzICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgc3RhdGUgYW5kIGdldHRlcnMgZm9yIHBhcmFtLCB5b3UgY2FuIGRvIHNvbWV0aGluZyBmb3Igc3RhdGUgYW5kIGdldHRlcnMgaW4gaXQuXG4gKiBAcGFyYW0ge09iamVjdH1cbiAqL1xudmFyIG1hcFN0YXRlID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIHN0YXRlcykge1xuICB2YXIgcmVzID0ge307XG4gIG5vcm1hbGl6ZU1hcChzdGF0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRTdGF0ZSAoKSB7XG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLiRzdG9yZS5zdGF0ZTtcbiAgICAgIHZhciBnZXR0ZXJzID0gdGhpcy4kc3RvcmUuZ2V0dGVycztcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwU3RhdGUnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gbW9kdWxlLmNvbnRleHQuc3RhdGU7XG4gICAgICAgIGdldHRlcnMgPSBtb2R1bGUuY29udGV4dC5nZXR0ZXJzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuY2FsbCh0aGlzLCBzdGF0ZSwgZ2V0dGVycylcbiAgICAgICAgOiBzdGF0ZVt2YWxdXG4gICAgfTtcbiAgICAvLyBtYXJrIHZ1ZXggZ2V0dGVyIGZvciBkZXZ0b29sc1xuICAgIHJlc1trZXldLnZ1ZXggPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBjb21taXR0aW5nIHRoZSBtdXRhdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gbXV0YXRpb25zICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgYGNvbW1pdGAgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IHBhcmFtLCBpdCBjYW4gYWNjZXB0IGFudGhvciBwYXJhbXMuIFlvdSBjYW4gY29tbWl0IG11dGF0aW9uIGFuZCBkbyBhbnkgb3RoZXIgdGhpbmdzIGluIHRoaXMgZnVuY3Rpb24uIHNwZWNpYWxseSwgWW91IG5lZWQgdG8gcGFzcyBhbnRob3IgcGFyYW1zIGZyb20gdGhlIG1hcHBlZCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcE11dGF0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBtdXRhdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBub3JtYWxpemVNYXAobXV0YXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkTXV0YXRpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIC8vIEdldCB0aGUgY29tbWl0IG1ldGhvZCBmcm9tIHN0b3JlXG4gICAgICB2YXIgY29tbWl0ID0gdGhpcy4kc3RvcmUuY29tbWl0O1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBNdXRhdGlvbnMnLCBuYW1lc3BhY2UpO1xuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbW1pdCA9IG1vZHVsZS5jb250ZXh0LmNvbW1pdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtjb21taXRdLmNvbmNhdChhcmdzKSlcbiAgICAgICAgOiBjb21taXQuYXBwbHkodGhpcy4kc3RvcmUsIFt2YWxdLmNvbmNhdChhcmdzKSlcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBnZXR0aW5nIHRoZSBnZXR0ZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBnZXR0ZXJzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciBtYXBHZXR0ZXJzID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIGdldHRlcnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBub3JtYWxpemVNYXAoZ2V0dGVycykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICAvLyBUaGUgbmFtZXNwYWNlIGhhcyBiZWVuIG11dGF0ZWQgYnkgbm9ybWFsaXplTmFtZXNwYWNlXG4gICAgdmFsID0gbmFtZXNwYWNlICsgdmFsO1xuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkR2V0dGVyICgpIHtcbiAgICAgIGlmIChuYW1lc3BhY2UgJiYgIWdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwR2V0dGVycycsIG5hbWVzcGFjZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhKHZhbCBpbiB0aGlzLiRzdG9yZS5nZXR0ZXJzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGdldHRlcjogXCIgKyB2YWwpKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1t2YWxdXG4gICAgfTtcbiAgICAvLyBtYXJrIHZ1ZXggZ2V0dGVyIGZvciBkZXZ0b29sc1xuICAgIHJlc1trZXldLnZ1ZXggPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmVkdWNlIHRoZSBjb2RlIHdoaWNoIHdyaXR0ZW4gaW4gVnVlLmpzIGZvciBkaXNwYXRjaCB0aGUgYWN0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBhY3Rpb25zICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgYGRpc3BhdGNoYCBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgcGFyYW0sIGl0IGNhbiBhY2NlcHQgYW50aG9yIHBhcmFtcy4gWW91IGNhbiBkaXNwYXRjaCBhY3Rpb24gYW5kIGRvIGFueSBvdGhlciB0aGluZ3MgaW4gdGhpcyBmdW5jdGlvbi4gc3BlY2lhbGx5LCBZb3UgbmVlZCB0byBwYXNzIGFudGhvciBwYXJhbXMgZnJvbSB0aGUgbWFwcGVkIGZ1bmN0aW9uLlxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgbWFwQWN0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBhY3Rpb25zKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgbm9ybWFsaXplTWFwKGFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRBY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIC8vIGdldCBkaXNwYXRjaCBmdW5jdGlvbiBmcm9tIHN0b3JlXG4gICAgICB2YXIgZGlzcGF0Y2ggPSB0aGlzLiRzdG9yZS5kaXNwYXRjaDtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwQWN0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZGlzcGF0Y2ggPSBtb2R1bGUuY29udGV4dC5kaXNwYXRjaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtkaXNwYXRjaF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGRpc3BhdGNoLmFwcGx5KHRoaXMuJHN0b3JlLCBbdmFsXS5jb25jYXQoYXJncykpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlYmluZGluZyBuYW1lc3BhY2UgcGFyYW0gZm9yIG1hcFhYWCBmdW5jdGlvbiBpbiBzcGVjaWFsIHNjb3BlZCwgYW5kIHJldHVybiB0aGVtIGJ5IHNpbXBsZSBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSkgeyByZXR1cm4gKHtcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSlcbn0pOyB9O1xuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgbWFwXG4gKiBub3JtYWxpemVNYXAoWzEsIDIsIDNdKSA9PiBbIHsga2V5OiAxLCB2YWw6IDEgfSwgeyBrZXk6IDIsIHZhbDogMiB9LCB7IGtleTogMywgdmFsOiAzIH0gXVxuICogbm9ybWFsaXplTWFwKHthOiAxLCBiOiAyLCBjOiAzfSkgPT4gWyB7IGtleTogJ2EnLCB2YWw6IDEgfSwgeyBrZXk6ICdiJywgdmFsOiAyIH0sIHsga2V5OiAnYycsIHZhbDogMyB9IF1cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBtYXBcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplTWFwIChtYXApIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkobWFwKVxuICAgID8gbWFwLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBrZXkgfSk7IH0pXG4gICAgOiBPYmplY3Qua2V5cyhtYXApLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBtYXBba2V5XSB9KTsgfSlcbn1cblxuLyoqXG4gKiBSZXR1cm4gYSBmdW5jdGlvbiBleHBlY3QgdHdvIHBhcmFtIGNvbnRhaW5zIG5hbWVzcGFjZSBhbmQgbWFwLiBpdCB3aWxsIG5vcm1hbGl6ZSB0aGUgbmFtZXNwYWNlIGFuZCB0aGVuIHRoZSBwYXJhbSdzIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIHRoZSBuZXcgbmFtZXNwYWNlIGFuZCB0aGUgbWFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lc3BhY2UgKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmFtZXNwYWNlLCBtYXApIHtcbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG1hcCA9IG5hbWVzcGFjZTtcbiAgICAgIG5hbWVzcGFjZSA9ICcnO1xuICAgIH0gZWxzZSBpZiAobmFtZXNwYWNlLmNoYXJBdChuYW1lc3BhY2UubGVuZ3RoIC0gMSkgIT09ICcvJykge1xuICAgICAgbmFtZXNwYWNlICs9ICcvJztcbiAgICB9XG4gICAgcmV0dXJuIGZuKG5hbWVzcGFjZSwgbWFwKVxuICB9XG59XG5cbi8qKlxuICogU2VhcmNoIGEgc3BlY2lhbCBtb2R1bGUgZnJvbSBzdG9yZSBieSBuYW1lc3BhY2UuIGlmIG1vZHVsZSBub3QgZXhpc3QsIHByaW50IGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RvcmVcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWxwZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kdWxlQnlOYW1lc3BhY2UgKHN0b3JlLCBoZWxwZXIsIG5hbWVzcGFjZSkge1xuICB2YXIgbW9kdWxlID0gc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1vZHVsZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIG1vZHVsZSBuYW1lc3BhY2Ugbm90IGZvdW5kIGluIFwiICsgaGVscGVyICsgXCIoKTogXCIgKyBuYW1lc3BhY2UpKTtcbiAgfVxuICByZXR1cm4gbW9kdWxlXG59XG5cbnZhciBpbmRleF9lc20gPSB7XG4gIFN0b3JlOiBTdG9yZSxcbiAgaW5zdGFsbDogaW5zdGFsbCxcbiAgdmVyc2lvbjogJzMuMS4xJyxcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLFxuICBtYXBNdXRhdGlvbnM6IG1hcE11dGF0aW9ucyxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycyxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucyxcbiAgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnM6IGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzXG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleF9lc207XG5leHBvcnQgeyBTdG9yZSwgaW5zdGFsbCwgbWFwU3RhdGUsIG1hcE11dGF0aW9ucywgbWFwR2V0dGVycywgbWFwQWN0aW9ucywgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMgfTtcbiIsIi8qIVxuICogVnVlLmpzIHYyLjYuMTBcbiAqIChjKSAyMDE0LTIwMTkgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuLyogICovXG5cbnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyBUaGVzZSBoZWxwZXJzIHByb2R1Y2UgYmV0dGVyIFZNIGNvZGUgaW4gSlMgZW5naW5lcyBkdWUgdG8gdGhlaXJcbi8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmcuXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlLlxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJ1xuICApXG59XG5cbi8qKlxuICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsXG4gKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG4vKipcbiAqIEdldCB0aGUgcmF3IHR5cGUgc3RyaW5nIG9mIGEgdmFsdWUsIGUuZy4sIFtvYmplY3QgT2JqZWN0XS5cbiAqL1xudmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHRvUmF3VHlwZSAodmFsdWUpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSlcbn1cblxuLyoqXG4gKiBTdHJpY3Qgb2JqZWN0IHR5cGUgY2hlY2suIE9ubHkgcmV0dXJucyB0cnVlXG4gKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwICh2KSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWwgaXMgYSB2YWxpZCBhcnJheSBpbmRleC5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEFycmF5SW5kZXggKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQoU3RyaW5nKHZhbCkpO1xuICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKVxufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gKFxuICAgIGlzRGVmKHZhbCkgJiZcbiAgICB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsLmNhdGNoID09PSAnZnVuY3Rpb24nXG4gIClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcgKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGxcbiAgICA/ICcnXG4gICAgOiBBcnJheS5pc0FycmF5KHZhbCkgfHwgKGlzUGxhaW5PYmplY3QodmFsKSAmJiB2YWwudG9TdHJpbmcgPT09IF90b1N0cmluZylcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICogSWYgdGhlIGNvbnZlcnNpb24gZmFpbHMsIHJldHVybiBvcmlnaW5hbCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG5cbn1cblxuLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICovXG5mdW5jdGlvbiBtYWtlTWFwIChcbiAgc3RyLFxuICBleHBlY3RzTG93ZXJDYXNlXG4pIHtcbiAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2VcbiAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICA6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWxdOyB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuXG4gKi9cbnZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4vKipcbiAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZS5cbiAqL1xudmFyIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUgPSBtYWtlTWFwKCdrZXkscmVmLHNsb3Qsc2xvdC1zY29wZSxpcycpO1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24gKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FjaGVkIChmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnOyB9KVxufSk7XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG52YXIgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xudmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKClcbn0pO1xuXG4vKipcbiAqIFNpbXBsZSBiaW5kIHBvbHlmaWxsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCBpdCxcbiAqIGUuZy4sIFBoYW50b21KUyAxLnguIFRlY2huaWNhbGx5LCB3ZSBkb24ndCBuZWVkIHRoaXMgYW55bW9yZVxuICogc2luY2UgbmF0aXZlIGJpbmQgaXMgbm93IHBlcmZvcm1hbnQgZW5vdWdoIGluIG1vc3QgYnJvd3NlcnMuXG4gKiBCdXQgcmVtb3ZpbmcgaXQgd291bGQgbWVhbiBicmVha2luZyBjb2RlIHRoYXQgd2FzIGFibGUgdG8gcnVuIGluXG4gKiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gcG9seWZpbGxCaW5kIChmbiwgY3R4KSB7XG4gIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cblxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbmZ1bmN0aW9uIG5hdGl2ZUJpbmQgKGZuLCBjdHgpIHtcbiAgcmV0dXJuIGZuLmJpbmQoY3R4KVxufVxuXG52YXIgYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG4gID8gbmF0aXZlQmluZFxuICA6IHBvbHlmaWxsQmluZDtcblxuLyoqXG4gKiBDb252ZXJ0IGFuIEFycmF5LWxpa2Ugb2JqZWN0IHRvIGEgcmVhbCBBcnJheS5cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSAobGlzdCwgc3RhcnQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pIHtcbiAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIE1peCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kICh0bywgX2Zyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIF9mcm9tKSB7XG4gICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdG9PYmplY3QgKGFycikge1xuICB2YXIgcmVzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXJyW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuICogU3R1YmJpbmcgYXJncyB0byBtYWtlIEZsb3cgaGFwcHkgd2l0aG91dCBsZWF2aW5nIHVzZWxlc3MgdHJhbnNwaWxlZCBjb2RlXG4gKiB3aXRoIC4uLnJlc3QgKGh0dHBzOi8vZmxvdy5vcmcvYmxvZy8yMDE3LzA1LzA3L1N0cmljdC1GdW5jdGlvbi1DYWxsLUFyaXR5LykuXG4gKi9cbmZ1bmN0aW9uIG5vb3AgKGEsIGIsIGMpIHt9XG5cbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xudmFyIG5vID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsgcmV0dXJuIGZhbHNlOyB9O1xuXG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUmV0dXJuIHRoZSBzYW1lIHZhbHVlLlxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcbiAqIGlmIHRoZXkgYXJlIHBsYWluIG9iamVjdHMsIGRvIHRoZXkgaGF2ZSB0aGUgc2FtZSBzaGFwZT9cbiAqL1xuZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuICBpZiAoYSA9PT0gYikgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgaXNBcnJheUEgPSBBcnJheS5pc0FycmF5KGEpO1xuICAgICAgdmFyIGlzQXJyYXlCID0gQXJyYXkuaXNBcnJheShiKTtcbiAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5Qikge1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChlLCBiW2ldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxuICogZm91bmQgaW4gdGhlIGFycmF5IChpZiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgdGhlIGFycmF5IG11c3RcbiAqIGNvbnRhaW4gYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHNoYXBlKSwgb3IgLTEgaWYgaXQgaXMgbm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZiAoYXJyLCB2YWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBTU1JfQVRUUiA9ICdkYXRhLXNlcnZlci1yZW5kZXJlZCc7XG5cbnZhciBBU1NFVF9UWVBFUyA9IFtcbiAgJ2NvbXBvbmVudCcsXG4gICdkaXJlY3RpdmUnLFxuICAnZmlsdGVyJ1xuXTtcblxudmFyIExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJyxcbiAgJ2Vycm9yQ2FwdHVyZWQnLFxuICAnc2VydmVyUHJlZmV0Y2gnXG5dO1xuXG4vKiAgKi9cblxuXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdXBkYXRlcyBhc3luY2hyb25vdXNseS4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBWdWUgVGVzdCBVdGlsc1xuICAgKiBUaGlzIHdpbGwgc2lnbmlmaWNhbnRseSByZWR1Y2UgcGVyZm9ybWFuY2UgaWYgc2V0IHRvIGZhbHNlLlxuICAgKi9cbiAgYXN5bmM6IHRydWUsXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSk7XG5cbi8qICAqL1xuXG4vKipcbiAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cbiAqIHVzaW5nIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTMvc2VtYW50aWNzLXNjcmlwdGluZy5odG1sI3BvdGVudGlhbGN1c3RvbWVsZW1lbnRuYW1lXG4gKiBza2lwcGluZyBcXHUxMDAwMC1cXHVFRkZGRiBkdWUgdG8gaXQgZnJlZXppbmcgdXAgUGhhbnRvbUpTXG4gKi9cbnZhciB1bmljb2RlUmVnRXhwID0gL2EtekEtWlxcdTAwQjdcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDNGLVxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkQvO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICovXG5mdW5jdGlvbiBpc1Jlc2VydmVkIChzdHIpIHtcbiAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NUZcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZGVmIChvYmosIGtleSwgdmFsLCBlbnVtZXJhYmxlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIHZhbHVlOiB2YWwsXG4gICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSBzaW1wbGUgcGF0aC5cbiAqL1xudmFyIGJhaWxSRSA9IG5ldyBSZWdFeHAoKFwiW15cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIi4kX1xcXFxkXVwiKSk7XG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgaWYgKGJhaWxSRS50ZXN0KHBhdGgpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb2JqKSB7IHJldHVybiB9XG4gICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH1cbn1cblxuLyogICovXG5cbi8vIGNhbiB3ZSB1c2UgX19wcm90b19fP1xudmFyIGhhc1Byb3RvID0gJ19fcHJvdG9fXycgaW4ge307XG5cbi8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbnZhciBpbldlZXggPSB0eXBlb2YgV1hFbnZpcm9ubWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgISFXWEVudmlyb25tZW50LnBsYXRmb3JtO1xudmFyIHdlZXhQbGF0Zm9ybSA9IGluV2VleCAmJiBXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCk7XG52YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbnZhciBpc0lFID0gVUEgJiYgL21zaWV8dHJpZGVudC8udGVzdChVQSk7XG52YXIgaXNJRTkgPSBVQSAmJiBVQS5pbmRleE9mKCdtc2llIDkuMCcpID4gMDtcbnZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcbnZhciBpc0FuZHJvaWQgPSAoVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMCkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnKTtcbnZhciBpc0lPUyA9IChVQSAmJiAvaXBob25lfGlwYWR8aXBvZHxpb3MvLnRlc3QoVUEpKSB8fCAod2VleFBsYXRmb3JtID09PSAnaW9zJyk7XG52YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXFwvXFxkKy8udGVzdChVQSkgJiYgIWlzRWRnZTtcbnZhciBpc1BoYW50b21KUyA9IFVBICYmIC9waGFudG9tanMvLnRlc3QoVUEpO1xudmFyIGlzRkYgPSBVQSAmJiBVQS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTZXQ7XG4gIH0oKSk7XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtO1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCsrO1xuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luY1xuICAgIC8vIHdlIG5lZWQgdG8gc29ydCB0aGVtIG5vdyB0byBtYWtlIHN1cmUgdGhleSBmaXJlIGluIGNvcnJlY3RcbiAgICAvLyBvcmRlclxuICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyBUaGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIG9ubHkgb25lIHdhdGNoZXJcbi8vIGNhbiBiZSBldmFsdWF0ZWQgYXQgYSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG52YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAodGFyZ2V0KSB7XG4gIHRhcmdldFN0YWNrLnB1c2godGFyZ2V0KTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgdGFyZ2V0U3RhY2sucG9wKCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXRTdGFja1t0YXJnZXRTdGFjay5sZW5ndGggLSAxXTtcbn1cblxuLyogICovXG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlIChcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgdGV4dCxcbiAgZWxtLFxuICBjb250ZXh0LFxuICBjb21wb25lbnRPcHRpb25zLFxuICBhc3luY0ZhY3Rvcnlcbikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLmVsbSA9IGVsbTtcbiAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5mbkNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5PcHRpb25zID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuU2NvcGVJZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbiAgdGhpcy5hc3luY0ZhY3RvcnkgPSBhc3luY0ZhY3Rvcnk7XG4gIHRoaXMuYXN5bmNNZXRhID0gdW5kZWZpbmVkO1xuICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5jaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVk5vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxudmFyIGNyZWF0ZUVtcHR5Vk5vZGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICBpZiAoIHRleHQgPT09IHZvaWQgMCApIHRleHQgPSAnJztcblxuICB2YXIgbm9kZSA9IG5ldyBWTm9kZSgpO1xuICBub2RlLnRleHQgPSB0ZXh0O1xuICBub2RlLmlzQ29tbWVudCA9IHRydWU7XG4gIHJldHVybiBub2RlXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkge1xuICByZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyh2YWwpKVxufVxuXG4vLyBvcHRpbWl6ZWQgc2hhbGxvdyBjbG9uZVxuLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zc1xuLy8gbXVsdGlwbGUgcmVuZGVycywgY2xvbmluZyB0aGVtIGF2b2lkcyBlcnJvcnMgd2hlbiBET00gbWFuaXB1bGF0aW9ucyByZWx5XG4vLyBvbiB0aGVpciBlbG0gcmVmZXJlbmNlLlxuZnVuY3Rpb24gY2xvbmVWTm9kZSAodm5vZGUpIHtcbiAgdmFyIGNsb25lZCA9IG5ldyBWTm9kZShcbiAgICB2bm9kZS50YWcsXG4gICAgdm5vZGUuZGF0YSxcbiAgICAvLyAjNzk3NVxuICAgIC8vIGNsb25lIGNoaWxkcmVuIGFycmF5IHRvIGF2b2lkIG11dGF0aW5nIG9yaWdpbmFsIGluIGNhc2Ugb2YgY2xvbmluZ1xuICAgIC8vIGEgY2hpbGQuXG4gICAgdm5vZGUuY2hpbGRyZW4gJiYgdm5vZGUuY2hpbGRyZW4uc2xpY2UoKSxcbiAgICB2bm9kZS50ZXh0LFxuICAgIHZub2RlLmVsbSxcbiAgICB2bm9kZS5jb250ZXh0LFxuICAgIHZub2RlLmNvbXBvbmVudE9wdGlvbnMsXG4gICAgdm5vZGUuYXN5bmNGYWN0b3J5XG4gICk7XG4gIGNsb25lZC5ucyA9IHZub2RlLm5zO1xuICBjbG9uZWQuaXNTdGF0aWMgPSB2bm9kZS5pc1N0YXRpYztcbiAgY2xvbmVkLmtleSA9IHZub2RlLmtleTtcbiAgY2xvbmVkLmlzQ29tbWVudCA9IHZub2RlLmlzQ29tbWVudDtcbiAgY2xvbmVkLmZuQ29udGV4dCA9IHZub2RlLmZuQ29udGV4dDtcbiAgY2xvbmVkLmZuT3B0aW9ucyA9IHZub2RlLmZuT3B0aW9ucztcbiAgY2xvbmVkLmZuU2NvcGVJZCA9IHZub2RlLmZuU2NvcGVJZDtcbiAgY2xvbmVkLmFzeW5jTWV0YSA9IHZub2RlLmFzeW5jTWV0YTtcbiAgY2xvbmVkLmlzQ2xvbmVkID0gdHJ1ZTtcbiAgcmV0dXJuIGNsb25lZFxufVxuXG4vKlxuICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1xuXG52YXIgbWV0aG9kc1RvUGF0Y2ggPSBbXG4gICdwdXNoJyxcbiAgJ3BvcCcsXG4gICdzaGlmdCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZScsXG4gICdzb3J0JyxcbiAgJ3JldmVyc2UnXG5dO1xuXG4vKipcbiAqIEludGVyY2VwdCBtdXRhdGluZyBtZXRob2RzIGFuZCBlbWl0IGV2ZW50c1xuICovXG5tZXRob2RzVG9QYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgdmFyIG9iID0gdGhpcy5fX29iX187XG4gICAgdmFyIGluc2VydGVkO1xuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlICdwdXNoJzpcbiAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChpbnNlcnRlZCkgeyBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyB9XG4gICAgLy8gbm90aWZ5IGNoYW5nZVxuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pO1xufSk7XG5cbi8qICAqL1xuXG52YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuLyoqXG4gKiBJbiBzb21lIGNhc2VzIHdlIG1heSB3YW50IHRvIGRpc2FibGUgb2JzZXJ2YXRpb24gaW5zaWRlIGEgY29tcG9uZW50J3NcbiAqIHVwZGF0ZSBjb21wdXRhdGlvbi5cbiAqL1xudmFyIHNob3VsZE9ic2VydmUgPSB0cnVlO1xuXG5mdW5jdGlvbiB0b2dnbGVPYnNlcnZpbmcgKHZhbHVlKSB7XG4gIHNob3VsZE9ic2VydmUgPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBPYnNlcnZlciBjbGFzcyB0aGF0IGlzIGF0dGFjaGVkIHRvIGVhY2ggb2JzZXJ2ZWRcbiAqIG9iamVjdC4gT25jZSBhdHRhY2hlZCwgdGhlIG9ic2VydmVyIGNvbnZlcnRzIHRoZSB0YXJnZXRcbiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2ggdXBkYXRlcy5cbiAqL1xudmFyIE9ic2VydmVyID0gZnVuY3Rpb24gT2JzZXJ2ZXIgKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7XG4gIHRoaXMudm1Db3VudCA9IDA7XG4gIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBpZiAoaGFzUHJvdG8pIHtcbiAgICAgIHByb3RvQXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29weUF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICB9XG4gICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FsayB0aHJvdWdoIGFsbCBwcm9wZXJ0aWVzIGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgaW50ZXJjZXB0aW5nXG4gKiB0aGUgcHJvdG90eXBlIGNoYWluIHVzaW5nIF9fcHJvdG9fX1xuICovXG5mdW5jdGlvbiBwcm90b0F1Z21lbnQgKHRhcmdldCwgc3JjKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbn1cblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICogaGlkZGVuIHByb3BlcnRpZXMuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjb3B5QXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2I7XG4gIGlmIChoYXNPd24odmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICB9IGVsc2UgaWYgKFxuICAgIHNob3VsZE9ic2VydmUgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUkJDEgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXIsXG4gIHNoYWxsb3dcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG4gIGlmICgoIWdldHRlciB8fCBzZXR0ZXIpICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICB2YWwgPSBvYmpba2V5XTtcbiAgfVxuXG4gIHZhciBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XG4gICAgICAgIGN1c3RvbVNldHRlcigpO1xuICAgICAgfVxuICAgICAgLy8gIzc5ODE6IGZvciBhY2Nlc3NvciBwcm9wZXJ0aWVzIHdpdGhvdXQgc2V0dGVyXG4gICAgICBpZiAoZ2V0dGVyICYmICFzZXR0ZXIpIHsgcmV0dXJuIH1cbiAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gbmV3VmFsO1xuICAgICAgfVxuICAgICAgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUobmV3VmFsKTtcbiAgICAgIGRlcC5ub3RpZnkoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IG9uIGFuIG9iamVjdC4gQWRkcyB0aGUgbmV3IHByb3BlcnR5IGFuZFxuICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndFxuICogYWxyZWFkeSBleGlzdC5cbiAqL1xuZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBzZXQgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5sZW5ndGggPSBNYXRoLm1heCh0YXJnZXQubGVuZ3RoLCBrZXkpO1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxLCB2YWwpO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoa2V5IGluIHRhcmdldCAmJiAhKGtleSBpbiBPYmplY3QucHJvdG90eXBlKSkge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBkZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICBvYi5kZXAubm90aWZ5KCk7XG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBEZWxldGUgYSBwcm9wZXJ0eSBhbmQgdHJpZ2dlciBjaGFuZ2UgaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBkZWwgKHRhcmdldCwga2V5KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBkZWxldGluZyBwcm9wZXJ0aWVzIG9uIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJy0ganVzdCBzZXQgaXQgdG8gbnVsbC4nXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkpIHtcbiAgICByZXR1cm5cbiAgfVxuICBkZWxldGUgdGFyZ2V0W2tleV07XG4gIGlmICghb2IpIHtcbiAgICByZXR1cm5cbiAgfVxuICBvYi5kZXAubm90aWZ5KCk7XG59XG5cbi8qKlxuICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2VcbiAqIHdlIGNhbm5vdCBpbnRlcmNlcHQgYXJyYXkgZWxlbWVudCBhY2Nlc3MgbGlrZSBwcm9wZXJ0eSBnZXR0ZXJzLlxuICovXG5mdW5jdGlvbiBkZXBlbmRBcnJheSAodmFsdWUpIHtcbiAgZm9yICh2YXIgZSA9ICh2b2lkIDApLCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGUgPSB2YWx1ZVtpXTtcbiAgICBlICYmIGUuX19vYl9fICYmIGUuX19vYl9fLmRlcC5kZXBlbmQoKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgZGVwZW5kQXJyYXkoZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIE9wdGlvbiBvdmVyd3JpdGluZyBzdHJhdGVnaWVzIGFyZSBmdW5jdGlvbnMgdGhhdCBoYW5kbGVcbiAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXG4gKiB2YWx1ZSBpbnRvIHRoZSBmaW5hbCB2YWx1ZS5cbiAqL1xudmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG5cbi8qKlxuICogT3B0aW9ucyB3aXRoIHJlc3RyaWN0aW9uc1xuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuXG4gIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgPyBSZWZsZWN0Lm93bktleXMoZnJvbSlcbiAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgLy8gaW4gY2FzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQuLi5cbiAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdG9WYWwgIT09IGZyb21WYWwgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QodG9WYWwpICYmXG4gICAgICBpc1BsYWluT2JqZWN0KGZyb21WYWwpXG4gICAgKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbClcbiAgfVxuXG4gIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKVxufTtcblxuLyoqXG4gKiBIb29rcyBhbmQgcHJvcHMgYXJlIG1lcmdlZCBhcyBhcnJheXMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlSG9vayAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWxcbikge1xuICB2YXIgcmVzID0gY2hpbGRWYWxcbiAgICA/IHBhcmVudFZhbFxuICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKVxuICAgICAgICA/IGNoaWxkVmFsXG4gICAgICAgIDogW2NoaWxkVmFsXVxuICAgIDogcGFyZW50VmFsO1xuICByZXR1cm4gcmVzXG4gICAgPyBkZWR1cGVIb29rcyhyZXMpXG4gICAgOiByZXNcbn1cblxuZnVuY3Rpb24gZGVkdXBlSG9va3MgKGhvb2tzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChyZXMuaW5kZXhPZihob29rc1tpXSkgPT09IC0xKSB7XG4gICAgICByZXMucHVzaChob29rc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgaWYgKGNoaWxkVmFsKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0ge307XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGZvciAodmFyIGtleSQxIGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5JDFdO1xuICAgIGlmIChwYXJlbnQgJiYgIUFycmF5LmlzQXJyYXkocGFyZW50KSkge1xuICAgICAgcGFyZW50ID0gW3BhcmVudF07XG4gICAgfVxuICAgIHJldFtrZXkkMV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gIH1cbiAgcmV0dXJuIHJldFxufTtcblxuLyoqXG4gKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICovXG5zdHJhdHMucHJvcHMgPVxuc3RyYXRzLm1ldGhvZHMgPVxuc3RyYXRzLmluamVjdCA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICBpZiAoY2hpbGRWYWwgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZSAobmFtZSkge1xuICBpZiAoIW5ldyBSZWdFeHAoKFwiXlthLXpBLVpdW1xcXFwtXFxcXC4wLTlfXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKiRcIikpLnRlc3QobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6IFwiJyArIG5hbWUgKyAnXCIuIENvbXBvbmVudCBuYW1lcyAnICtcbiAgICAgICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJ1xuICAgICk7XG4gIH1cbiAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICdpZDogJyArIG5hbWVcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHtcbiAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKCFwcm9wcykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBpLCB2YWwsIG5hbWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFsID0gcHJvcHNbaV07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgIHJlc1tuYW1lXSA9IHsgdHlwZTogbnVsbCB9O1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHByb3BzKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0IChvcHRpb25zLCB2bSkge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSB7IGZyb206IGluamVjdFtpXSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07XG4gICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyBleHRlbmQoeyBmcm9tOiBrZXkgfSwgdmFsKVxuICAgICAgICA6IHsgZnJvbTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImluamVjdFxcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShpbmplY3QpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiQkMSA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmJCQxID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmJCQxLCB1cGRhdGU6IGRlZiQkMSB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplSW5qZWN0KGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuXG4gIC8vIEFwcGx5IGV4dGVuZHMgYW5kIG1peGlucyBvbiB0aGUgY2hpbGQgb3B0aW9ucyxcbiAgLy8gYnV0IG9ubHkgaWYgaXQgaXMgYSByYXcgb3B0aW9ucyBvYmplY3QgdGhhdCBpc24ndFxuICAvLyB0aGUgcmVzdWx0IG9mIGFub3RoZXIgbWVyZ2VPcHRpb25zIGNhbGwuXG4gIC8vIE9ubHkgbWVyZ2VkIG9wdGlvbnMgaGFzIHRoZSBfYmFzZSBwcm9wZXJ0eS5cbiAgaWYgKCFjaGlsZC5fYmFzZSkge1xuICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7XG4gICAgfVxuICAgIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgd2FybihcbiAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wIChcbiAga2V5LFxuICBwcm9wT3B0aW9ucyxcbiAgcHJvcHNEYXRhLFxuICB2bVxuKSB7XG4gIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTtcbiAgdmFyIGFic2VudCA9ICFoYXNPd24ocHJvcHNEYXRhLCBrZXkpO1xuICB2YXIgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTtcbiAgLy8gYm9vbGVhbiBjYXN0aW5nXG4gIHZhciBib29sZWFuSW5kZXggPSBnZXRUeXBlSW5kZXgoQm9vbGVhbiwgcHJvcC50eXBlKTtcbiAgaWYgKGJvb2xlYW5JbmRleCA+IC0xKSB7XG4gICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSB7XG4gICAgICAvLyBvbmx5IGNhc3QgZW1wdHkgc3RyaW5nIC8gc2FtZSBuYW1lIHRvIGJvb2xlYW4gaWZcbiAgICAgIC8vIGJvb2xlYW4gaGFzIGhpZ2hlciBwcmlvcml0eVxuICAgICAgdmFyIHN0cmluZ0luZGV4ID0gZ2V0VHlwZUluZGV4KFN0cmluZywgcHJvcC50eXBlKTtcbiAgICAgIGlmIChzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXgpIHtcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSBnZXRQcm9wRGVmYXVsdFZhbHVlKHZtLCBwcm9wLCBrZXkpO1xuICAgIC8vIHNpbmNlIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgZnJlc2ggY29weSxcbiAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICB2YXIgcHJldlNob3VsZE9ic2VydmUgPSBzaG91bGRPYnNlcnZlO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICB0b2dnbGVPYnNlcnZpbmcocHJldlNob3VsZE9ic2VydmUpO1xuICB9XG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgLy8gc2tpcCB2YWxpZGF0aW9uIGZvciB3ZWV4IHJlY3ljbGUtbGlzdCBjaGlsZCBjb21wb25lbnQgcHJvcHNcbiAgICAhKGZhbHNlKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHdhcm4oXG4gICAgICBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICB2YXIgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgdmFyIGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIGV4cGVjdGVkVmFsdWU7XG4gIH1cbiAgbWVzc2FnZSArPSBcIiwgZ290IFwiICsgcmVjZWl2ZWRUeXBlICsgXCIgXCI7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwid2l0aCB2YWx1ZSBcIiArIHJlY2VpdmVkVmFsdWUgKyBcIi5cIjtcbiAgfVxuICByZXR1cm4gbWVzc2FnZVxufVxuXG5mdW5jdGlvbiBzdHlsZVZhbHVlICh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gKFwiXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIilcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgIHJldHVybiAoXCJcIiArIChOdW1iZXIodmFsdWUpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUgKHZhbHVlKSB7XG4gIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSlcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLlxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICBpZiAodm0pIHtcbiAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgdmFyIHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpICYmICFyZXMuX2hhbmRsZWQpIHtcbiAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgIC8vIGF2b2lkIGNhdGNoIHRyaWdnZXJpbmcgbXVsdGlwbGUgdGltZXMgd2hlbiBuZXN0ZWQgY2FsbHNcbiAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbiAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgIGlmIChlICE9PSBlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybigoXCJFcnJvciBpbiBcIiArIGluZm8gKyBcIjogXFxcIlwiICsgKGVyci50b1N0cmluZygpKSArIFwiXFxcIlwiKSwgdm0pO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVyclxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgaXNVc2luZ01pY3JvVGFzayA9IGZhbHNlO1xuXG52YXIgY2FsbGJhY2tzID0gW107XG52YXIgcGVuZGluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29waWVzW2ldKCk7XG4gIH1cbn1cblxuLy8gSGVyZSB3ZSBoYXZlIGFzeW5jIGRlZmVycmluZyB3cmFwcGVycyB1c2luZyBtaWNyb3Rhc2tzLlxuLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cbi8vIEhvd2V2ZXIsIGl0IGhhcyBzdWJ0bGUgcHJvYmxlbXMgd2hlbiBzdGF0ZSBpcyBjaGFuZ2VkIHJpZ2h0IGJlZm9yZSByZXBhaW50XG4vLyAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS5cbi8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xuLy8gdGhhdCBjYW5ub3QgYmUgY2lyY3VtdmVudGVkIChlLmcuICM3MTA5LCAjNzE1MywgIzc1NDYsICM3ODM0LCAjODEwOSkuXG4vLyBTbyB3ZSBub3cgdXNlIG1pY3JvdGFza3MgZXZlcnl3aGVyZSwgYWdhaW4uXG4vLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3Ncbi8vIHdoZXJlIG1pY3JvdGFza3MgaGF2ZSB0b28gaGlnaCBhIHByaW9yaXR5IGFuZCBmaXJlIGluIGJldHdlZW4gc3VwcG9zZWRseVxuLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwLCB3aGljaCBoYXZlIHdvcmthcm91bmRzKVxuLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXG52YXIgdGltZXJGdW5jO1xuXG4vLyBUaGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4vLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cbi8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4vLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4vLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgfTtcbiAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7XG59IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gIC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIC8vIFVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4gIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAvLyAoIzY0NjYgTXV0YXRpb25PYnNlcnZlciBpcyB1bnJlbGlhYmxlIGluIElFMTEpXG4gIHZhciBjb3VudGVyID0gMTtcbiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9KTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICAvLyBGYWxsYmFjayB0byBzZXRJbW1lZGlhdGUuXG4gIC8vIFRlY2hpbmljYWxseSBpdCBsZXZlcmFnZXMgdGhlIChtYWNybykgdGFzayBxdWV1ZSxcbiAgLy8gYnV0IGl0IGlzIHN0aWxsIGEgYmV0dGVyIGNob2ljZSB0aGFuIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoZmx1c2hDYWxsYmFja3MsIDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayAoY2IsIGN0eCkge1xuICB2YXIgX3Jlc29sdmU7XG4gIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwoY3R4KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZSwgY3R4LCAnbmV4dFRpY2snKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF9yZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZShjdHgpO1xuICAgIH1cbiAgfSk7XG4gIGlmICghcGVuZGluZykge1xuICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgIHRpbWVyRnVuYygpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pXG4gIH1cbn1cblxuLyogICovXG5cbi8qIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBQcm94eSAqL1xuXG52YXIgaW5pdFByb3h5O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xuICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgJ2VpdGhlciBpbiB0aGUgZGF0YSBvcHRpb24sIG9yIGZvciBjbGFzcy1iYXNlZCBjb21wb25lbnRzLCBieSAnICtcbiAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgd2FyblJlc2VydmVkUHJlZml4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscycgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvYXBpLyNkYXRhJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0Jyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fFxuICAgICAgICAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJ18nICYmICEoa2V5IGluIHRhcmdldC4kZGF0YSkpO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgfVxuICB9O1xuXG4gIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm94eSBoYW5kbGVyIHRvIHVzZVxuICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgPyBnZXRIYW5kbGVyXG4gICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UgKHZhbCkge1xuICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG4gIHNlZW5PYmplY3RzLmNsZWFyKCk7XG59XG5cbmZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG4gIHZhciBpLCBrZXlzO1xuICB2YXIgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpO1xuICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcGVyZiAmJlxuICAgIHBlcmYubWFyayAmJlxuICAgIHBlcmYubWVhc3VyZSAmJlxuICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICApIHtcbiAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICBwZXJmLm1lYXN1cmUobmFtZSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICAvLyBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSlcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIilcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiB7fVxuICB9XG4gIHZhciBzbG90cyA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgfVxuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIG5hbWUgPSBkYXRhLnNsb3Q7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoXG4gIHNsb3RzLFxuICBub3JtYWxTbG90cyxcbiAgcHJldlNsb3RzXG4pIHtcbiAgdmFyIHJlcztcbiAgdmFyIGhhc05vcm1hbFNsb3RzID0gT2JqZWN0LmtleXMobm9ybWFsU2xvdHMpLmxlbmd0aCA+IDA7XG4gIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xuICB2YXIga2V5ID0gc2xvdHMgJiYgc2xvdHMuJGtleTtcbiAgaWYgKCFzbG90cykge1xuICAgIHJlcyA9IHt9O1xuICB9IGVsc2UgaWYgKHNsb3RzLl9ub3JtYWxpemVkKSB7XG4gICAgLy8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlXG4gICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gIH0gZWxzZSBpZiAoXG4gICAgaXNTdGFibGUgJiZcbiAgICBwcmV2U2xvdHMgJiZcbiAgICBwcmV2U2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmXG4gICAga2V5ID09PSBwcmV2U2xvdHMuJGtleSAmJlxuICAgICFoYXNOb3JtYWxTbG90cyAmJlxuICAgICFwcmV2U2xvdHMuJGhhc05vcm1hbFxuICApIHtcbiAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXG4gICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXG4gICAgcmV0dXJuIHByZXZTbG90c1xuICB9IGVsc2Uge1xuICAgIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7XG4gICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmVzW2tleSQxXSA9IG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSQxLCBzbG90c1trZXkkMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7XG4gICAgaWYgKCEoa2V5JDIgaW4gcmVzKSkge1xuICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpO1xuICAgIH1cbiAgfVxuICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICBpZiAoc2xvdHMgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzbG90cykpIHtcbiAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICB9XG4gIGRlZihyZXMsICckc3RhYmxlJywgaXNTdGFibGUpO1xuICBkZWYocmVzLCAnJGtleScsIGtleSk7XG4gIGRlZihyZXMsICckaGFzTm9ybWFsJywgaGFzTm9ybWFsU2xvdHMpO1xuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICA/IFtyZXNdIC8vIHNpbmdsZSB2bm9kZVxuICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgcmVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgcmVzWzBdLmlzQ29tbWVudCkgLy8gIzk2NThcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgaWYgKCEoY2FtZWxpemVkS2V5IGluIGhhc2gpICYmICEoaHlwaGVuYXRlZEtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzLFxuICAvLyB0aGUgZm9sbG93aW5nIGFyZSBhZGRlZCBpbiAyLjZcbiAgaGFzRHluYW1pY0tleXMsXG4gIGNvbnRlbnRIYXNoS2V5XG4pIHtcbiAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNsb3QgPSBmbnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCByZXMsIGhhc0R5bmFtaWNLZXlzKTtcbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7XG4gICAgKHJlcykuJGtleSA9IGNvbnRlbnRIYXNoS2V5O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmREeW5hbWljS2V5cyAoYmFzZU9iaiwgdmFsdWVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleSA9IHZhbHVlc1tpXTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5KSB7XG4gICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgIT09ICcnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCBpcyBhIHNwZWljYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICB3YXJuKFxuICAgICAgICAoXCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiBcIiArIGtleSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlT2JqXG59XG5cbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5cztcbiAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbTtcbiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBkYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCAoe1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSlcbiAgICB9XG4gIH0pKTtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuICB9XG4gIGlmIChkYXRhLnNsb3QpIHtcbiAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgfVxuICByZXR1cm4gY2xvbmVcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyAodG8sIGZyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbnZhciBjb21wb25lbnRWTm9kZUhvb2tzID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgaWYgKFxuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlXG4gICAgKSB7XG4gICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgICBjb21wb25lbnRWTm9kZUhvb2tzLnByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICApO1xuICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7XG5cbiAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxuICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3RcblxuICAgIC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICBkYXRhID0ge307XG4gICAgaWYgKHNsb3QpIHtcbiAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9LFxuICAgIGFzeW5jRmFjdG9yeVxuICApO1xuXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgcGFyZW50OiBwYXJlbnRcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyAoZGF0YSkge1xuICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgdmFyIHRvTWVyZ2UgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gICAgaWYgKGV4aXN0aW5nICE9PSB0b01lcmdlICYmICEoZXhpc3RpbmcgJiYgZXhpc3RpbmcuX21lcmdlZCkpIHtcbiAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChmMSwgZjIpIHtcbiAgdmFyIG1lcmdlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgLy8gZmxvdyBjb21wbGFpbnMgYWJvdXQgZXh0cmEgYXJncyB3aGljaCBpcyB3aHkgd2UgdXNlIGFueVxuICAgIGYxKGEsIGIpO1xuICAgIGYyKGEsIGIpO1xuICB9O1xuICBtZXJnZWQuX21lcmdlZCA9IHRydWU7XG4gIHJldHVybiBtZXJnZWRcbn1cblxuLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgdmFyIGV2ZW50ID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCkgfHwgJ2lucHV0J1xuICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgdmFyIGV4aXN0aW5nID0gb25bZXZlbnRdO1xuICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICBpZiAoaXNEZWYoZXhpc3RpbmcpKSB7XG4gICAgaWYgKFxuICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZylcbiAgICAgICAgPyBleGlzdGluZy5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTFcbiAgICAgICAgOiBleGlzdGluZyAhPT0gY2FsbGJhY2tcbiAgICApIHtcbiAgICAgIG9uW2V2ZW50XSA9IFtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gY2FsbGJhY2s7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcbnZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGlzVHJ1ZShhbHdheXNOb3JtYWxpemUpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFO1xuICB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICApIHtcbiAgICB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgdXNpbmcgbm9uLXByaW1pdGl2ZSB2YWx1ZSBhcyBrZXksICcgK1xuICAgICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IChjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucykgfHwgY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xuICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAvLyBwbGF0Zm9ybSBidWlsdC1pbiBlbGVtZW50c1xuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbnZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmIChfcGFyZW50Vm5vZGUpIHtcbiAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdm0uJHNsb3RzLFxuICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVlcyBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgICAgICAgICAgICA/IChcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCIpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcbiAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkluYWN0aXZlVHJlZSAodm0pIHtcbiAgd2hpbGUgKHZtICYmICh2bSA9IHZtLiRwYXJlbnQpKSB7XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7XG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgaWYgKCF2bS5faW5hY3RpdmUpIHtcbiAgICB2bS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIHZhciBpbmZvID0gaG9vayArIFwiIGhvb2tcIjtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGhhbmRsZXJzW2ldLCB2bSwgbnVsbCwgdm0sIGluZm8pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbn1cblxuLyogICovXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgICAgICBmbHVzaFNjaGVkdWxlclF1ZXVlKCk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5cblxudmFyIHVpZCQyID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgICB0aGlzLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICB9XG4gIHRoaXMuY2IgPSBjYjtcbiAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuICB0aGlzLmRlcHMgPSBbXTtcbiAgdGhpcy5uZXdEZXBzID0gW107XG4gIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLmV4cHJlc3Npb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBleHBPckZuLnRvU3RyaW5nKClcbiAgICA6ICcnO1xuICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlO1xuICB2YXIgdm0gPSB0aGlzLnZtO1xuICB0cnkge1xuICAgIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh2bSwgdm0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBkZXAgPSB0aGlzLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRtcCA9IHRoaXMuZGVwSWRzO1xuICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzO1xuICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBJZHMuY2xlYXIoKTtcbiAgdG1wID0gdGhpcy5kZXBzO1xuICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gIHRoaXMubmV3RGVwcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHRoaXMubGF6eSkge1xuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRoaXMuc3luYykge1xuICAgIHRoaXMucnVuKCk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWVXYXRjaGVyKHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fFxuICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG4gICAgICAvLyBoYXZlIG11dGF0ZWQuXG4gICAgICBpc09iamVjdCh2YWx1ZSkgfHxcbiAgICAgIHRoaXMuZGVlcFxuICAgICkge1xuICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHRoaXMudm0sIChcImNhbGxiYWNrIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUm9vdCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyB0eXBlIFxcXCJcIiArICh0eXBlb2YgbWV0aG9kc1trZXldKSArIFwiXFxcIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICBcIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICB2YXIgaGFuZGxlciA9IHdhdGNoW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXJbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGhhbmRsZXIsXG4gIG9wdGlvbnNcbikge1xuICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTtcbiAgfVxuICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkge1xuICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4gIC8vIHRoZSBvYmplY3QgaGVyZS5cbiAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhIH07XG4gIHZhciBwcm9wc0RlZiA9IHt9O1xuICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB2bSwgKFwiY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCQzID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjEwJztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSA9IG1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTtcblxudmFyIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICA/ICdmYWxzZSdcbiAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAndHJ1ZSdcbn07XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoaXNEZWYocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGlzRGVmKGNoaWxkLmNsYXNzKVxuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cbnZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG4gIGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG4gIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gIGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG4gIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcbiAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuICB0YWdOYW1lOiB0YWdOYW1lLFxuICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gIHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGVcbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAocGFyZW50RWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAoaXNEZWYoY2gudGFnKSkge1xuICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKGNoKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVGV4dCBub2RlXG4gICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayAodm5vZGUsIHJtKSB7XG4gICAgaWYgKGlzRGVmKHJtKSB8fCBpc0RlZih2bm9kZS5kYXRhKSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgaWYgKGlzRGVmKHJtKSkge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgcmVjdXJzaXZlbHkgcGFzc2VkIGRvd24gcm0gY2FsbGJhY2tcbiAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxuICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmdcbiAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICBpKHZub2RlLCBybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBybSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICB2YXIgb2xkU3RhcnRJZHggPSAwO1xuICAgIHZhciBuZXdTdGFydElkeCA9IDA7XG4gICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtO1xuXG4gICAgLy8gcmVtb3ZlT25seSBpcyBhIHNwZWNpYWwgZmxhZyB1c2VkIG9ubHkgYnkgPHRyYW5zaXRpb24tZ3JvdXA+XG4gICAgLy8gdG8gZW5zdXJlIHJlbW92ZWQgZWxlbWVudHMgc3RheSBpbiBjb3JyZWN0IHJlbGF0aXZlIHBvc2l0aW9uc1xuICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG4gICAgdmFyIGNhbk1vdmUgPSAhcmVtb3ZlT25seTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja0R1cGxpY2F0ZUtleXMobmV3Q2gpO1xuICAgIH1cblxuICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgICBpZiAoaXNVbmRlZihvbGRTdGFydFZub2RlKSkge1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07IC8vIFZub2RlIGhhcyBiZWVuIG1vdmVkIGxlZnRcbiAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGRFbmRWbm9kZSkpIHtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgaWR4SW5PbGQgPSBpc0RlZihuZXdTdGFydFZub2RlLmtleSlcbiAgICAgICAgICA/IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XVxuICAgICAgICAgIDogZmluZElkeEluT2xkKG5ld1N0YXJ0Vm5vZGUsIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7IC8vIE5ldyBlbGVtZW50XG4gICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGVUb01vdmUgPSBvbGRDaFtpZHhJbk9sZF07XG4gICAgICAgICAgaWYgKHNhbWVWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGNoVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICAgIG9sZENoW2lkeEluT2xkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCB2bm9kZVRvTW92ZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudFxuICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5LZXlzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHtcbiAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiRHVwbGljYXRlIGtleXMgZGV0ZWN0ZWQ6ICdcIiArIGtleSArIFwiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLlwiKSxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZElkeEluT2xkIChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkge1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG9sZENoW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSkgeyByZXR1cm4gaSB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAoXG4gICAgb2xkVm5vZGUsXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXgsXG4gICAgcmVtb3ZlT25seVxuICApIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gY2xvbmUgcmV1c2VkIHZub2RlXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblxuICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICBpc1RydWUob2xkVm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpXG4gICAgKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgW29sZFZub2RlXSwgMCwgMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkge1xuICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaXNJbml0aWFsUGF0Y2gpO1xuICAgIHJldHVybiB2bm9kZS5lbG1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGRpcmVjdGl2ZXMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgdXBkYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICBkZXN0cm95OiBmdW5jdGlvbiB1bmJpbmREaXJlY3RpdmVzICh2bm9kZSkge1xuICAgIHVwZGF0ZURpcmVjdGl2ZXModm5vZGUsIGVtcHR5Tm9kZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgZGlyLm9sZEFyZyA9IG9sZERpci5hcmc7XG4gICAgICBjYWxsSG9vayQxKGRpciwgJ3VwZGF0ZScsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmNvbXBvbmVudFVwZGF0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aEluc2VydC5sZW5ndGgpIHtcbiAgICB2YXIgY2FsbEluc2VydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aEluc2VydFtpXSwgJ2luc2VydGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0NyZWF0ZSkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBjYWxsSW5zZXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbEluc2VydCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGgpIHtcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aFBvc3RwYXRjaFtpXSwgJ2NvbXBvbmVudFVwZGF0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFpc0NyZWF0ZSkge1xuICAgIGZvciAoa2V5IGluIG9sZERpcnMpIHtcbiAgICAgIGlmICghbmV3RGlyc1trZXldKSB7XG4gICAgICAgIC8vIG5vIGxvbmdlciBwcmVzZW50LCB1bmJpbmRcbiAgICAgICAgY2FsbEhvb2skMShvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBlbXB0eU1vZGlmaWVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSAoXG4gIGRpcnMsXG4gIHZtXG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICghZGlycykge1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHJldHVybiByZXNcbiAgfVxuICB2YXIgaSwgZGlyO1xuICBmb3IgKGkgPSAwOyBpIDwgZGlycy5sZW5ndGg7IGkrKykge1xuICAgIGRpciA9IGRpcnNbaV07XG4gICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGRpci5tb2RpZmllcnMgPSBlbXB0eU1vZGlmaWVycztcbiAgICB9XG4gICAgcmVzW2dldFJhd0Rpck5hbWUoZGlyKV0gPSBkaXI7XG4gICAgZGlyLmRlZiA9IHJlc29sdmVBc3NldCh2bS4kb3B0aW9ucywgJ2RpcmVjdGl2ZXMnLCBkaXIubmFtZSwgdHJ1ZSk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0UmF3RGlyTmFtZSAoZGlyKSB7XG4gIHJldHVybiBkaXIucmF3TmFtZSB8fCAoKGRpci5uYW1lKSArIFwiLlwiICsgKE9iamVjdC5rZXlzKGRpci5tb2RpZmllcnMgfHwge30pLmpvaW4oJy4nKSkpXG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rJDEgKGRpciwgaG9vaywgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpIHtcbiAgdmFyIGZuID0gZGlyLmRlZiAmJiBkaXIuZGVmW2hvb2tdO1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgZm4odm5vZGUuZWxtLCBkaXIsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bm9kZS5jb250ZXh0LCAoXCJkaXJlY3RpdmUgXCIgKyAoZGlyLm5hbWUpICsgXCIgXCIgKyBob29rICsgXCIgaG9va1wiKSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBiYXNlTW9kdWxlcyA9IFtcbiAgcmVmLFxuICBkaXJlY3RpdmVzXG5dO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKGF0dHJzLl9fb2JfXykpIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoZWwudGFnTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGVjaG5pY2FsbHkgYWxsb3dmdWxsc2NyZWVuIGlzIGEgYm9vbGVhbiBhdHRyaWJ1dGUgZm9yIDxpZnJhbWU+LFxuICAgICAgLy8gYnV0IEZsYXNoIGV4cGVjdHMgYSB2YWx1ZSBvZiBcInRydWVcIiB3aGVuIHVzZWQgb24gPGVtYmVkPiB0YWdcbiAgICAgIHZhbHVlID0ga2V5ID09PSAnYWxsb3dmdWxsc2NyZWVuJyAmJiBlbC50YWdOYW1lID09PSAnRU1CRUQnXG4gICAgICAgID8gJ3RydWUnXG4gICAgICAgIDoga2V5O1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBjb252ZXJ0RW51bWVyYXRlZFZhbHVlKGtleSwgdmFsdWUpKTtcbiAgfSBlbHNlIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlU2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gIzcxMzg6IElFMTAgJiAxMSBmaXJlcyBpbnB1dCBldmVudCB3aGVuIHNldHRpbmcgcGxhY2Vob2xkZXIgb25cbiAgICAvLyA8dGV4dGFyZWE+Li4uIGJsb2NrIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhbmQgcmVtb3ZlIHRoZSBibG9ja2VyXG4gICAgLy8gaW1tZWRpYXRlbHkuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKFxuICAgICAgaXNJRSAmJiAhaXNJRTkgJiZcbiAgICAgIGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgJiZcbiAgICAgIGtleSA9PT0gJ3BsYWNlaG9sZGVyJyAmJiB2YWx1ZSAhPT0gJycgJiYgIWVsLl9faWVwaFxuICAgICkge1xuICAgICAgdmFyIGJsb2NrZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgfTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGVsLl9faWVwaCA9IHRydWU7IC8qIElFIHBsYWNlaG9sZGVyIHBhdGNoZWQgKi9cbiAgICB9XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICB9XG59XG5cbnZhciBhdHRycyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVBdHRycyxcbiAgdXBkYXRlOiB1cGRhdGVBdHRyc1xufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKFxuICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICBpc1VuZGVmKGRhdGEuY2xhc3MpICYmIChcbiAgICAgIGlzVW5kZWYob2xkRGF0YSkgfHwgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5jbGFzcylcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGtsYXNzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59O1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbi8qICAqL1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXG4vLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlXG4vLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcbiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XG4gICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bUkFOR0VfVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XG4gIH1cbiAgLy8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3NhcnlcbiAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpIHtcbiAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciQxIChldmVudCwgaGFuZGxlciwgY2FwdHVyZSkge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldCQxOyAvLyBzYXZlIGN1cnJlbnQgdGFyZ2V0IGVsZW1lbnQgaW4gY2xvc3VyZVxuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBoYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlJDIoZXZlbnQsIG9uY2VIYW5kbGVyLCBjYXB0dXJlLCBfdGFyZ2V0KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gIzk0NDY6IEZpcmVmb3ggPD0gNTMgKGluIHBhcnRpY3VsYXIsIEVTUiA1MikgaGFzIGluY29ycmVjdCBFdmVudC50aW1lU3RhbXBcbi8vIGltcGxlbWVudGF0aW9uIGFuZCBkb2VzIG5vdCBmaXJlIG1pY3JvdGFza3MgaW4gYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbiwgc29cbi8vIHNhZmUgdG8gZXhjbHVkZS5cbnZhciB1c2VNaWNyb3Rhc2tGaXggPSBpc1VzaW5nTWljcm9UYXNrICYmICEoaXNGRiAmJiBOdW1iZXIoaXNGRlsxXSkgPD0gNTMpO1xuXG5mdW5jdGlvbiBhZGQkMSAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICAvLyBhc3luYyBlZGdlIGNhc2UgIzY1NjY6IGlubmVyIGNsaWNrIGV2ZW50IHRyaWdnZXJzIHBhdGNoLCBldmVudCBoYW5kbGVyXG4gIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzXG4gIC8vIGhhcHBlbnMgYmVjYXVzZSBicm93c2VycyBmaXJlIG1pY3JvdGFzayB0aWNrcyBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLlxuICAvLyB0aGUgc29sdXRpb24gaXMgc2ltcGxlOiB3ZSBzYXZlIHRoZSB0aW1lc3RhbXAgd2hlbiBhIGhhbmRsZXIgaXMgYXR0YWNoZWQsXG4gIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcbiAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxuICBpZiAodXNlTWljcm90YXNrRml4KSB7XG4gICAgdmFyIGF0dGFjaGVkVGltZXN0YW1wID0gY3VycmVudEZsdXNoVGltZXN0YW1wO1xuICAgIHZhciBvcmlnaW5hbCA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IG9yaWdpbmFsLl93cmFwcGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm8gYnViYmxpbmcsIHNob3VsZCBhbHdheXMgZmlyZS5cbiAgICAgICAgLy8gdGhpcyBpcyBqdXN0IGEgc2FmZXR5IG5ldCBpbiBjYXNlIGV2ZW50LnRpbWVTdGFtcCBpcyB1bnJlbGlhYmxlIGluXG4gICAgICAgIC8vIGNlcnRhaW4gd2VpcmQgZW52aXJvbm1lbnRzLi4uXG4gICAgICAgIGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQgfHxcbiAgICAgICAgLy8gZXZlbnQgaXMgZmlyZWQgYWZ0ZXIgaGFuZGxlciBhdHRhY2htZW50XG4gICAgICAgIGUudGltZVN0YW1wID49IGF0dGFjaGVkVGltZXN0YW1wIHx8XG4gICAgICAgIC8vIGJhaWwgZm9yIGVudmlyb25tZW50cyB0aGF0IGhhdmUgYnVnZ3kgZXZlbnQudGltZVN0YW1wIGltcGxlbWVudGF0aW9uc1xuICAgICAgICAvLyAjOTQ2MiBpT1MgOSBidWc6IGV2ZW50LnRpbWVTdGFtcCBpcyAwIGFmdGVyIGhpc3RvcnkucHVzaFN0YXRlXG4gICAgICAgIC8vICM5NjgxIFF0V2ViRW5naW5lIGV2ZW50LnRpbWVTdGFtcCBpcyBuZWdhdGl2ZSB2YWx1ZVxuICAgICAgICBlLnRpbWVTdGFtcCA8PSAwIHx8XG4gICAgICAgIC8vICM5NDQ4IGJhaWwgaWYgZXZlbnQgaXMgZmlyZWQgaW4gYW5vdGhlciBkb2N1bWVudCBpbiBhIG11bHRpLXBhZ2VcbiAgICAgICAgLy8gZWxlY3Ryb24vbncuanMgYXBwLCBzaW5jZSBldmVudC50aW1lU3RhbXAgd2lsbCBiZSB1c2luZyBhIGRpZmZlcmVudFxuICAgICAgICAvLyBzdGFydGluZyByZWZlcmVuY2VcbiAgICAgICAgZS50YXJnZXQub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnRcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBfdGFyZ2V0XG4pIHtcbiAgKF90YXJnZXQgfHwgdGFyZ2V0JDEpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLl93cmFwcGVyIHx8IGhhbmRsZXIsXG4gICAgY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIG5vcm1hbGl6ZUV2ZW50cyhvbik7XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgY3JlYXRlT25jZUhhbmRsZXIkMSwgdm5vZGUuY29udGV4dCk7XG4gIHRhcmdldCQxID0gdW5kZWZpbmVkO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn07XG5cbi8qICAqL1xuXG52YXIgc3ZnQ29udGFpbmVyO1xuXG5mdW5jdGlvbiB1cGRhdGVET01Qcm9wcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuZG9tUHJvcHMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5kb21Qcm9wcykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXI7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIHZhciBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYocHJvcHMuX19vYl9fKSkge1xuICAgIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICBpZiAoIShrZXkgaW4gcHJvcHMpKSB7XG4gICAgICBlbG1ba2V5XSA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoa2V5IGluIHByb3BzKSB7XG4gICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcbiAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xuICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICBpZiAodm5vZGUuY2hpbGRyZW4pIHsgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDsgfVxuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgICAvLyAjNjYwMSB3b3JrIGFyb3VuZCBDaHJvbWUgdmVyc2lvbiA8PSA1NSBidWcgd2hlcmUgc2luZ2xlIHRleHROb2RlXG4gICAgICAvLyByZXBsYWNlZCBieSBpbm5lckhUTUwvdGV4dENvbnRlbnQgcmV0YWlucyBpdHMgcGFyZW50Tm9kZSBwcm9wZXJ0eVxuICAgICAgaWYgKGVsbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScgJiYgZWxtLnRhZ05hbWUgIT09ICdQUk9HUkVTUycpIHtcbiAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXG4gICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICBlbG0uX3ZhbHVlID0gY3VyO1xuICAgICAgLy8gYXZvaWQgcmVzZXR0aW5nIGN1cnNvciBwb3NpdGlvbiB3aGVuIHZhbHVlIGlzIHRoZSBzYW1lXG4gICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVWYWx1ZShlbG0sIHN0ckN1cikpIHtcbiAgICAgICAgZWxtLnZhbHVlID0gc3RyQ3VyO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaW5uZXJIVE1MJyAmJiBpc1NWRyhlbG0udGFnTmFtZSkgJiYgaXNVbmRlZihlbG0uaW5uZXJIVE1MKSkge1xuICAgICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IGlubmVySFRNTCBmb3IgU1ZHIGVsZW1lbnRzXG4gICAgICBzdmdDb250YWluZXIgPSBzdmdDb250YWluZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzdmdDb250YWluZXIuaW5uZXJIVE1MID0gXCI8c3ZnPlwiICsgY3VyICsgXCI8L3N2Zz5cIjtcbiAgICAgIHZhciBzdmcgPSBzdmdDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlIChlbG0uZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHN2Zy5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5hcHBlbmRDaGlsZChzdmcuZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIC8vIHNraXAgdGhlIHVwZGF0ZSBpZiBvbGQgYW5kIG5ldyBWRE9NIHN0YXRlIGlzIHRoZSBzYW1lLlxuICAgICAgLy8gYHZhbHVlYCBpcyBoYW5kbGVkIHNlcGFyYXRlbHkgYmVjYXVzZSB0aGUgRE9NIHZhbHVlIG1heSBiZSB0ZW1wb3JhcmlseVxuICAgICAgLy8gb3V0IG9mIHN5bmMgd2l0aCBWRE9NIHN0YXRlIGR1ZSB0byBmb2N1cywgY29tcG9zaXRpb24gYW5kIG1vZGlmaWVycy5cbiAgICAgIC8vIFRoaXMgICM0NTIxIGJ5IHNraXBwaW5nIHRoZSB1bm5lY2VzYXJyeSBgY2hlY2tlZGAgdXBkYXRlLlxuICAgICAgY3VyICE9PSBvbGRQcm9wc1trZXldXG4gICAgKSB7XG4gICAgICAvLyBzb21lIHByb3BlcnR5IHVwZGF0ZXMgY2FuIHRocm93XG4gICAgICAvLyBlLmcuIGB2YWx1ZWAgb24gPHByb2dyZXNzPiB3LyBub24tZmluaXRlIHZhbHVlXG4gICAgICB0cnkge1xuICAgICAgICBlbG1ba2V5XSA9IGN1cjtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICB9XG59XG5cbi8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlIChlbG0sIGNoZWNrVmFsKSB7XG4gIHJldHVybiAoIWVsbS5jb21wb3NpbmcgJiYgKFxuICAgIGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxuICAgIGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHx8XG4gICAgaXNEaXJ0eVdpdGhNb2RpZmllcnMoZWxtLCBjaGVja1ZhbClcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkgKGVsbSwgY2hlY2tWYWwpIHtcbiAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpc1xuICAvLyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcbiAgdmFyIG5vdEluRm9jdXMgPSB0cnVlO1xuICAvLyAjNjE1N1xuICAvLyB3b3JrIGFyb3VuZCBJRSBidWcgd2hlbiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbiBhbiBpZnJhbWVcbiAgdHJ5IHsgbm90SW5Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsbTsgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxufVxuXG5mdW5jdGlvbiBpc0RpcnR5V2l0aE1vZGlmaWVycyAoZWxtLCBuZXdWYWwpIHtcbiAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZWxtLl92TW9kaWZpZXJzOyAvLyBpbmplY3RlZCBieSB2LW1vZGVsIHJ1bnRpbWVcbiAgaWYgKGlzRGVmKG1vZGlmaWVycykpIHtcbiAgICBpZiAobW9kaWZpZXJzLm51bWJlcikge1xuICAgICAgcmV0dXJuIHRvTnVtYmVyKHZhbHVlKSAhPT0gdG9OdW1iZXIobmV3VmFsKVxuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLnRyaW0pIHtcbiAgICAgIHJldHVybiB2YWx1ZS50cmltKCkgIT09IG5ld1ZhbC50cmltKClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlICE9PSBuZXdWYWxcbn1cblxudmFyIGRvbVByb3BzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTVByb3BzLFxuICB1cGRhdGU6IHVwZGF0ZURPTVByb3BzXG59O1xuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZVxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyhkYXRhLnN0eWxlKTtcbiAgLy8gc3RhdGljIHN0eWxlIGlzIHByZS1wcm9jZXNzZWQgaW50byBhbiBvYmplY3QgZHVyaW5nIGNvbXBpbGF0aW9uXG4gIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG4gIHJldHVybiBkYXRhLnN0YXRpY1N0eWxlXG4gICAgPyBleHRlbmQoZGF0YS5zdGF0aWNTdHlsZSwgc3R5bGUpXG4gICAgOiBzdHlsZVxufVxuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyoqXG4gKiBwYXJlbnQgY29tcG9uZW50IHN0eWxlIHNob3VsZCBiZSBhZnRlciBjaGlsZCdzXG4gKiBzbyB0aGF0IHBhcmVudCBjb21wb25lbnQncyBzdHlsZSBjb3VsZCBvdmVycmlkZSBpdFxuICovXG5mdW5jdGlvbiBnZXRTdHlsZSAodm5vZGUsIGNoZWNrQ2hpbGQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgc3R5bGVEYXRhO1xuXG4gIGlmIChjaGVja0NoaWxkKSB7XG4gICAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoXG4gICAgICAgIGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSAmJlxuICAgICAgICAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKGNoaWxkTm9kZS5kYXRhKSlcbiAgICAgICkge1xuICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICgoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHZub2RlLmRhdGEpKSkge1xuICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gIH1cblxuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB3aGlsZSAoKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcbiAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBjc3NWYXJSRSA9IC9eLS0vO1xudmFyIGltcG9ydGFudFJFID0gL1xccyohaW1wb3J0YW50JC87XG52YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY3NzVmFyUkUudGVzdChuYW1lKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gIH0gZWxzZSBpZiAoaW1wb3J0YW50UkUudGVzdCh2YWwpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoaHlwaGVuYXRlKG5hbWUpLCB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgJycpLCAnaW1wb3J0YW50Jyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplKG5hbWUpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIC8vIFN1cHBvcnQgdmFsdWVzIGFycmF5IGNyZWF0ZWQgYnkgYXV0b3ByZWZpeGVyLCBlLmcuXG4gICAgICAvLyB7ZGlzcGxheTogW1wiLXdlYmtpdC1ib3hcIiwgXCItbXMtZmxleGJveFwiLCBcImZsZXhcIl19XG4gICAgICAvLyBTZXQgdGhlbSBvbmUgYnkgb25lLCBhbmQgdGhlIGJyb3dzZXIgd2lsbCBvbmx5IHNldCB0aG9zZSBpdCBjYW4gcmVjb2duaXplXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHZlbmRvck5hbWVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XG5cbnZhciBlbXB0eVN0eWxlO1xudmFyIG5vcm1hbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAocHJvcCkge1xuICBlbXB0eVN0eWxlID0gZW1wdHlTdHlsZSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgcHJvcCA9IGNhbWVsaXplKHByb3ApO1xuICBpZiAocHJvcCAhPT0gJ2ZpbHRlcicgJiYgKHByb3AgaW4gZW1wdHlTdHlsZSkpIHtcbiAgICByZXR1cm4gcHJvcFxuICB9XG4gIHZhciBjYXBOYW1lID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9yTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmFtZSA9IHZlbmRvck5hbWVzW2ldICsgY2FwTmFtZTtcbiAgICBpZiAobmFtZSBpbiBlbXB0eVN0eWxlKSB7XG4gICAgICByZXR1cm4gbmFtZVxuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG5cbiAgaWYgKGlzVW5kZWYoZGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihkYXRhLnN0eWxlKSAmJlxuICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihvbGREYXRhLnN0eWxlKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjdXIsIG5hbWU7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFN0YXRpY1N0eWxlID0gb2xkRGF0YS5zdGF0aWNTdHlsZTtcbiAgdmFyIG9sZFN0eWxlQmluZGluZyA9IG9sZERhdGEubm9ybWFsaXplZFN0eWxlIHx8IG9sZERhdGEuc3R5bGUgfHwge307XG5cbiAgLy8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcbiAgdmFyIG9sZFN0eWxlID0gb2xkU3RhdGljU3R5bGUgfHwgb2xkU3R5bGVCaW5kaW5nO1xuXG4gIHZhciBzdHlsZSA9IG5vcm1hbGl6ZVN0eWxlQmluZGluZyh2bm9kZS5kYXRhLnN0eWxlKSB8fCB7fTtcblxuICAvLyBzdG9yZSBub3JtYWxpemVkIHN0eWxlIHVuZGVyIGEgZGlmZmVyZW50IGtleSBmb3IgbmV4dCBkaWZmXG4gIC8vIG1ha2Ugc3VyZSB0byBjbG9uZSBpdCBpZiBpdCdzIHJlYWN0aXZlLCBzaW5jZSB0aGUgdXNlciBsaWtlbHkgd2FudHNcbiAgLy8gdG8gbXV0YXRlIGl0LlxuICB2bm9kZS5kYXRhLm5vcm1hbGl6ZWRTdHlsZSA9IGlzRGVmKHN0eWxlLl9fb2JfXylcbiAgICA/IGV4dGVuZCh7fSwgc3R5bGUpXG4gICAgOiBzdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSBnZXRTdHlsZSh2bm9kZSwgdHJ1ZSk7XG5cbiAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XG4gICAgaWYgKGlzVW5kZWYobmV3U3R5bGVbbmFtZV0pKSB7XG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuICAgIGN1ciA9IG5ld1N0eWxlW25hbWVdO1xuICAgIGlmIChjdXIgIT09IG9sZFN0eWxlW25hbWVdKSB7XG4gICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgY3VyID09IG51bGwgPyAnJyA6IGN1cik7XG4gICAgfVxuICB9XG59XG5cbnZhciBzdHlsZSA9IHtcbiAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgdXBkYXRlOiB1cGRhdGVTdHlsZVxufTtcblxuLyogICovXG5cbnZhciB3aGl0ZXNwYWNlUkUgPSAvXFxzKy87XG5cbi8qKlxuICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgIH1cbiAgICBpZiAoIWVsLmNsYXNzTGlzdC5sZW5ndGgpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICB2YXIgdGFyID0gJyAnICsgY2xzICsgJyAnO1xuICAgIHdoaWxlIChjdXIuaW5kZXhPZih0YXIpID49IDApIHtcbiAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICB9XG4gICAgY3VyID0gY3VyLnRyaW0oKTtcbiAgICBpZiAoY3VyKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24gKGRlZiQkMSkge1xuICBpZiAoIWRlZiQkMSkge1xuICAgIHJldHVyblxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgZGVmJCQxID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBpZiAoZGVmJCQxLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMS5uYW1lIHx8ICd2JykpO1xuICAgIH1cbiAgICBleHRlbmQocmVzLCBkZWYkJDEpO1xuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmJCQxID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpXG4gIH1cbn1cblxudmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXJDbGFzczogKG5hbWUgKyBcIi1lbnRlclwiKSxcbiAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgZW50ZXJBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1lbnRlci1hY3RpdmVcIiksXG4gICAgbGVhdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZVwiKSxcbiAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG4gICAgbGVhdmVBY3RpdmVDbGFzczogKG5hbWUgKyBcIi1sZWF2ZS1hY3RpdmVcIilcbiAgfVxufSk7XG5cbnZhciBoYXNUcmFuc2l0aW9uID0gaW5Ccm93c2VyICYmICFpc0lFOTtcbnZhciBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xudmFyIEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuXG4vLyBUcmFuc2l0aW9uIHByb3BlcnR5L2V2ZW50IHNuaWZmaW5nXG52YXIgdHJhbnNpdGlvblByb3AgPSAndHJhbnNpdGlvbic7XG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQnO1xudmFyIGFuaW1hdGlvblByb3AgPSAnYW5pbWF0aW9uJztcbnZhciBhbmltYXRpb25FbmRFdmVudCA9ICdhbmltYXRpb25lbmQnO1xuaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgdHJhbnNpdGlvblByb3AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuICB9XG4gIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIGFuaW1hdGlvblByb3AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICB9XG59XG5cbi8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxudmFyIHJhZiA9IGluQnJvd3NlclxuICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gICAgOiBzZXRUaW1lb3V0XG4gIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbigpOyB9O1xuXG5mdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gIHJhZihmdW5jdGlvbiAoKSB7XG4gICAgcmFmKGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKTtcbiAgaWYgKHRyYW5zaXRpb25DbGFzc2VzLmluZGV4T2YoY2xzKSA8IDApIHtcbiAgICB0cmFuc2l0aW9uQ2xhc3Nlcy5wdXNoKGNscyk7XG4gICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICByZW1vdmUoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xuICB9XG4gIHJlbW92ZUNsYXNzKGVsLCBjbHMpO1xufVxuXG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMgKFxuICBlbCxcbiAgZXhwZWN0ZWRUeXBlLFxuICBjYlxuKSB7XG4gIHZhciByZWYgPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgdmFyIHRpbWVvdXQgPSByZWYudGltZW91dDtcbiAgdmFyIHByb3BDb3VudCA9IHJlZi5wcm9wQ291bnQ7XG4gIGlmICghdHlwZSkgeyByZXR1cm4gY2IoKSB9XG4gIHZhciBldmVudCA9IHR5cGUgPT09IFRSQU5TSVRJT04gPyB0cmFuc2l0aW9uRW5kRXZlbnQgOiBhbmltYXRpb25FbmRFdmVudDtcbiAgdmFyIGVuZGVkID0gMDtcbiAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG4gICAgY2IoKTtcbiAgfTtcbiAgdmFyIG9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGVsKSB7XG4gICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfSwgdGltZW91dCArIDEpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XG59XG5cbnZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvIChlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgdmFyIHRyYW5zaXRpb25EZWxheXMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gIHZhciBhbmltYXRpb25EZWxheXMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXIgbnVtYmVyc1xuLy8gaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxuLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93biAoaS5lLiBhY3Rpbmdcbi8vIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcbmZ1bmN0aW9uIHRvTXMgKHMpIHtcbiAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnRlciAodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICBlbC5fbGVhdmVDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9sZWF2ZUNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3M7XG4gIHZhciBlbnRlclRvQ2xhc3MgPSBkYXRhLmVudGVyVG9DbGFzcztcbiAgdmFyIGVudGVyQWN0aXZlQ2xhc3MgPSBkYXRhLmVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3M7XG4gIHZhciBhcHBlYXJUb0NsYXNzID0gZGF0YS5hcHBlYXJUb0NsYXNzO1xuICB2YXIgYXBwZWFyQWN0aXZlQ2xhc3MgPSBkYXRhLmFwcGVhckFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXIgPSBkYXRhLmVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlciA9IGRhdGEuYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZDtcbiAgdmFyIGJlZm9yZUFwcGVhciA9IGRhdGEuYmVmb3JlQXBwZWFyO1xuICB2YXIgYXBwZWFyID0gZGF0YS5hcHBlYXI7XG4gIHZhciBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXI7XG4gIHZhciBhcHBlYXJDYW5jZWxsZWQgPSBkYXRhLmFwcGVhckNhbmNlbGxlZDtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICAvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXG4gIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZFxuICAvLyBhcyB0aGUgcm9vdCBub2RlIG9mIGEgY2hpbGQgY29tcG9uZW50LiBJbiB0aGF0IGNhc2Ugd2UgbmVlZCB0byBjaGVja1xuICAvLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cbiAgdmFyIGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTtcbiAgdmFyIHRyYW5zaXRpb25Ob2RlID0gYWN0aXZlSW5zdGFuY2UuJHZub2RlO1xuICB3aGlsZSAodHJhbnNpdGlvbk5vZGUgJiYgdHJhbnNpdGlvbk5vZGUucGFyZW50KSB7XG4gICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7XG4gICAgdHJhbnNpdGlvbk5vZGUgPSB0cmFuc2l0aW9uTm9kZS5wYXJlbnQ7XG4gIH1cblxuICB2YXIgaXNBcHBlYXIgPSAhY29udGV4dC5faXNNb3VudGVkIHx8ICF2bm9kZS5pc1Jvb3RJbnNlcnQ7XG5cbiAgaWYgKGlzQXBwZWFyICYmICFhcHBlYXIgJiYgYXBwZWFyICE9PSAnJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN0YXJ0Q2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJDbGFzc1xuICAgID8gYXBwZWFyQ2xhc3NcbiAgICA6IGVudGVyQ2xhc3M7XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgPyBhcHBlYXJBY3RpdmVDbGFzc1xuICAgIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIHRvQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJUb0NsYXNzXG4gICAgPyBhcHBlYXJUb0NsYXNzXG4gICAgOiBlbnRlclRvQ2xhc3M7XG5cbiAgdmFyIGJlZm9yZUVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYmVmb3JlQXBwZWFyIHx8IGJlZm9yZUVudGVyKVxuICAgIDogYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKHR5cGVvZiBhcHBlYXIgPT09ICdmdW5jdGlvbicgPyBhcHBlYXIgOiBlbnRlcilcbiAgICA6IGVudGVyO1xuICB2YXIgYWZ0ZXJFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFmdGVyQXBwZWFyIHx8IGFmdGVyRW50ZXIpXG4gICAgOiBhZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWRIb29rID0gaXNBcHBlYXJcbiAgICA/IChhcHBlYXJDYW5jZWxsZWQgfHwgZW50ZXJDYW5jZWxsZWQpXG4gICAgOiBlbnRlckNhbmNlbGxlZDtcblxuICB2YXIgZXhwbGljaXRFbnRlckR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmVudGVyXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZXhwbGljaXRFbnRlckR1cmF0aW9uICE9IG51bGwpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgdmFyIGNiID0gZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgZW50ZXJDYW5jZWxsZWRIb29rICYmIGVudGVyQ2FuY2VsbGVkSG9vayhlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICB9XG4gICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIC8vIHJlbW92ZSBwZW5kaW5nIGxlYXZlIGVsZW1lbnQgb24gZW50ZXIgYnkgaW5qZWN0aW5nIGFuIGluc2VydCBob29rXG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwZW5kaW5nTm9kZSA9IHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmcgJiYgcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07XG4gICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiZcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiXG4gICAgICApIHtcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG4gICAgICB9XG4gICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpO1xuICBpZiAoZXhwZWN0c0NTUykge1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0RW50ZXJEdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuICAgIHRvZ2dsZURpc3BsYXkgJiYgdG9nZ2xlRGlzcGxheSgpO1xuICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgfVxuXG4gIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgIGNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmxlYXZlXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgY2IgPSBlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuX3BlbmRpbmdbdm5vZGUua2V5XSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTtcbiAgICB9XG4gICAgZWwuX2xlYXZlQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgIGRlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTtcbiAgfSBlbHNlIHtcbiAgICBwZXJmb3JtTGVhdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSAoKSB7XG4gICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyByZWNvcmQgbGVhdmluZyBlbGVtZW50XG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cgJiYgZWwucGFyZW50Tm9kZSkge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucylcbiAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9O1xuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICBhdHRycyxcbiAga2xhc3MsXG4gIGV2ZW50cyxcbiAgZG9tUHJvcHMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uXG5dO1xuXG4vKiAgKi9cblxuLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxudmFyIG1vZHVsZXMgPSBwbGF0Zm9ybU1vZHVsZXMuY29uY2F0KGJhc2VNb2R1bGVzKTtcblxudmFyIHBhdGNoID0gY3JlYXRlUGF0Y2hGdW5jdGlvbih7IG5vZGVPcHM6IG5vZGVPcHMsIG1vZHVsZXM6IG1vZHVsZXMgfSk7XG5cbi8qKlxuICogTm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IGxpa2UgYXR0YWNoaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKGlzSUU5KSB7XG4gIC8vIGh0dHA6Ly93d3cubWF0dHM0MTEuY29tL3Bvc3QvaW50ZXJuZXQtZXhwbG9yZXItOS1vbmlucHV0L1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoZWwgJiYgZWwudm1vZGVsKSB7XG4gICAgICB0cmlnZ2VyKGVsLCAnaW5wdXQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZGlyZWN0aXZlID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgLy8gIzY5MDNcbiAgICAgIGlmIChvbGRWbm9kZS5lbG0gJiYgIW9sZFZub2RlLmVsbS5fdk9wdGlvbnMpIHtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGlyZWN0aXZlLmNvbXBvbmVudFVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICB9XG4gICAgICBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7XG4gICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzO1xuICAgICAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXG4gICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcbiAgICAgICAgLy8gdGhpcyBhbHNvIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBzb21lIGJyb3dzZXJzIGUuZy4gaU9TIENocm9tZVxuICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXNJRTkpIHtcbiAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFVwZGF0ZWQ6IGZ1bmN0aW9uIGNvbXBvbmVudFVwZGF0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAvLyBpbiBjYXNlIHRoZSBvcHRpb25zIHJlbmRlcmVkIGJ5IHYtZm9yIGhhdmUgY2hhbmdlZCxcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuICAgICAgLy8gb3B0aW9uIGluIHRoZSBET00uXG4gICAgICB2YXIgcHJldk9wdGlvbnMgPSBlbC5fdk9wdGlvbnM7XG4gICAgICB2YXIgY3VyT3B0aW9ucyA9IGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICAgIGlmIChjdXJPcHRpb25zLnNvbWUoZnVuY3Rpb24gKG8sIGkpIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHByZXZPcHRpb25zW2ldKTsgfSkpIHtcbiAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWZcbiAgICAgICAgLy8gbm8gbWF0Y2hpbmcgb3B0aW9uIGZvdW5kIGZvciBhdCBsZWFzdCBvbmUgdmFsdWVcbiAgICAgICAgdmFyIG5lZWRSZXNldCA9IGVsLm11bHRpcGxlXG4gICAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgY3VyT3B0aW9ucyk7IH0pXG4gICAgICAgICAgOiBiaW5kaW5nLnZhbHVlICE9PSBiaW5kaW5nLm9sZFZhbHVlICYmIGhhc05vTWF0Y2hpbmdPcHRpb24oYmluZGluZy52YWx1ZSwgY3VyT3B0aW9ucyk7XG4gICAgICAgIGlmIChuZWVkUmVzZXQpIHtcbiAgICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gICAgfSwgMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWN0dWFsbHlTZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIHZhciB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVxcXCJcIiArIChiaW5kaW5nLmV4cHJlc3Npb24pICsgXCJcXFwiPiBcIiArXG4gICAgICBcImV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290IFwiICsgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VsZWN0ZWQsIG9wdGlvbjtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZXZlcnkoZnVuY3Rpb24gKG8pIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHZhbHVlKTsgfSlcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUgKG9wdGlvbikge1xuICByZXR1cm4gJ192YWx1ZScgaW4gb3B0aW9uXG4gICAgPyBvcHRpb24uX3ZhbHVlXG4gICAgOiBvcHRpb24udmFsdWVcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0IChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQgKGUpIHtcbiAgLy8gcHJldmVudCB0cmlnZ2VyaW5nIGFuIGlucHV0IGV2ZW50IGZvciBubyByZWFzb25cbiAgaWYgKCFlLnRhcmdldC5jb21wb3NpbmcpIHsgcmV0dXJuIH1cbiAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gIHRyaWdnZXIoZS50YXJnZXQsICdpbnB1dCcpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xufVxuXG4vKiAgKi9cblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuZnVuY3Rpb24gbG9jYXRlTm9kZSAodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmICghdm5vZGUuZGF0YSB8fCAhdm5vZGUuZGF0YS50cmFuc2l0aW9uKVxuICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgOiB2bm9kZVxufVxuXG52YXIgc2hvdyA9IHtcbiAgYmluZDogZnVuY3Rpb24gYmluZCAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA9XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSkgeyByZXR1cm4gfVxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICBpZiAodHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWwuX192T3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCAoXG4gICAgZWwsXG4gICAgYmluZGluZyxcbiAgICB2bm9kZSxcbiAgICBvbGRWbm9kZSxcbiAgICBpc0Rlc3Ryb3lcbiAgKSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogZGlyZWN0aXZlLFxuICBzaG93OiBzaG93XG59O1xuXG4vKiAgKi9cblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gIGR1cmF0aW9uOiBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdF1cbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIGlmICgvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpIHtcbiAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgIHByb3BzOiByYXdDaGlsZC5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbiAodm5vZGUpIHtcbiAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICBpZiAodm5vZGUuZGF0YS50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZ1xufVxuXG52YXIgaXNOb3RUZXh0Tm9kZSA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH07XG5cbnZhciBpc1ZTaG93RGlyZWN0aXZlID0gZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOyB9O1xuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICBwcm9wczogdHJhbnNpdGlvblByb3BzLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGlzTm90VGV4dE5vZGUpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGlzVlNob3dEaXJlY3RpdmUpKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50ICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB1cGRhdGUgPSB0aGlzLl91cGRhdGU7XG4gICAgdGhpcy5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh0aGlzJDEpO1xuICAgICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgICAgdGhpcyQxLl9fcGF0Y2hfXyhcbiAgICAgICAgdGhpcyQxLl92bm9kZSxcbiAgICAgICAgdGhpcyQxLmtlcHQsXG4gICAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgICAgdHJ1ZSAvLyByZW1vdmVPbmx5ICghaW1wb3J0YW50LCBhdm9pZHMgdW5uZWNlc3NhcnkgbW92ZXMpXG4gICAgICApO1xuICAgICAgdGhpcyQxLl92bm9kZSA9IHRoaXMkMS5rZXB0O1xuICAgICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgICB1cGRhdGUuY2FsbCh0aGlzJDEsIHZub2RlLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICAgIHZhciBuYW1lID0gb3B0cyA/IChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnIHx8ICcnKSA6IGMudGFnO1xuICAgICAgICAgIHdhcm4oKFwiPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQ6IDxcIiArIG5hbWUgKyBcIj5cIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgdmFyIGtlcHQgPSBbXTtcbiAgICAgIHZhciByZW1vdmVkID0gW107XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICB2YXIgYyQxID0gcHJldkNoaWxkcmVuW2kkMV07XG4gICAgICAgIGMkMS5kYXRhLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgYyQxLmRhdGEucG9zID0gYyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKG1hcFtjJDEua2V5XSkge1xuICAgICAgICAgIGtlcHQucHVzaChjJDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbW92ZWQucHVzaChjJDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmtlcHQgPSBoKHRhZywgbnVsbCwga2VwdCk7XG4gICAgICB0aGlzLnJlbW92ZWQgPSByZW1vdmVkO1xuICAgIH1cblxuICAgIHJldHVybiBoKHRhZywgbnVsbCwgY2hpbGRyZW4pXG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW47XG4gICAgdmFyIG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICgodGhpcy5uYW1lIHx8ICd2JykgKyAnLW1vdmUnKTtcbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChhcHBseVRyYW5zbGF0aW9uKTtcblxuICAgIC8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxuICAgIC8vIGFzc2lnbiB0byB0aGlzIHRvIGF2b2lkIGJlaW5nIHJlbW92ZWQgaW4gdHJlZS1zaGFraW5nXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdGhpcy5fcmVmbG93ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XG5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICBpZiAoYy5kYXRhLm1vdmVkKSB7XG4gICAgICAgIHZhciBlbCA9IGMuZWxtO1xuICAgICAgICB2YXIgcyA9IGVsLnN0eWxlO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgZWwuX21vdmVDYiA9IGZ1bmN0aW9uIGNiIChlKSB7XG4gICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGNiKTtcbiAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGhhc01vdmU6IGZ1bmN0aW9uIGhhc01vdmUgKGVsLCBtb3ZlQ2xhc3MpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFoYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAodGhpcy5faGFzTW92ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFzTW92ZVxuICAgICAgfVxuICAgICAgLy8gRGV0ZWN0IHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBtb3ZlIGNsYXNzIGFwcGxpZWQgaGFzXG4gICAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcbiAgICAgIC8vIHRyYW5zaXRpb24gYXQgdGhpcyB2ZXJ5IG1vbWVudCwgd2UgbWFrZSBhIGNsb25lIG9mIGl0IGFuZCByZW1vdmVcbiAgICAgIC8vIGFsbCBvdGhlciB0cmFuc2l0aW9uIGNsYXNzZXMgYXBwbGllZCB0byBlbnN1cmUgb25seSB0aGUgbW92ZSBjbGFzc1xuICAgICAgLy8gaXMgYXBwbGllZC5cbiAgICAgIHZhciBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xuICAgICAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgICAgICBlbC5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7IHJlbW92ZUNsYXNzKGNsb25lLCBjbHMpOyB9KTtcbiAgICAgIH1cbiAgICAgIGFkZENsYXNzKGNsb25lLCBtb3ZlQ2xhc3MpO1xuICAgICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMuJGVsLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICAgIHZhciBpbmZvID0gZ2V0VHJhbnNpdGlvbkluZm8oY2xvbmUpO1xuICAgICAgdGhpcy4kZWwucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgcmV0dXJuICh0aGlzLl9oYXNNb3ZlID0gaW5mby5oYXNUcmFuc2Zvcm0pXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59O1xuXG4vKiAgKi9cblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBzcGVjaWZpYyB1dGlsc1xuVnVlLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblZ1ZS5jb25maWcuaXNSZXNlcnZlZEF0dHIgPSBpc1Jlc2VydmVkQXR0cjtcblZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlO1xuVnVlLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzXG5leHRlbmQoVnVlLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcbmV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBwbGF0Zm9ybUNvbXBvbmVudHMpO1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHBhdGNoIGZ1bmN0aW9uXG5WdWUucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoIDogbm9vcDtcblxuLy8gcHVibGljIG1vdW50IG1ldGhvZFxuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIG1vdW50Q29tcG9uZW50KHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpbkJyb3dzZXIpIHtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNvbmZpZy5kZXZ0b29scykge1xuICAgICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICAgIGRldnRvb2xzLmVtaXQoJ2luaXQnLCBWdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLWRldnRvb2xzJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgY29uZmlnLnByb2R1Y3Rpb25UaXAgIT09IGZhbHNlICYmXG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgICAgIFwiTWFrZSBzdXJlIHRvIHR1cm4gb24gcHJvZHVjdGlvbiBtb2RlIHdoZW4gZGVwbG95aW5nIGZvciBwcm9kdWN0aW9uLlxcblwiICtcbiAgICAgICAgXCJTZWUgbW9yZSB0aXBzIGF0IGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2RlcGxveW1lbnQuaHRtbFwiXG4gICAgICApO1xuICAgIH1cbiAgfSwgMCk7XG59XG5cbi8qICAqL1xuXG5leHBvcnQgZGVmYXVsdCBWdWU7XG4iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz9wcmVwZW5kRGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL3N0eWxlLnNjc3NcXFwiOyEuL3N0eWxlLnNjc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNjllNzc5OThcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/cHJlcGVuZERhdGE9QGltcG9ydCBcXFwiLi9zcmMvc2Nzcy9zdHlsZS5zY3NzXFxcIjshLi9zdHlsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/cHJlcGVuZERhdGE9QGltcG9ydCBcXFwiLi9zcmMvc2Nzcy9zdHlsZS5zY3NzXFxcIjshLi9zdHlsZS5zY3NzXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc2VhcmNoLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz9wcmVwZW5kRGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL3N0eWxlLnNjc3NcXFwiOyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3NlYXJjaC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcG9wdXAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcG9wdXAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz9wcmVwZW5kRGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL3N0eWxlLnNjc3NcXFwiOyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2NhcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vY2FyZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbG9hZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz9wcmVwZW5kRGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL3N0eWxlLnNjc3NcXFwiOyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2xvYWRlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3ByZXBlbmREYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3Mvc3R5bGUuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz9wcmVwZW5kRGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL3N0eWxlLnNjc3NcXFwiOyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIiLCJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgeyBzdGF0aWNDbGFzczogXCJjb250YWluZXJcIiB9LFxuICAgIFtcbiAgICAgICFfdm0ubG9hZGVkXG4gICAgICAgID8gX2MoXCJsb2FkZXJcIiwgeyBzdGF0aWNDbGFzczogXCJjb250YWluZXJfX2xvYWRlclwiIH0pXG4gICAgICAgIDogX3ZtLl9lKCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLmxvYWRlZCA/IF9jKFwic2VhcmNoXCIpIDogX3ZtLl9lKCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLmxvYWRlZFxuICAgICAgICA/IF9jKFxuICAgICAgICAgICAgXCJzZWN0aW9uXCIsXG4gICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNhcmRzIG1haW5fX2NhcmRzXCIgfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXCJoMlwiLCB7IHN0YXRpY0NsYXNzOiBcInZpc3VhbGx5LWhpZGRlblwiIH0sIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCJDaGFyYWN0ZXJzIGNhcmRzXCIpXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfdm0uX2woX3ZtLiRzdG9yZS5zdGF0ZS5jaGFyYWN0ZXJzLCBmdW5jdGlvbihjaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2MoXCJjYXJkXCIsIHtcbiAgICAgICAgICAgICAgICAgIGtleTogX3ZtLiRzdG9yZS5zdGF0ZS5jaGFyYWN0ZXJzLmluZGV4T2YoY2hhcmFjdGVyKSxcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGNoYXJhY3RlcixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IF92bS4kc3RvcmUuc3RhdGUuY2hhcmFjdGVycy5pbmRleE9mKGNoYXJhY3RlcilcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIDJcbiAgICAgICAgICApXG4gICAgICAgIDogX3ZtLl9lKClcbiAgICBdLFxuICAgIDFcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCIgc2VhcmNoIG1haW5fX3NlYXJjaCBcIiB9LCBbXG4gICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgdmFsdWU6IF92bS5pbnB1dERhdGEsXG4gICAgICAgICAgZXhwcmVzc2lvbjogXCJpbnB1dERhdGFcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgc3RhdGljQ2xhc3M6IFwic2VhcmNoX19pbnB1dFwiLFxuICAgICAgYXR0cnM6IHsgdHlwZTogXCIgdGV4dFwiLCBwbGFjZWhvbGRlcjogXCJTZWFyY2ggYnkgbmFtZVwiIH0sXG4gICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmlucHV0RGF0YSB9LFxuICAgICAgb246IHtcbiAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIF92bS5pbnB1dERhdGEgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCIgc2VhcmNoIG1haW5fX3NlYXJjaCBcIj5cbiAgPGlucHV0IHR5cGU9XCIgdGV4dFwiIGNsYXNzPVwic2VhcmNoX19pbnB1dFwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoIGJ5IG5hbWVcIiB2LW1vZGVsPVwiaW5wdXREYXRhXCI+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlucHV0RGF0YTogJycsXG4gICAgfVxuICB9LFxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuLnNlYXJjaF9faW5wdXQge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgY29sb3I6ICM4MDgwODA7XG5cbiAgICAmOjpwbGFjZWhvbGRlciB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAkbWFpbi1mb250O1xuICAgICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxOXB4O1xuICAgICAgICBjb2xvcjogIzgwODA4MDtcbiAgICB9XG59XG4uc2VhcmNoIHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBwYWRkaW5nLWJvdHRvbTogN3B4O1xuICAgIG1hcmdpbi1ib3R0b206IDQ1cHg7XG4gICAgJjo6YmVmb3JlIHtcbiAgICAgICAgQGluY2x1ZGUgcHNldWRvLWVsZW1lbnQ7XG4gICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICBoZWlnaHQ6IDIwcHg7XG4gICAgICAgIGxlZnQ6IGNhbGMoMTAwJSAtIDIwcHgpO1xuICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLy4uL2ltZy9pY29ucy9zZWFyY2gtaWNvbi5zdmdcIik7XG4gICAgICAgIHotaW5kZXg6IDEwO1xuICAgIH1cblxuICAgICY6OmFmdGVyIHtcbiAgICAgICAgQGluY2x1ZGUgcHNldWRvLWVsZW1lbnQ7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDJweDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzgwODA4MDtcbiAgICAgICAgdG9wOiAxMDAlO1xuICAgIH1cbn1cbjwvc3R5bGU+XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc2VhcmNoLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3NlYXJjaC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9zZWFyY2gudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTRhZDQxYmI4JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3NlYXJjaC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL3NlYXJjaC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vc2VhcmNoLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL2hvbWUvdXNlci9naXQvc3dBUEkvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNGFkNDFiYjgnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNGFkNDFiYjgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNGFkNDFiYjgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3NlYXJjaC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NGFkNDFiYjgmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignNGFkNDFiYjgnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9jb21wb25lbnRzL3NlYXJjaC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwidHJhbnNpdGlvblwiLCB7IGF0dHJzOiB7IG5hbWU6IFwiY2FyZFwiLCBhcHBlYXI6IFwiXCIgfSB9LCBbXG4gICAgX2MoXG4gICAgICBcInNlY3Rpb25cIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY2FyZCBjYXJkc19fY2FyZFwiLCBvbjogeyBjbGljazogX3ZtLm9wZW5Qb3B1cCB9IH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiaDNcIiwgeyBzdGF0aWNDbGFzczogXCJ2aXN1YWxseS1oaWRkZW5cIiB9LCBbXG4gICAgICAgICAgX3ZtLl92KFwiQ2hhcmFjdGVyIGluZm9cIilcbiAgICAgICAgXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FyZF9fYXZhdGFyXCIgfSwgW1xuICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcmRfX2F2YXRhci10ZXh0XCIgfSwgW1xuICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uaW5mby5uYW1lWzBdKSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FyZF9fbmFtZVwiIH0sIFtfdm0uX3YoX3ZtLl9zKF92bS5pbmZvLm5hbWUpKV0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkX19zcGVjaWVzXCIgfSwgW1xuICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmluZm8ucmVhbFNwZWNpZSkpXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfdm0ucG9wdXBBY3RpdmVcbiAgICAgICAgICA/IF9jKFwicG9wdXBcIiwge1xuICAgICAgICAgICAgICBhdHRyczogeyBpZDogX3ZtLmlkIH0sXG4gICAgICAgICAgICAgIG9uOiB7IGNsb3NlUG9wdXA6IF92bS5jbG9zZVBvcHVwIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgXSxcbiAgICAgIDFcbiAgICApXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcInNlY3Rpb25cIiwgeyBzdGF0aWNDbGFzczogXCJwb3B1cCBjYXJkX19wb3B1cFwiIH0sIFtcbiAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInBvcHVwX19hdmF0YXIgYXZhdGFyXCIgfSwgW1xuICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwicG9wdXBfX2F2YXRhci10ZXh0IGF2YXRhci10ZXh0XCIgfSwgW1xuICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5pbmZvLm5hbWVbMF0pKVxuICAgICAgXSlcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcInBvcHVwX19uYW1lXCIgfSwgW192bS5fdihfdm0uX3MoX3ZtLmluZm8ubmFtZSkpXSksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJwb3B1cF9faWNvbi0tYmlydGggcG9wdXBfX2ljb25cIiB9LCBbXG4gICAgICBfdm0uX3YoXCJCaXJ0aCB5ZWFyXCIpXG4gICAgXSksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJwb3B1cF9fYmlydGhcIiB9LCBbXG4gICAgICBfdm0uX3YoX3ZtLl9zKF92bS5pbmZvLmJpcnRoX3llYXIpKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwicG9wdXBfX2ljb24tLXNwZWNpZXMgcG9wdXBfX2ljb25cIiB9LCBbXG4gICAgICBfdm0uX3YoXCJTcGllY2llc1wiKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwicG9wdXBfX3NwZWNpZXNcIiB9LCBbXG4gICAgICBfdm0uX3YoX3ZtLl9zKF92bS5pbmZvLnJlYWxTcGVjaWUpKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwicG9wdXBfX2ljb24tLWdlbmRlciBwb3B1cF9faWNvblwiIH0sIFtcbiAgICAgIF92bS5fdihcIkdlbmRlclwiKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwicG9wdXBfX2dlbmRlclwiIH0sIFtcbiAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmluZm8uZ2VuZGVyKSlcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcInBvcHVwX19pY29uLS1ob21ld29ybGQgcG9wdXBfX2ljb25cIiB9LCBbXG4gICAgICBfdm0uX3YoXCJIb21ld29ybGRcIilcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcInBvcHVwX19ob21ld29ybGRcIiB9LCBbX3ZtLl92KFwiKioqXCIpXSksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJwb3B1cF9faWNvbi0tZmlsbXMgcG9wdXBfX2ljb25cIiB9LCBbXG4gICAgICBfdm0uX3YoXCJGaWxtc1wiKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX3ZtLl9tKDApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJidXR0b25cIiwge1xuICAgICAgc3RhdGljQ2xhc3M6IFwiY2xvc2UtYnV0dG9uIHBvcHVwX19jbG9zZS1idXR0b25cIixcbiAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICByZXR1cm4gX3ZtLmNsb3NlUG9wdXAoJGV2ZW50KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZmlsbXMgcG9wdXBfX2ZpbG1zXCIgfSwgW19jKFwidWxcIildKVxuICB9XG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cbjxzZWN0aW9uIGNsYXNzPVwicG9wdXAgY2FyZF9fcG9wdXBcIj5cbiAgPGRpdiBjbGFzcz1cInBvcHVwX19hdmF0YXIgYXZhdGFyXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJwb3B1cF9fYXZhdGFyLXRleHQgYXZhdGFyLXRleHRcIj57e2luZm8ubmFtZVswXX19PC9zcGFuPlxuICA8L2Rpdj5cbiAgPHAgY2xhc3M9XCJwb3B1cF9fbmFtZVwiPnt7aW5mby5uYW1lfX08L3A+XG4gIDxwIGNsYXNzPVwicG9wdXBfX2ljb24tLWJpcnRoIHBvcHVwX19pY29uXCI+QmlydGggeWVhcjwvcD5cbiAgPHAgY2xhc3M9XCJwb3B1cF9fYmlydGhcIj57e2luZm8uYmlydGhfeWVhcn19PC9wPlxuICA8cCBjbGFzcz1cInBvcHVwX19pY29uLS1zcGVjaWVzIHBvcHVwX19pY29uXCI+U3BpZWNpZXM8L3A+XG4gIDxwIGNsYXNzPVwicG9wdXBfX3NwZWNpZXNcIj57e2luZm8ucmVhbFNwZWNpZX19PC9wPlxuICA8cCBjbGFzcz1cInBvcHVwX19pY29uLS1nZW5kZXIgcG9wdXBfX2ljb25cIj5HZW5kZXI8L3A+XG4gIDxwIGNsYXNzPVwicG9wdXBfX2dlbmRlclwiPnt7aW5mby5nZW5kZXJ9fTwvcD5cbiAgPHAgY2xhc3M9XCJwb3B1cF9faWNvbi0taG9tZXdvcmxkIHBvcHVwX19pY29uXCI+SG9tZXdvcmxkPC9wPlxuICA8cCBjbGFzcz1cInBvcHVwX19ob21ld29ybGRcIj4qKio8L3A+XG4gIDxwIGNsYXNzPVwicG9wdXBfX2ljb24tLWZpbG1zIHBvcHVwX19pY29uXCI+RmlsbXM8L3A+XG4gIDxkaXYgY2xhc3M9XCJmaWxtcyBwb3B1cF9fZmlsbXNcIj5cbiAgICA8dWw+XG4gICAgPC91bD5cbiAgPC9kaXY+XG4gIDxidXR0b24gQGNsaWNrLnN0b3A9XCJjbG9zZVBvcHVwXCIgY2xhc3M9XCJjbG9zZS1idXR0b24gcG9wdXBfX2Nsb3NlLWJ1dHRvblwiIHR5cGU9XCJidXR0b25cIj48L2J1dHRvbj5cbjwvc2VjdGlvbj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgaW5mbygpIHtcbiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5jaGFyYWN0ZXJzW3RoaXMuaWRdO1xuICAgIH1cbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBpZDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZTogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgY2xvc2VQb3B1cChldnQpIHtcbiAgICAgIHRoaXMuJGVtaXQoYGNsb3NlUG9wdXBgKTtcbiAgICB9LFxuICB9LFxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuLmNsb3NlLWJ1dHRvbiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMjJweDtcbiAgICByaWdodDogNyU7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIHdpZHRoOiAxMnB4O1xuICAgIGhlaWdodDogMTJweDtcblxuICAgICY6OmJlZm9yZSB7XG4gICAgICAgIEBpbmNsdWRlIHBzZXVkby1lbGVtZW50O1xuICAgICAgICB3aWR0aDogMTJweDtcbiAgICAgICAgaGVpZ2h0OiAycHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgICB9XG5cbiAgICAmOjphZnRlciB7XG4gICAgICAgIEBpbmNsdWRlIHBzZXVkby1lbGVtZW50O1xuICAgICAgICB3aWR0aDogMTJweDtcbiAgICAgICAgaGVpZ2h0OiAycHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XG4gICAgfVxufVxuLnBvcHVwIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxMjBweCA1MHB4IHJlcGVhdCg1LCA1MHB4KSBhdXRvO1xuICAgIGdyaWQtYXV0by1yb3dzOiBhdXRvO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB6LWluZGV4OiAxMDA7XG4gICAgcGFkZGluZy1sZWZ0OiA3LjUlO1xuICAgIHBhZGRpbmctdG9wOiA1MHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMxOTE5MTk7XG4gICAgZm9udC1mYW1pbHk6ICRtYWluLWZvbnQ7XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbn1cblxuLnBvcHVwX19hdmF0YXIge1xuICAgIG1hcmdpbjogMDtcbiAgICB3aWR0aDogODBweDtcbiAgICBoZWlnaHQ6IDgwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNCQjg2RkM7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG4gICAgZGlzcGxheTogZmxleDtcbn1cblxuLnBvcHVwX19pY29uIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgcGFkZGluZy1sZWZ0OiAzNXB4O1xuICAgIGZvbnQtZmFtaWx5OiAkbWFpbi1mb250O1xuICAgIGNvbG9yOiAjODA4MDgwO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG5cbiAgICAmLS1iaXJ0aCB7XG4gICAgICAgICY6OmJlZm9yZSB7XG4gICAgICAgICAgICB3aWR0aDogMThweDtcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgIEBpbmNsdWRlIHBzZXVkby1lbGVtZW50O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi8uLi9pbWcvaWNvbnMvYmlydGgteWVhci5zdmdcIik7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJi0tc3BlY2llcyB7XG4gICAgICAgICY6OmJlZm9yZSB7XG4gICAgICAgICAgICB3aWR0aDogMThweDtcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgIEBpbmNsdWRlIHBzZXVkby1lbGVtZW50O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi8uLi9pbWcvaWNvbnMvc3BlY2llcy5zdmdcIik7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJi0tZ2VuZGVyIHtcbiAgICAgICAgJjo6YmVmb3JlIHtcbiAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgQGluY2x1ZGUgcHNldWRvLWVsZW1lbnQ7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLy4uL2ltZy9pY29ucy9nZW5kZXIuc3ZnXCIpO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICYtLWhvbWV3b3JsZCB7XG4gICAgICAgICY6OmJlZm9yZSB7XG4gICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgIEBpbmNsdWRlIHBzZXVkby1lbGVtZW50O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi8uLi9pbWcvaWNvbnMvaG9tZXdvcmxkLnN2Z1wiKTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAmLS1maWxtcyB7XG4gICAgICAgICY6OmJlZm9yZSB7XG4gICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgIEBpbmNsdWRlIHBzZXVkby1lbGVtZW50O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi8uLi9pbWcvaWNvbnMvZmlsbXMuc3ZnXCIpO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICAgICAgfVxuICAgIH1cbn1cbjwvc3R5bGU+XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcG9wdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcG9wdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9wb3B1cC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NTI5YTA2Y2MmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vcG9wdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9wb3B1cC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vcG9wdXAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvaG9tZS91c2VyL2dpdC9zd0FQSS9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc1MjlhMDZjYycpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc1MjlhMDZjYycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc1MjlhMDZjYycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vcG9wdXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTUyOWEwNmNjJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzUyOWEwNmNjJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvY29tcG9uZW50cy9wb3B1cC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vY2FyZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9jYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cbjx0cmFuc2l0aW9uIG5hbWU9XCJjYXJkXCIgYXBwZWFyPlxuICA8c2VjdGlvbiBjbGFzcz1cImNhcmQgY2FyZHNfX2NhcmRcIiBAY2xpY2s9XCJvcGVuUG9wdXBcIj5cbiAgICA8aDMgY2xhc3M9XCJ2aXN1YWxseS1oaWRkZW5cIj5DaGFyYWN0ZXIgaW5mbzwvaDM+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRfX2F2YXRhclwiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJjYXJkX19hdmF0YXItdGV4dFwiPnt7aW5mby5uYW1lWzBdfX08L3NwYW4+XG4gICAgPC9kaXY+XG4gICAgPHAgY2xhc3M9XCJjYXJkX19uYW1lXCI+e3tpbmZvLm5hbWV9fTwvcD5cbiAgICA8cCBjbGFzcz1cImNhcmRfX3NwZWNpZXNcIj57e2luZm8ucmVhbFNwZWNpZX19PC9wPlxuICAgIDxwb3B1cCB2LWlmPVwicG9wdXBBY3RpdmVcIiA6aWQ9XCJpZFwiIEBjbG9zZVBvcHVwPVwiY2xvc2VQb3B1cFwiIC8+XG4gIDwvc2VjdGlvbj5cbjwvdHJhbnNpdGlvbj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgcG9wdXAgZnJvbSAnLi9wb3B1cC52dWUnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwb3B1cEFjdGl2ZTogZmFsc2UsXG4gICAgfVxuICB9LFxuICBjb21wb25lbnRzOiB7XG4gICAgcG9wdXAsXG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgaW5mbygpIHtcbiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5jaGFyYWN0ZXJzW3RoaXMuaWRdO1xuICAgIH1cbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBpZDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZTogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgY2xvc2VQb3B1cCgpIHtcbiAgICAgIHRoaXMucG9wdXBBY3RpdmUgPSBmYWxzZTtcbiAgICB9LFxuICAgIG9wZW5Qb3B1cCgpIHtcbiAgICAgIHRoaXMucG9wdXBBY3RpdmUgPSB0cnVlO1xuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZWQoKSB7XG4gICAgLy9zZXRJbnRlcnZhbCgoKSA9PiBjb25zb2xlLmxvZyh0aGlzLnBvcHVwQWN0aXZlKSwgMjAwMCk7XG4gICAgZmV0Y2godGhpcy5pbmZvLnNwZWNpZXNbMF0pXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgaWYocmVzcG9uc2Uub2spIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGVsc2UgdGhyb3cgKG5ldyBFcnJvcihgQmFkIHJlc3BvbnNlIGdvdCBzcGVjaWVgKSlcbiAgICAgIH0pXG4gICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICB0aGlzLiRzZXQodGhpcy5pbmZvLCBgcmVhbFNwZWNpZWAsIGBgKTtcbiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goYGFkZFNwZWNpZXNgLCBbdGhpcy5pbmZvLCBkYXRhLm5hbWVdKTtcbiAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gIH0sXG59XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG4uY2FyZC1lbnRlciB7XG4gICAgb3BhY2l0eTogMDtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMzBweCk7XG59XG4uY2FyZC1lbnRlci1hY3RpdmUge1xuICAgIHRyYW5zaXRpb246IGFsbCAxcztcbn1cbi5jYXJkIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDIwMHB4O1xuICAgIGJhY2tncm91bmQ6ICMxQTFBMUE7XG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgIHBhZGRpbmctdG9wOiAzM3B4O1xuICAgIGNvbG9yOiAjZmZmZmZmO1xuXG4gICAgJjpmb2N1cyxcbiAgICAmOmhvdmVyIHtcbiAgICAgICAgYm94LXNoYWRvdzogMCAxMHB4IDQwcHggcmdiYSgzNywgMTM2LCAxNjcsIDAuMzgpO1xuICAgIH1cbn1cblxuLmNhcmRzX19jYXJkIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyNHB4O1xufVxuXG4uY2FyZF9fYXZhdGFyIHtcbiAgICB3aWR0aDogODBweDtcbiAgICBoZWlnaHQ6IDgwcHg7XG4gICAgbWFyZ2luOiAwIGF1dG8gMTBweDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0JCODZGQztcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgICBkaXNwbGF5OiBmbGV4O1xufVxuLmF2YXRhci10ZXh0LFxuLmNhcmRfX2F2YXRhci10ZXh0IHtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGZvbnQtc2l6ZTogNDhweDtcbiAgICBsaW5lLWhlaWdodDogNTZweDtcbn1cblxuLmNhcmRfX25hbWUge1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAyMXB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLmNhcmRfX3NwZWNpZXMge1xuICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICBsaW5lLWhlaWdodDogMTVweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgY29sb3I6ICM4MDgwODA7XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9jYXJkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01YzgyODljMCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9jYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vY2FyZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vY2FyZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIi9ob21lL3VzZXIvZ2l0L3N3QVBJL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzVjODI4OWMwJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzVjODI4OWMwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzVjODI4OWMwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9jYXJkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01YzgyODljMCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc1YzgyODljMCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL2NvbXBvbmVudHMvY2FyZC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwidHJhbnNpdGlvblwiLCB7IGF0dHJzOiB7IG5hbWU6IFwiZmFsY29uXCIgfSB9LCBbXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmYWxjb25cIiB9LCBbXG4gICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJzaGlwXCIgfSwgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcInN2Z1wiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjYwXCIsXG4gICAgICAgICAgICAgIGhlaWdodDogXCI2NVwiLFxuICAgICAgICAgICAgICB2aWV3Qm94OiBcIjAgMCA2MCA2NVwiLFxuICAgICAgICAgICAgICBmaWxsOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJwYXRoXCIsIHtcbiAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICBkOlxuICAgICAgICAgICAgICAgICAgXCJNMjguNTUwNCA1LjI2ODM2TDI4LjU1MDQgMjQuODE5MkwyNy43ODMzIDI0LjgxOTJMMjguOTIyIDI5LjM3NkwyNy42MDggMjkuNzAzNkwyNi4zODcgMjQuODE5MkwyNC4wODk0IDI0LjgxOTJMMjcuMTM3MyAyOS44OTk0TDI1Ljk3NTYgMzAuNTk1N0wyMi41MTAxIDI0LjgxOTJMMjEuMTY5MyAyNC44MTkyTDIxLjE2OTMgMjMuNDY1TDI3LjE5NjIgMjMuNDY1TDI3LjE5NjIgMjEuOTQ2MUwyNS4wMDAyIDIxLjk0NjFMMjUuMDAwMiAyMC41OTE5TDI3LjE5NjIgMjAuNTkxOUwyNy4xOTYyIDE5LjA3MjlMMjUuMDAwMiAxOS4wNzI5TDI1LjAwMDIgMTcuNzE4N0wyNy4xOTYyIDE3LjcxODdMMjcuMTk2MiAxNi4xOTk4TDI1LjAwMDIgMTYuMTk5OEwyNS4wMDAyIDE0Ljg0NTVMMjcuMTk2MiAxNC44NDU1TDI3LjE5NjIgMTMuMzI2NkwyNS4wMDAyIDEzLjMyNjZMMjUuMDAwMiAxMS45NzI0TDI3LjE5NjIgMTEuOTcyNEwyNy4xOTYyIDEwLjQ1MzRMMjUuMDAwMiAxMC40NTM0TDI1LjAwMDIgOS4wOTkyM0wyNy4xOTYyIDkuMDk5MjNMMjcuMTk2MiA2LjYyMjU3TDI1LjQ4IDYuNjIyNTdMMTkuMzYzIDI0LjAzMjlMMTkuMjUzOSAyNC4xNDIxTDIwLjIxMTYgMjUuMDk5OEwxOS4yNTM5IDI2LjA1NzZMMTguMjk2MSAyNS4wOTk4TDE2LjUxNTMgMjYuODgwN0wyNC43NDk3IDMxLjgyMTZMMjQuMDUzNSAzMi45ODMzTDE1Ljc0ODEgMjguMDAwM0wxNC40NjE5IDMxLjEwNTJMMjMuODU3NiAzMy40NTRMMjMuNTMwMSAzNC43NjhMMTQuMjEyNCAzMi40Mzg4TDE0LjIxMjQgMzQuOTU3NkwxNS41Njc2IDM0Ljk1NzZMMTUuNTY3NiAzNi4zMTE4TDE0LjIxMjQgMzYuMzExOEwxNC4yMTI0IDM4LjgzMDZMMjMuNTMwMSAzNi41MDE1TDIzLjg1NzYgMzcuODE1NUwxNC40NjE5IDQwLjE2NDNMMTUuNzQ4MSA0My4yNjkyTDI0LjA1MzUgMzguMjg2MkwyNC43NDk3IDM5LjQ0NzlMMTYuNTE1MyA0NC4zODg4TDE4LjI5NjEgNDYuMTY5NkwxOS4yNTM5IDQ1LjIxMTlMMjAuMjExNiA0Ni4xNjk2TDE5LjI1MzkgNDcuMTI3NEwyMS4wMzQ3IDQ4LjkwODJMMjUuOTc1NiA0MC42NzM4TDI3LjEzNzMgNDEuMzdMMjIuMTU0MyA0OS42NzU0TDI1LjI1OTIgNTAuOTYxNkwyNy42MDggNDEuNTY1OUwyOC45MjIgNDEuODkzNEwyNi41OTI5IDUxLjIxMTFMMjkuMTExNyA1MS4yMTExTDI5LjExMTcgNDkuODU1OUwzMC40NjU5IDQ5Ljg1NTlMMzAuNDY1OSA1MS4yMTExTDMyLjk4NDcgNTEuMjExMUwzMC42NTU1IDQxLjg5MzRMMzEuOTY5NSA0MS41NjU5TDM0LjMxODMgNTAuOTYxNkwzNy40MjMyIDQ5LjY3NTRMMzIuNDQwMiA0MS4zN0wzMy42MDE5IDQwLjY3MzhMMzguNTQyOCA0OC45MDgyTDQwLjMyMzcgNDcuMTI3NEwzOS4zNjYgNDYuMTY5Nkw0MC4zMjM3IDQ1LjIxMTlMNDEuMjgxNCA0Ni4xNjk2TDQzLjA2MjMgNDQuMzg4OEwzNC44Mjc4IDM5LjQ0NzlMMzUuNTI0MSAzOC4yODYyTDQzLjgyOTQgNDMuMjY5Mkw0NS4xMTU2IDQwLjE2NDNMMzUuNzE5OSAzNy44MTU1TDM2LjA0NzUgMzYuNTAxNUw0NS4zNjUxIDM4LjgzMDZMNDUuMzY1MSAzNi4zMTE4TDQ0LjAwOTkgMzYuMzExOEw0NC4wMDk5IDM0Ljk1NzZMNDUuMzY1MSAzNC45NTc2TDQ1LjM2NTEgMzIuNDM4OEwzNi4wNDc1IDM0Ljc2OEwzNS43MTk5IDMzLjQ1NEw0NS4xMTU2IDMxLjEwNTJMNDMuODI5NCAyOC4wMDAzTDM1LjUyNDEgMzIuOTgzM0wzNC44Mjc4IDMxLjgyMTZMNDMuMDYyMyAyNi44ODA3TDQxLjI4MTQgMjUuMDk5OEw0MC4zMjM3IDI2LjA1NzVMMzkuMzY1OSAyNS4wOTk4TDQwLjMyMzcgMjQuMTQyMUw0MC4yMTQ1IDI0LjAzMjlMMzQuMDk3NSA2LjYyMjU3TDMyLjM4MTMgNi42MjI1N0wzMi4zODEzIDkuMDk5MjNMMzQuNTc3NCA5LjA5OTIzTDM0LjU3NzQgMTAuNDUzNEwzMi4zODEzIDEwLjQ1MzRMMzIuMzgxMyAxMS45NzI0TDM0LjU3NzQgMTEuOTcyNEwzNC41Nzc0IDEzLjMyNjZMMzIuMzgxMyAxMy4zMjY2TDMyLjM4MTMgMTQuODQ1NUwzNC41Nzc0IDE0Ljg0NTVMMzQuNTc3NCAxNi4xOTk4TDMyLjM4MTMgMTYuMTk5OEwzMi4zODEzIDE3LjcxODdMMzQuNTc3NCAxNy43MTg3TDM0LjU3NzQgMTkuMDcyOUwzMi4zODEzIDE5LjA3MjlMMzIuMzgxMyAyMC41OTE5TDM0LjU3NzQgMjAuNTkxOUwzNC41Nzc0IDIxLjk0NjFMMzIuMzgxMyAyMS45NDYxTDMyLjM4MTMgMjMuNDY1TDM4LjQwODIgMjMuNDY1TDM4LjQwODIgMjQuODE5MkwzNy4wNjc0IDI0LjgxOTJMMzMuNjAxOSAzMC41OTU3TDMyLjQ0MDIgMjkuODk5NEwzNS40ODgxIDI0LjgxOTJMMzMuMTkwNiAyNC44MTkyTDMxLjk2OTUgMjkuNzAzNkwzMC42NTU1IDI5LjM3NkwzMS43OTQyIDI0LjgxOTJMMzEuMDI3MSAyNC44MTkyTDMxLjAyNzEgNS4yNjgzNkwzNS4wNTcyIDUuMjY4MzZMNDEuMzkwNiAyMy4yOTM2TDQ0LjcyODcgMjYuNjMxN0w0Ni43MTg4IDMxLjQzNjZMNDYuNzE4OCAzOS44MzI5TDQ0LjcyODcgNDQuNjM3OEwzOC43OTE4IDUwLjU3NDdMMzMuOTg2OSA1Mi41NjQ4TDI1LjU5MDYgNTIuNTY0OEwyMC43ODU3IDUwLjU3NDdMMTQuODQ4OCA0NC42Mzc4TDEyLjg1ODcgMzkuODMyOUwxMi44NTg3IDMxLjQzNjZMMTQuODQ4OCAyNi42MzE3TDE4LjE4NyAyMy4yOTM2TDI0LjUyMDQgNS4yNjgzNkwyOC41NTA0IDUuMjY4MzZaXCIsXG4gICAgICAgICAgICAgICAgZmlsbDogXCJ3aGl0ZVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwicGF0aFwiLCB7XG4gICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgZDpcbiAgICAgICAgICAgICAgICAgIFwiTTMzLjE0MDggMzIuMjgyN0MzNC45ODkyIDM0LjEzMTEgMzQuOTg5MiAzNy4xMzgzIDMzLjE0MDggMzguOTg2N0MzMS4yOTI0IDQwLjgzNTEgMjguMjg1MiA0MC44MzUxIDI2LjQzNjggMzguOTg2N0MyNC41ODg0IDM3LjEzODMgMjQuNTg4NCAzNC4xMzExIDI2LjQzNjggMzIuMjgyN0MyOC4yODUyIDMwLjQzNDMgMzEuMjkyNCAzMC40MzQzIDMzLjE0MDggMzIuMjgyN1pNMjcuMzk0NSAzOC4wMjlDMjguNzE0NyAzOS4zNDkyIDMwLjg2MjkgMzkuMzQ5MiAzMi4xODMxIDM4LjAyOUMzMy41MDMzIDM2LjcwODggMzMuNTAzMyAzNC41NjA2IDMyLjE4MzEgMzMuMjQwNEMzMC44NjI5IDMxLjkyMDIgMjguNzE0NyAzMS45MjAyIDI3LjM5NDUgMzMuMjQwNEMyNi4wNzQzIDM0LjU2MDYgMjYuMDc0MyAzNi43MDg4IDI3LjM5NDUgMzguMDI5WlwiLFxuICAgICAgICAgICAgICAgIGZpbGw6IFwid2hpdGVcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcInBhdGhcIiwge1xuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIGQ6XG4gICAgICAgICAgICAgICAgICBcIk0zMC40NjYzIDE5LjIwODlMMzAuNDY2MyAyMC4zMTFMMjkuMTExOSAyMC4zMTFMMjkuMTExOSAxOS4yMDg5TDMwLjQ2NjMgMTkuMjA4OVpcIixcbiAgICAgICAgICAgICAgICBmaWxsOiBcIndoaXRlXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJyZWN0XCIsIHtcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwicmVjdC0xXCIsXG4gICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTMuNjI1N1wiLFxuICAgICAgICAgICAgICAgIGhlaWdodDogXCIyXCIsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOlxuICAgICAgICAgICAgICAgICAgXCJtYXRyaXgoLTEgMy4xNzg2NWUtMDggMy4xNzg2NWUtMDggMSAzNi42MDUgNTUuMTMzMilcIixcbiAgICAgICAgICAgICAgICBmaWxsOiBcIiM2RUY2RkZcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcInJlY3RcIiwge1xuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJyZWN0LTJcIixcbiAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBcIjAuNFwiLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjExLjE5MjVcIixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiMlwiLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTpcbiAgICAgICAgICAgICAgICAgIFwibWF0cml4KC0xIDMuMTc4NjVlLTA4IDMuMTc4NjVlLTA4IDEgMzUuNjMxNiA1OS4wMjYyKVwiLFxuICAgICAgICAgICAgICAgIGZpbGw6IFwiIzZFRjZGRlwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwicmVjdFwiLCB7XG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcInJlY3QtM1wiLFxuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IFwiMC4xXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiOC43NTkzNlwiLFxuICAgICAgICAgICAgICAgIGhlaWdodDogXCIyXCIsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOlxuICAgICAgICAgICAgICAgICAgXCJtYXRyaXgoLTEgMy4xNzg2NWUtMDggMy4xNzg2NWUtMDggMSAzNC4xNzE5IDYyLjkxOTMpXCIsXG4gICAgICAgICAgICAgICAgZmlsbDogXCIjNkVGNkZGXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdXG4gICAgICAgIClcbiAgICAgIF0pXG4gICAgXSlcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XG48dHJhbnNpdGlvbiBuYW1lPVwiZmFsY29uXCI+XG4gIDxkaXYgY2xhc3M9XCJmYWxjb25cIj5cbiAgICA8c3BhbiBjbGFzcz1cInNoaXBcIj5cbiAgICAgIDxzdmcgd2lkdGg9XCI2MFwiIGhlaWdodD1cIjY1XCIgdmlld0JveD1cIjAgMCA2MCA2NVwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJNMjguNTUwNCA1LjI2ODM2TDI4LjU1MDQgMjQuODE5MkwyNy43ODMzIDI0LjgxOTJMMjguOTIyIDI5LjM3NkwyNy42MDggMjkuNzAzNkwyNi4zODcgMjQuODE5MkwyNC4wODk0IDI0LjgxOTJMMjcuMTM3MyAyOS44OTk0TDI1Ljk3NTYgMzAuNTk1N0wyMi41MTAxIDI0LjgxOTJMMjEuMTY5MyAyNC44MTkyTDIxLjE2OTMgMjMuNDY1TDI3LjE5NjIgMjMuNDY1TDI3LjE5NjIgMjEuOTQ2MUwyNS4wMDAyIDIxLjk0NjFMMjUuMDAwMiAyMC41OTE5TDI3LjE5NjIgMjAuNTkxOUwyNy4xOTYyIDE5LjA3MjlMMjUuMDAwMiAxOS4wNzI5TDI1LjAwMDIgMTcuNzE4N0wyNy4xOTYyIDE3LjcxODdMMjcuMTk2MiAxNi4xOTk4TDI1LjAwMDIgMTYuMTk5OEwyNS4wMDAyIDE0Ljg0NTVMMjcuMTk2MiAxNC44NDU1TDI3LjE5NjIgMTMuMzI2NkwyNS4wMDAyIDEzLjMyNjZMMjUuMDAwMiAxMS45NzI0TDI3LjE5NjIgMTEuOTcyNEwyNy4xOTYyIDEwLjQ1MzRMMjUuMDAwMiAxMC40NTM0TDI1LjAwMDIgOS4wOTkyM0wyNy4xOTYyIDkuMDk5MjNMMjcuMTk2MiA2LjYyMjU3TDI1LjQ4IDYuNjIyNTdMMTkuMzYzIDI0LjAzMjlMMTkuMjUzOSAyNC4xNDIxTDIwLjIxMTYgMjUuMDk5OEwxOS4yNTM5IDI2LjA1NzZMMTguMjk2MSAyNS4wOTk4TDE2LjUxNTMgMjYuODgwN0wyNC43NDk3IDMxLjgyMTZMMjQuMDUzNSAzMi45ODMzTDE1Ljc0ODEgMjguMDAwM0wxNC40NjE5IDMxLjEwNTJMMjMuODU3NiAzMy40NTRMMjMuNTMwMSAzNC43NjhMMTQuMjEyNCAzMi40Mzg4TDE0LjIxMjQgMzQuOTU3NkwxNS41Njc2IDM0Ljk1NzZMMTUuNTY3NiAzNi4zMTE4TDE0LjIxMjQgMzYuMzExOEwxNC4yMTI0IDM4LjgzMDZMMjMuNTMwMSAzNi41MDE1TDIzLjg1NzYgMzcuODE1NUwxNC40NjE5IDQwLjE2NDNMMTUuNzQ4MSA0My4yNjkyTDI0LjA1MzUgMzguMjg2MkwyNC43NDk3IDM5LjQ0NzlMMTYuNTE1MyA0NC4zODg4TDE4LjI5NjEgNDYuMTY5NkwxOS4yNTM5IDQ1LjIxMTlMMjAuMjExNiA0Ni4xNjk2TDE5LjI1MzkgNDcuMTI3NEwyMS4wMzQ3IDQ4LjkwODJMMjUuOTc1NiA0MC42NzM4TDI3LjEzNzMgNDEuMzdMMjIuMTU0MyA0OS42NzU0TDI1LjI1OTIgNTAuOTYxNkwyNy42MDggNDEuNTY1OUwyOC45MjIgNDEuODkzNEwyNi41OTI5IDUxLjIxMTFMMjkuMTExNyA1MS4yMTExTDI5LjExMTcgNDkuODU1OUwzMC40NjU5IDQ5Ljg1NTlMMzAuNDY1OSA1MS4yMTExTDMyLjk4NDcgNTEuMjExMUwzMC42NTU1IDQxLjg5MzRMMzEuOTY5NSA0MS41NjU5TDM0LjMxODMgNTAuOTYxNkwzNy40MjMyIDQ5LjY3NTRMMzIuNDQwMiA0MS4zN0wzMy42MDE5IDQwLjY3MzhMMzguNTQyOCA0OC45MDgyTDQwLjMyMzcgNDcuMTI3NEwzOS4zNjYgNDYuMTY5Nkw0MC4zMjM3IDQ1LjIxMTlMNDEuMjgxNCA0Ni4xNjk2TDQzLjA2MjMgNDQuMzg4OEwzNC44Mjc4IDM5LjQ0NzlMMzUuNTI0MSAzOC4yODYyTDQzLjgyOTQgNDMuMjY5Mkw0NS4xMTU2IDQwLjE2NDNMMzUuNzE5OSAzNy44MTU1TDM2LjA0NzUgMzYuNTAxNUw0NS4zNjUxIDM4LjgzMDZMNDUuMzY1MSAzNi4zMTE4TDQ0LjAwOTkgMzYuMzExOEw0NC4wMDk5IDM0Ljk1NzZMNDUuMzY1MSAzNC45NTc2TDQ1LjM2NTEgMzIuNDM4OEwzNi4wNDc1IDM0Ljc2OEwzNS43MTk5IDMzLjQ1NEw0NS4xMTU2IDMxLjEwNTJMNDMuODI5NCAyOC4wMDAzTDM1LjUyNDEgMzIuOTgzM0wzNC44Mjc4IDMxLjgyMTZMNDMuMDYyMyAyNi44ODA3TDQxLjI4MTQgMjUuMDk5OEw0MC4zMjM3IDI2LjA1NzVMMzkuMzY1OSAyNS4wOTk4TDQwLjMyMzcgMjQuMTQyMUw0MC4yMTQ1IDI0LjAzMjlMMzQuMDk3NSA2LjYyMjU3TDMyLjM4MTMgNi42MjI1N0wzMi4zODEzIDkuMDk5MjNMMzQuNTc3NCA5LjA5OTIzTDM0LjU3NzQgMTAuNDUzNEwzMi4zODEzIDEwLjQ1MzRMMzIuMzgxMyAxMS45NzI0TDM0LjU3NzQgMTEuOTcyNEwzNC41Nzc0IDEzLjMyNjZMMzIuMzgxMyAxMy4zMjY2TDMyLjM4MTMgMTQuODQ1NUwzNC41Nzc0IDE0Ljg0NTVMMzQuNTc3NCAxNi4xOTk4TDMyLjM4MTMgMTYuMTk5OEwzMi4zODEzIDE3LjcxODdMMzQuNTc3NCAxNy43MTg3TDM0LjU3NzQgMTkuMDcyOUwzMi4zODEzIDE5LjA3MjlMMzIuMzgxMyAyMC41OTE5TDM0LjU3NzQgMjAuNTkxOUwzNC41Nzc0IDIxLjk0NjFMMzIuMzgxMyAyMS45NDYxTDMyLjM4MTMgMjMuNDY1TDM4LjQwODIgMjMuNDY1TDM4LjQwODIgMjQuODE5MkwzNy4wNjc0IDI0LjgxOTJMMzMuNjAxOSAzMC41OTU3TDMyLjQ0MDIgMjkuODk5NEwzNS40ODgxIDI0LjgxOTJMMzMuMTkwNiAyNC44MTkyTDMxLjk2OTUgMjkuNzAzNkwzMC42NTU1IDI5LjM3NkwzMS43OTQyIDI0LjgxOTJMMzEuMDI3MSAyNC44MTkyTDMxLjAyNzEgNS4yNjgzNkwzNS4wNTcyIDUuMjY4MzZMNDEuMzkwNiAyMy4yOTM2TDQ0LjcyODcgMjYuNjMxN0w0Ni43MTg4IDMxLjQzNjZMNDYuNzE4OCAzOS44MzI5TDQ0LjcyODcgNDQuNjM3OEwzOC43OTE4IDUwLjU3NDdMMzMuOTg2OSA1Mi41NjQ4TDI1LjU5MDYgNTIuNTY0OEwyMC43ODU3IDUwLjU3NDdMMTQuODQ4OCA0NC42Mzc4TDEyLjg1ODcgMzkuODMyOUwxMi44NTg3IDMxLjQzNjZMMTQuODQ4OCAyNi42MzE3TDE4LjE4NyAyMy4yOTM2TDI0LjUyMDQgNS4yNjgzNkwyOC41NTA0IDUuMjY4MzZaXCJcbiAgICAgICAgICBmaWxsPVwid2hpdGVcIiAvPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJNMzMuMTQwOCAzMi4yODI3QzM0Ljk4OTIgMzQuMTMxMSAzNC45ODkyIDM3LjEzODMgMzMuMTQwOCAzOC45ODY3QzMxLjI5MjQgNDAuODM1MSAyOC4yODUyIDQwLjgzNTEgMjYuNDM2OCAzOC45ODY3QzI0LjU4ODQgMzcuMTM4MyAyNC41ODg0IDM0LjEzMTEgMjYuNDM2OCAzMi4yODI3QzI4LjI4NTIgMzAuNDM0MyAzMS4yOTI0IDMwLjQzNDMgMzMuMTQwOCAzMi4yODI3Wk0yNy4zOTQ1IDM4LjAyOUMyOC43MTQ3IDM5LjM0OTIgMzAuODYyOSAzOS4zNDkyIDMyLjE4MzEgMzguMDI5QzMzLjUwMzMgMzYuNzA4OCAzMy41MDMzIDM0LjU2MDYgMzIuMTgzMSAzMy4yNDA0QzMwLjg2MjkgMzEuOTIwMiAyOC43MTQ3IDMxLjkyMDIgMjcuMzk0NSAzMy4yNDA0QzI2LjA3NDMgMzQuNTYwNiAyNi4wNzQzIDM2LjcwODggMjcuMzk0NSAzOC4wMjlaXCJcbiAgICAgICAgICBmaWxsPVwid2hpdGVcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTMwLjQ2NjMgMTkuMjA4OUwzMC40NjYzIDIwLjMxMUwyOS4xMTE5IDIwLjMxMUwyOS4xMTE5IDE5LjIwODlMMzAuNDY2MyAxOS4yMDg5WlwiIGZpbGw9XCJ3aGl0ZVwiIC8+XG4gICAgICAgIDxyZWN0IGNsYXNzPVwicmVjdC0xXCIgd2lkdGg9XCIxMy42MjU3XCIgaGVpZ2h0PVwiMlwiIHRyYW5zZm9ybT1cIm1hdHJpeCgtMSAzLjE3ODY1ZS0wOCAzLjE3ODY1ZS0wOCAxIDM2LjYwNSA1NS4xMzMyKVwiIGZpbGw9XCIjNkVGNkZGXCIgLz5cbiAgICAgICAgPHJlY3QgY2xhc3M9XCJyZWN0LTJcIiBvcGFjaXR5PVwiMC40XCIgd2lkdGg9XCIxMS4xOTI1XCIgaGVpZ2h0PVwiMlwiIHRyYW5zZm9ybT1cIm1hdHJpeCgtMSAzLjE3ODY1ZS0wOCAzLjE3ODY1ZS0wOCAxIDM1LjYzMTYgNTkuMDI2MilcIiBmaWxsPVwiIzZFRjZGRlwiIC8+XG4gICAgICAgIDxyZWN0IGNsYXNzPVwicmVjdC0zXCIgb3BhY2l0eT1cIjAuMVwiIHdpZHRoPVwiOC43NTkzNlwiIGhlaWdodD1cIjJcIiB0cmFuc2Zvcm09XCJtYXRyaXgoLTEgMy4xNzg2NWUtMDggMy4xNzg2NWUtMDggMSAzNC4xNzE5IDYyLjkxOTMpXCIgZmlsbD1cIiM2RUY2RkZcIiAvPlxuICAgICAgPC9zdmc+XG4gICAgPC9zcGFuPlxuICA8L2Rpdj5cbjwvdHJhbnNpdGlvbj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBkYXRhKCkge1xuICAgIHJldHVybiB7fVxuICB9LFxufVxuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbi5mYWxjb24tbGVhdmUtYWN0aXZlIHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMXM7XG59XG4uc2hpcCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGg6IDYwcHg7XG4gICAgaGVpZ2h0OiA2NXB4O1xuICAgIC8vYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi8uLi9pbWcvaWNvbnMvZmFsY29uLnN2Z1wiKTtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XG59XG4uZmFsY29uIHtcbiAgICB3aWR0aDogNjBweDtcbiAgICBoZWlnaHQ6IDY1cHg7XG4gICAgYW5pbWF0aW9uLW5hbWU6IGZseTtcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDRzO1xuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGxpbmVhcjtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiA1MCUgMTAwcHg7XG59XG4ucmVjdC0xIHtcbiAgICBhbmltYXRpb24tbmFtZTogcHVscy0xO1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMXM7XG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG59XG4ucmVjdC0yIHtcbiAgICBhbmltYXRpb24tbmFtZTogcHVscy0yO1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMXM7XG4gICAgYW5pbWF0aW9uLWRlbGF5OiAwLjFzO1xuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xufVxuLnJlY3QtMyB7XG4gICAgYW5pbWF0aW9uLW5hbWU6IHB1bHMtMztcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDFzO1xuICAgIGFuaW1hdGlvbi1kZWxheTogMC4ycztcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTtcbn1cblxuQGtleWZyYW1lcyBwdWxzLTEge1xuICAgIDAlIHtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gICAgMTAwJSB7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxufVxuQGtleWZyYW1lcyBwdWxzLTIge1xuICAgIDAlIHtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gICAgMTAwJSB7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxufVxuQGtleWZyYW1lcyBwdWxzLTMge1xuICAgIDAlIHtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gICAgMTAwJSB7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxufVxuQGtleWZyYW1lcyBmbHkge1xuICAgIDAlIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpO1xuICAgIH1cblxuICAgIDEwMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NTBkZWcpO1xuICAgIH1cbn1cbjwvc3R5bGU+XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbG9hZGVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2xvYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2xvYWRlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZjI0NDhlYmEmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vbG9hZGVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vbG9hZGVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9sb2FkZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvaG9tZS91c2VyL2dpdC9zd0FQSS9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCdmMjQ0OGViYScpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdmMjQ0OGViYScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdmMjQ0OGViYScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vbG9hZGVyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mMjQ0OGViYSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdmMjQ0OGViYScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL2NvbXBvbmVudHMvbG9hZGVyLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgPGxvYWRlciBjbGFzcz1cImNvbnRhaW5lcl9fbG9hZGVyXCIgdi1pZj1cIiFsb2FkZWRcIiAvPlxuICA8c2VhcmNoIHYtaWY9XCJsb2FkZWRcIiAvPlxuICA8c2VjdGlvbiB2LWlmPVwibG9hZGVkXCIgY2xhc3M9XCJjYXJkcyBtYWluX19jYXJkc1wiPlxuICAgIDxoMiBjbGFzcz1cInZpc3VhbGx5LWhpZGRlblwiPkNoYXJhY3RlcnMgY2FyZHM8L2gyPlxuICAgIDxjYXJkIHYtZm9yPVwiY2hhcmFjdGVyIGluICRzdG9yZS5zdGF0ZS5jaGFyYWN0ZXJzXCIgOmtleT1cIiRzdG9yZS5zdGF0ZS5jaGFyYWN0ZXJzLmluZGV4T2YoY2hhcmFjdGVyKVwiIDpkYXRhPVwiY2hhcmFjdGVyXCIgOmlkPVwiJHN0b3JlLnN0YXRlLmNoYXJhY3RlcnMuaW5kZXhPZihjaGFyYWN0ZXIpXCIgLz5cbiAgPC9zZWN0aW9uPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHNlYXJjaCBmcm9tICcuL3NlYXJjaC52dWUnO1xuaW1wb3J0IGNhcmQgZnJvbSAnLi9jYXJkLnZ1ZSc7XG5pbXBvcnQgbG9hZGVyIGZyb20gJy4vbG9hZGVyLnZ1ZSc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICBsb2FkZWQ6IGZhbHNlLFxuICAgIH1cbiAgfSxcbiAgY29tcG9uZW50czoge1xuICAgIHNlYXJjaCxcbiAgICBjYXJkLFxuICAgIGxvYWRlcixcbiAgfSxcbiAgY3JlYXRlZCgpIHtcbiAgICBsZXQgaWQ7XG4gICAgY29uc3QgVVJMID0gYGh0dHBzOi8vc3dhcGkuY28vYXBpL3Blb3BsZS9gO1xuICAgIGZldGNoKFVSTClcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBpZihyZXNwb25zZS5vaykge1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgKG5ldyBFcnJvcihgQmFkIHJlc3BvbnNlYCkpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICB0aGlzLiRzZXQodGhpcy4kc3RvcmUuc3RhdGUsIGBjaGFyYWN0ZXJzYCwgZGF0YS5yZXN1bHRzKTtcbiAgICAgICAgdGhpcy4kc2V0KHRoaXMuJHN0b3JlLnN0YXRlLCBgbmV4dGAsIGRhdGEubmV4dCk7XG4gICAgICAgIHRoaXMuJHNldCh0aGlzLiRzdG9yZS5zdGF0ZSwgYGNvdW50YCwgZGF0YS5jb3VudCk7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAgICBpZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmKCF0aGlzLmxvYWRpbmcpIHtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSB0cnVlO1xuICAgICAgICBjbGVhckludGVydmFsKGlkKTtcbiAgICAgIH1cbiAgICB9LCAyMDAwKTtcbiAgICAvLyBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAvLyAgIGZldGNoKFVSTClcbiAgICAvLyAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgLy8gICAgICAgaWYocmVzcG9uc2Uub2spIHtcbiAgICAvLyAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgLy8gICAgICAgfSBlbHNlIHtcbiAgICAvLyAgICAgICAgIHRocm93IChuZXcgRXJyb3IoYEJhZCByZXNwb25zZWApKVxuICAgIC8vICAgICAgIH1cbiAgICAvLyAgICAgfSlcbiAgICAvLyAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAvLyAgICAgICBmb3IobGV0IGl0ZW0gb2YgZGF0YS5yZXN1bHRzKSB7XG4gICAgLy8gICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoYGFkZENoYXJhY3RlcmAsIGl0ZW0pO1xuICAgIC8vICAgICAgIH1cbiAgICAvLyAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAvLyAgICAgfSlcbiAgICAvLyAgICAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5lcnJvcihlcnJvcikpXG4gICAgLy8gfSwgNTAwMCk7XG4gIH0sXG59XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG4uY29udGFpbmVyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWxlZnQ6IDcuNSU7XG4gICAgcGFkZGluZy1yaWdodDogNy41JTtcbn1cbi5jb250YWluZXJfX2xvYWRlciB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogNDAlO1xuICAgIGxlZnQ6IDUwJTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTYxN2FiMGJlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL2hvbWUvdXNlci9naXQvc3dBUEkvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNjE3YWIwYmUnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNjE3YWIwYmUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNjE3YWIwYmUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjE3YWIwYmUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignNjE3YWIwYmUnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9jb21wb25lbnRzL0FwcC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgVnVleCBmcm9tICd2dWV4JztcbmltcG9ydCBzdHlsZSBmcm9tICcuL3Njc3Mvc3R5bGUuc2Nzcyc7XG5pbXBvcnQgQXBwIGZyb20gJy4vY29tcG9uZW50cy9BcHAudnVlJztcblxuVnVlLnVzZShWdWV4KTtcblxuY29uc3Qgc3RvcmUgPSBuZXcgVnVleC5TdG9yZSh7XG4gIHN0YXRlOiB7XG4gICAgc2hvd2VkQ291bnRlcjogMCxcbiAgfSxcbiAgbXV0YXRpb25zOiB7XG4gICAgc2hvd2VkQ291bnRlckluY3JlbWVudChzdGF0ZSkge1xuICAgICAgc3RhdGUuc2hvd2VkQ291bnRlcisrO1xuICAgIH0sXG4gICAgYWRkQ2hhcmFjdGVyKHN0YXRlLCBjaGFyYWN0ZXIpIHtcbiAgICAgIHN0YXRlLmNoYXJhY3RlcnMucHVzaChjaGFyYWN0ZXIpO1xuICAgIH0sXG4gICAgYWRkU3BlY2llcyhzdGF0ZSwgY2hhcmFjdGVyKSB7XG4gICAgICBjaGFyYWN0ZXJbMF0ucmVhbFNwZWNpZSA9IGNoYXJhY3RlclsxXTtcbiAgICB9LFxuICB9LFxuICBhY3Rpb25zOiB7XG4gICAgYWRkQ2hhcmFjdGVyKHtcbiAgICAgIGNvbW1pdCxcbiAgICAgIHN0YXRlXG4gICAgfSwgY2hhcmFjdGVyKSB7XG4gICAgICBjb21taXQoYGFkZENoYXJhY3RlcmAsIHN0YXRlLCBjaGFyYWN0ZXIpO1xuICAgIH0sXG4gICAgYWRkU3BlY2llcyh7XG4gICAgICBjb21taXQsXG4gICAgICBzdGF0ZVxuICAgIH0sIGNoYXJhY3Rlcikge1xuICAgICAgY29tbWl0KGBhZGRTcGVjaWVzYCwgY2hhcmFjdGVyKTtcbiAgICB9LFxuICB9XG59KTtcblxubmV3IFZ1ZSh7XG4gIGVsOiAnI2FwcCcsXG4gIHN0b3JlLFxuICByZW5kZXI6IGggPT4gaChBcHApLFxufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9